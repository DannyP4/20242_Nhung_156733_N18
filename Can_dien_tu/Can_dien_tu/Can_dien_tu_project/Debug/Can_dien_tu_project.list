
Can_dien_tu_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08008398  08008398  00009398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b24  08008b24  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b24  08008b24  00009b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b2c  08008b2c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b2c  08008b2c  00009b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b30  08008b30  00009b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008b34  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000294  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3dd  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002968  00000000  00000000  000195e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  0001bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a00  00000000  00000000  0001cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253a2  00000000  00000000  0001d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120d9  00000000  00000000  00042a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7052  00000000  00000000  00054ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012bb35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000465c  00000000  00000000  0012bb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001301d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008380 	.word	0x08008380

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008380 	.word	0x08008380

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_frsub>:
 8000bc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	e002      	b.n	8000bd4 <__addsf3>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fsub>:
 8000bd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bd4 <__addsf3>:
 8000bd4:	0042      	lsls	r2, r0, #1
 8000bd6:	bf1f      	itttt	ne
 8000bd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bdc:	ea92 0f03 	teqne	r2, r3
 8000be0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be8:	d06a      	beq.n	8000cc0 <__addsf3+0xec>
 8000bea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf2:	bfc1      	itttt	gt
 8000bf4:	18d2      	addgt	r2, r2, r3
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	4048      	eorgt	r0, r1
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	bfb8      	it	lt
 8000bfe:	425b      	neglt	r3, r3
 8000c00:	2b19      	cmp	r3, #25
 8000c02:	bf88      	it	hi
 8000c04:	4770      	bxhi	lr
 8000c06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4240      	negne	r0, r0
 8000c16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4249      	negne	r1, r1
 8000c26:	ea92 0f03 	teq	r2, r3
 8000c2a:	d03f      	beq.n	8000cac <__addsf3+0xd8>
 8000c2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c30:	fa41 fc03 	asr.w	ip, r1, r3
 8000c34:	eb10 000c 	adds.w	r0, r0, ip
 8000c38:	f1c3 0320 	rsb	r3, r3, #32
 8000c3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c44:	d502      	bpl.n	8000c4c <__addsf3+0x78>
 8000c46:	4249      	negs	r1, r1
 8000c48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c50:	d313      	bcc.n	8000c7a <__addsf3+0xa6>
 8000c52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c56:	d306      	bcc.n	8000c66 <__addsf3+0x92>
 8000c58:	0840      	lsrs	r0, r0, #1
 8000c5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5e:	f102 0201 	add.w	r2, r2, #1
 8000c62:	2afe      	cmp	r2, #254	@ 0xfe
 8000c64:	d251      	bcs.n	8000d0a <__addsf3+0x136>
 8000c66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6e:	bf08      	it	eq
 8000c70:	f020 0001 	biceq.w	r0, r0, #1
 8000c74:	ea40 0003 	orr.w	r0, r0, r3
 8000c78:	4770      	bx	lr
 8000c7a:	0049      	lsls	r1, r1, #1
 8000c7c:	eb40 0000 	adc.w	r0, r0, r0
 8000c80:	3a01      	subs	r2, #1
 8000c82:	bf28      	it	cs
 8000c84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c88:	d2ed      	bcs.n	8000c66 <__addsf3+0x92>
 8000c8a:	fab0 fc80 	clz	ip, r0
 8000c8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c92:	ebb2 020c 	subs.w	r2, r2, ip
 8000c96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9a:	bfaa      	itet	ge
 8000c9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca0:	4252      	neglt	r2, r2
 8000ca2:	4318      	orrge	r0, r3
 8000ca4:	bfbc      	itt	lt
 8000ca6:	40d0      	lsrlt	r0, r2
 8000ca8:	4318      	orrlt	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	f092 0f00 	teq	r2, #0
 8000cb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cb4:	bf06      	itte	eq
 8000cb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cba:	3201      	addeq	r2, #1
 8000cbc:	3b01      	subne	r3, #1
 8000cbe:	e7b5      	b.n	8000c2c <__addsf3+0x58>
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d021      	beq.n	8000d14 <__addsf3+0x140>
 8000cd0:	ea92 0f03 	teq	r2, r3
 8000cd4:	d004      	beq.n	8000ce0 <__addsf3+0x10c>
 8000cd6:	f092 0f00 	teq	r2, #0
 8000cda:	bf08      	it	eq
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	4770      	bx	lr
 8000ce0:	ea90 0f01 	teq	r0, r1
 8000ce4:	bf1c      	itt	ne
 8000ce6:	2000      	movne	r0, #0
 8000ce8:	4770      	bxne	lr
 8000cea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cee:	d104      	bne.n	8000cfa <__addsf3+0x126>
 8000cf0:	0040      	lsls	r0, r0, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cf8:	4770      	bx	lr
 8000cfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cfe:	bf3c      	itt	cc
 8000d00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bxcc	lr
 8000d06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d12:	4770      	bx	lr
 8000d14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d18:	bf16      	itet	ne
 8000d1a:	4608      	movne	r0, r1
 8000d1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d20:	4601      	movne	r1, r0
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	bf06      	itte	eq
 8000d26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2a:	ea90 0f01 	teqeq	r0, r1
 8000d2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_ui2f>:
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e004      	b.n	8000d44 <__aeabi_i2f+0x8>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_i2f>:
 8000d3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d40:	bf48      	it	mi
 8000d42:	4240      	negmi	r0, r0
 8000d44:	ea5f 0c00 	movs.w	ip, r0
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d50:	4601      	mov	r1, r0
 8000d52:	f04f 0000 	mov.w	r0, #0
 8000d56:	e01c      	b.n	8000d92 <__aeabi_l2f+0x2a>

08000d58 <__aeabi_ul2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e00a      	b.n	8000d7c <__aeabi_l2f+0x14>
 8000d66:	bf00      	nop

08000d68 <__aeabi_l2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d74:	d502      	bpl.n	8000d7c <__aeabi_l2f+0x14>
 8000d76:	4240      	negs	r0, r0
 8000d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7c:	ea5f 0c01 	movs.w	ip, r1
 8000d80:	bf02      	ittt	eq
 8000d82:	4684      	moveq	ip, r0
 8000d84:	4601      	moveq	r1, r0
 8000d86:	2000      	moveq	r0, #0
 8000d88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d8c:	bf08      	it	eq
 8000d8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d96:	fabc f28c 	clz	r2, ip
 8000d9a:	3a08      	subs	r2, #8
 8000d9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da0:	db10      	blt.n	8000dc4 <__aeabi_l2f+0x5c>
 8000da2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da6:	4463      	add	r3, ip
 8000da8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000db4:	fa20 f202 	lsr.w	r2, r0, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	f020 0001 	biceq.w	r0, r0, #1
 8000dc2:	4770      	bx	lr
 8000dc4:	f102 0220 	add.w	r2, r2, #32
 8000dc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_ldivmod>:
 8000de4:	b97b      	cbnz	r3, 8000e06 <__aeabi_ldivmod+0x22>
 8000de6:	b972      	cbnz	r2, 8000e06 <__aeabi_ldivmod+0x22>
 8000de8:	2900      	cmp	r1, #0
 8000dea:	bfbe      	ittt	lt
 8000dec:	2000      	movlt	r0, #0
 8000dee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000df2:	e006      	blt.n	8000e02 <__aeabi_ldivmod+0x1e>
 8000df4:	bf08      	it	eq
 8000df6:	2800      	cmpeq	r0, #0
 8000df8:	bf1c      	itt	ne
 8000dfa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8000e02:	f000 b9d3 	b.w	80011ac <__aeabi_idiv0>
 8000e06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	db09      	blt.n	8000e26 <__aeabi_ldivmod+0x42>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db1a      	blt.n	8000e4c <__aeabi_ldivmod+0x68>
 8000e16:	f000 f84d 	bl	8000eb4 <__udivmoddi4>
 8000e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e22:	b004      	add	sp, #16
 8000e24:	4770      	bx	lr
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db1b      	blt.n	8000e68 <__aeabi_ldivmod+0x84>
 8000e30:	f000 f840 	bl	8000eb4 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	4252      	negs	r2, r2
 8000e46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4a:	4770      	bx	lr
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	f000 f82f 	bl	8000eb4 <__udivmoddi4>
 8000e56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5e:	b004      	add	sp, #16
 8000e60:	4240      	negs	r0, r0
 8000e62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e66:	4770      	bx	lr
 8000e68:	4252      	negs	r2, r2
 8000e6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6e:	f000 f821 	bl	8000eb4 <__udivmoddi4>
 8000e72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7a:	b004      	add	sp, #16
 8000e7c:	4252      	negs	r2, r2
 8000e7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_uldivmod>:
 8000e84:	b953      	cbnz	r3, 8000e9c <__aeabi_uldivmod+0x18>
 8000e86:	b94a      	cbnz	r2, 8000e9c <__aeabi_uldivmod+0x18>
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	bf08      	it	eq
 8000e8c:	2800      	cmpeq	r0, #0
 8000e8e:	bf1c      	itt	ne
 8000e90:	f04f 31ff 	movne.w	r1, #4294967295
 8000e94:	f04f 30ff 	movne.w	r0, #4294967295
 8000e98:	f000 b988 	b.w	80011ac <__aeabi_idiv0>
 8000e9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea4:	f000 f806 	bl	8000eb4 <__udivmoddi4>
 8000ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb0:	b004      	add	sp, #16
 8000eb2:	4770      	bx	lr

08000eb4 <__udivmoddi4>:
 8000eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	9d08      	ldr	r5, [sp, #32]
 8000eba:	468e      	mov	lr, r1
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	4688      	mov	r8, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d14a      	bne.n	8000f5a <__udivmoddi4+0xa6>
 8000ec4:	428a      	cmp	r2, r1
 8000ec6:	4617      	mov	r7, r2
 8000ec8:	d962      	bls.n	8000f90 <__udivmoddi4+0xdc>
 8000eca:	fab2 f682 	clz	r6, r2
 8000ece:	b14e      	cbz	r6, 8000ee4 <__udivmoddi4+0x30>
 8000ed0:	f1c6 0320 	rsb	r3, r6, #32
 8000ed4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ed8:	fa20 f303 	lsr.w	r3, r0, r3
 8000edc:	40b7      	lsls	r7, r6
 8000ede:	ea43 0808 	orr.w	r8, r3, r8
 8000ee2:	40b4      	lsls	r4, r6
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	fa1f fc87 	uxth.w	ip, r7
 8000eec:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ef0:	0c23      	lsrs	r3, r4, #16
 8000ef2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ef6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000efa:	fb01 f20c 	mul.w	r2, r1, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d909      	bls.n	8000f16 <__udivmoddi4+0x62>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f08:	f080 80ea 	bcs.w	80010e0 <__udivmoddi4+0x22c>
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f240 80e7 	bls.w	80010e0 <__udivmoddi4+0x22c>
 8000f12:	3902      	subs	r1, #2
 8000f14:	443b      	add	r3, r7
 8000f16:	1a9a      	subs	r2, r3, r2
 8000f18:	b2a3      	uxth	r3, r4
 8000f1a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f1e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f26:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f2a:	459c      	cmp	ip, r3
 8000f2c:	d909      	bls.n	8000f42 <__udivmoddi4+0x8e>
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f34:	f080 80d6 	bcs.w	80010e4 <__udivmoddi4+0x230>
 8000f38:	459c      	cmp	ip, r3
 8000f3a:	f240 80d3 	bls.w	80010e4 <__udivmoddi4+0x230>
 8000f3e:	443b      	add	r3, r7
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f46:	eba3 030c 	sub.w	r3, r3, ip
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	b11d      	cbz	r5, 8000f56 <__udivmoddi4+0xa2>
 8000f4e:	40f3      	lsrs	r3, r6
 8000f50:	2200      	movs	r2, #0
 8000f52:	e9c5 3200 	strd	r3, r2, [r5]
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d905      	bls.n	8000f6a <__udivmoddi4+0xb6>
 8000f5e:	b10d      	cbz	r5, 8000f64 <__udivmoddi4+0xb0>
 8000f60:	e9c5 0100 	strd	r0, r1, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	4608      	mov	r0, r1
 8000f68:	e7f5      	b.n	8000f56 <__udivmoddi4+0xa2>
 8000f6a:	fab3 f183 	clz	r1, r3
 8000f6e:	2900      	cmp	r1, #0
 8000f70:	d146      	bne.n	8001000 <__udivmoddi4+0x14c>
 8000f72:	4573      	cmp	r3, lr
 8000f74:	d302      	bcc.n	8000f7c <__udivmoddi4+0xc8>
 8000f76:	4282      	cmp	r2, r0
 8000f78:	f200 8105 	bhi.w	8001186 <__udivmoddi4+0x2d2>
 8000f7c:	1a84      	subs	r4, r0, r2
 8000f7e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f82:	2001      	movs	r0, #1
 8000f84:	4690      	mov	r8, r2
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	d0e5      	beq.n	8000f56 <__udivmoddi4+0xa2>
 8000f8a:	e9c5 4800 	strd	r4, r8, [r5]
 8000f8e:	e7e2      	b.n	8000f56 <__udivmoddi4+0xa2>
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	f000 8090 	beq.w	80010b6 <__udivmoddi4+0x202>
 8000f96:	fab2 f682 	clz	r6, r2
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	f040 80a4 	bne.w	80010e8 <__udivmoddi4+0x234>
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	0c03      	lsrs	r3, r0, #16
 8000fa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	b2bc      	uxth	r4, r7
 8000fac:	2101      	movs	r1, #1
 8000fae:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fb2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fba:	fb04 f20c 	mul.w	r2, r4, ip
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d907      	bls.n	8000fd2 <__udivmoddi4+0x11e>
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fc8:	d202      	bcs.n	8000fd0 <__udivmoddi4+0x11c>
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	f200 80e0 	bhi.w	8001190 <__udivmoddi4+0x2dc>
 8000fd0:	46c4      	mov	ip, r8
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000fd8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000fdc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000fe0:	fb02 f404 	mul.w	r4, r2, r4
 8000fe4:	429c      	cmp	r4, r3
 8000fe6:	d907      	bls.n	8000ff8 <__udivmoddi4+0x144>
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	f102 30ff 	add.w	r0, r2, #4294967295
 8000fee:	d202      	bcs.n	8000ff6 <__udivmoddi4+0x142>
 8000ff0:	429c      	cmp	r4, r3
 8000ff2:	f200 80ca 	bhi.w	800118a <__udivmoddi4+0x2d6>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	1b1b      	subs	r3, r3, r4
 8000ffa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ffe:	e7a5      	b.n	8000f4c <__udivmoddi4+0x98>
 8001000:	f1c1 0620 	rsb	r6, r1, #32
 8001004:	408b      	lsls	r3, r1
 8001006:	fa22 f706 	lsr.w	r7, r2, r6
 800100a:	431f      	orrs	r7, r3
 800100c:	fa0e f401 	lsl.w	r4, lr, r1
 8001010:	fa20 f306 	lsr.w	r3, r0, r6
 8001014:	fa2e fe06 	lsr.w	lr, lr, r6
 8001018:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800101c:	4323      	orrs	r3, r4
 800101e:	fa00 f801 	lsl.w	r8, r0, r1
 8001022:	fa1f fc87 	uxth.w	ip, r7
 8001026:	fbbe f0f9 	udiv	r0, lr, r9
 800102a:	0c1c      	lsrs	r4, r3, #16
 800102c:	fb09 ee10 	mls	lr, r9, r0, lr
 8001030:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001034:	fb00 fe0c 	mul.w	lr, r0, ip
 8001038:	45a6      	cmp	lr, r4
 800103a:	fa02 f201 	lsl.w	r2, r2, r1
 800103e:	d909      	bls.n	8001054 <__udivmoddi4+0x1a0>
 8001040:	193c      	adds	r4, r7, r4
 8001042:	f100 3aff 	add.w	sl, r0, #4294967295
 8001046:	f080 809c 	bcs.w	8001182 <__udivmoddi4+0x2ce>
 800104a:	45a6      	cmp	lr, r4
 800104c:	f240 8099 	bls.w	8001182 <__udivmoddi4+0x2ce>
 8001050:	3802      	subs	r0, #2
 8001052:	443c      	add	r4, r7
 8001054:	eba4 040e 	sub.w	r4, r4, lr
 8001058:	fa1f fe83 	uxth.w	lr, r3
 800105c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001060:	fb09 4413 	mls	r4, r9, r3, r4
 8001064:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001068:	fb03 fc0c 	mul.w	ip, r3, ip
 800106c:	45a4      	cmp	ip, r4
 800106e:	d908      	bls.n	8001082 <__udivmoddi4+0x1ce>
 8001070:	193c      	adds	r4, r7, r4
 8001072:	f103 3eff 	add.w	lr, r3, #4294967295
 8001076:	f080 8082 	bcs.w	800117e <__udivmoddi4+0x2ca>
 800107a:	45a4      	cmp	ip, r4
 800107c:	d97f      	bls.n	800117e <__udivmoddi4+0x2ca>
 800107e:	3b02      	subs	r3, #2
 8001080:	443c      	add	r4, r7
 8001082:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001086:	eba4 040c 	sub.w	r4, r4, ip
 800108a:	fba0 ec02 	umull	lr, ip, r0, r2
 800108e:	4564      	cmp	r4, ip
 8001090:	4673      	mov	r3, lr
 8001092:	46e1      	mov	r9, ip
 8001094:	d362      	bcc.n	800115c <__udivmoddi4+0x2a8>
 8001096:	d05f      	beq.n	8001158 <__udivmoddi4+0x2a4>
 8001098:	b15d      	cbz	r5, 80010b2 <__udivmoddi4+0x1fe>
 800109a:	ebb8 0203 	subs.w	r2, r8, r3
 800109e:	eb64 0409 	sbc.w	r4, r4, r9
 80010a2:	fa04 f606 	lsl.w	r6, r4, r6
 80010a6:	fa22 f301 	lsr.w	r3, r2, r1
 80010aa:	431e      	orrs	r6, r3
 80010ac:	40cc      	lsrs	r4, r1
 80010ae:	e9c5 6400 	strd	r6, r4, [r5]
 80010b2:	2100      	movs	r1, #0
 80010b4:	e74f      	b.n	8000f56 <__udivmoddi4+0xa2>
 80010b6:	fbb1 fcf2 	udiv	ip, r1, r2
 80010ba:	0c01      	lsrs	r1, r0, #16
 80010bc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010c0:	b280      	uxth	r0, r0
 80010c2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010c6:	463b      	mov	r3, r7
 80010c8:	4638      	mov	r0, r7
 80010ca:	463c      	mov	r4, r7
 80010cc:	46b8      	mov	r8, r7
 80010ce:	46be      	mov	lr, r7
 80010d0:	2620      	movs	r6, #32
 80010d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80010d6:	eba2 0208 	sub.w	r2, r2, r8
 80010da:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010de:	e766      	b.n	8000fae <__udivmoddi4+0xfa>
 80010e0:	4601      	mov	r1, r0
 80010e2:	e718      	b.n	8000f16 <__udivmoddi4+0x62>
 80010e4:	4610      	mov	r0, r2
 80010e6:	e72c      	b.n	8000f42 <__udivmoddi4+0x8e>
 80010e8:	f1c6 0220 	rsb	r2, r6, #32
 80010ec:	fa2e f302 	lsr.w	r3, lr, r2
 80010f0:	40b7      	lsls	r7, r6
 80010f2:	40b1      	lsls	r1, r6
 80010f4:	fa20 f202 	lsr.w	r2, r0, r2
 80010f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010fc:	430a      	orrs	r2, r1
 80010fe:	fbb3 f8fe 	udiv	r8, r3, lr
 8001102:	b2bc      	uxth	r4, r7
 8001104:	fb0e 3318 	mls	r3, lr, r8, r3
 8001108:	0c11      	lsrs	r1, r2, #16
 800110a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800110e:	fb08 f904 	mul.w	r9, r8, r4
 8001112:	40b0      	lsls	r0, r6
 8001114:	4589      	cmp	r9, r1
 8001116:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800111a:	b280      	uxth	r0, r0
 800111c:	d93e      	bls.n	800119c <__udivmoddi4+0x2e8>
 800111e:	1879      	adds	r1, r7, r1
 8001120:	f108 3cff 	add.w	ip, r8, #4294967295
 8001124:	d201      	bcs.n	800112a <__udivmoddi4+0x276>
 8001126:	4589      	cmp	r9, r1
 8001128:	d81f      	bhi.n	800116a <__udivmoddi4+0x2b6>
 800112a:	eba1 0109 	sub.w	r1, r1, r9
 800112e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001132:	fb09 f804 	mul.w	r8, r9, r4
 8001136:	fb0e 1119 	mls	r1, lr, r9, r1
 800113a:	b292      	uxth	r2, r2
 800113c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001140:	4542      	cmp	r2, r8
 8001142:	d229      	bcs.n	8001198 <__udivmoddi4+0x2e4>
 8001144:	18ba      	adds	r2, r7, r2
 8001146:	f109 31ff 	add.w	r1, r9, #4294967295
 800114a:	d2c4      	bcs.n	80010d6 <__udivmoddi4+0x222>
 800114c:	4542      	cmp	r2, r8
 800114e:	d2c2      	bcs.n	80010d6 <__udivmoddi4+0x222>
 8001150:	f1a9 0102 	sub.w	r1, r9, #2
 8001154:	443a      	add	r2, r7
 8001156:	e7be      	b.n	80010d6 <__udivmoddi4+0x222>
 8001158:	45f0      	cmp	r8, lr
 800115a:	d29d      	bcs.n	8001098 <__udivmoddi4+0x1e4>
 800115c:	ebbe 0302 	subs.w	r3, lr, r2
 8001160:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001164:	3801      	subs	r0, #1
 8001166:	46e1      	mov	r9, ip
 8001168:	e796      	b.n	8001098 <__udivmoddi4+0x1e4>
 800116a:	eba7 0909 	sub.w	r9, r7, r9
 800116e:	4449      	add	r1, r9
 8001170:	f1a8 0c02 	sub.w	ip, r8, #2
 8001174:	fbb1 f9fe 	udiv	r9, r1, lr
 8001178:	fb09 f804 	mul.w	r8, r9, r4
 800117c:	e7db      	b.n	8001136 <__udivmoddi4+0x282>
 800117e:	4673      	mov	r3, lr
 8001180:	e77f      	b.n	8001082 <__udivmoddi4+0x1ce>
 8001182:	4650      	mov	r0, sl
 8001184:	e766      	b.n	8001054 <__udivmoddi4+0x1a0>
 8001186:	4608      	mov	r0, r1
 8001188:	e6fd      	b.n	8000f86 <__udivmoddi4+0xd2>
 800118a:	443b      	add	r3, r7
 800118c:	3a02      	subs	r2, #2
 800118e:	e733      	b.n	8000ff8 <__udivmoddi4+0x144>
 8001190:	f1ac 0c02 	sub.w	ip, ip, #2
 8001194:	443b      	add	r3, r7
 8001196:	e71c      	b.n	8000fd2 <__udivmoddi4+0x11e>
 8001198:	4649      	mov	r1, r9
 800119a:	e79c      	b.n	80010d6 <__udivmoddi4+0x222>
 800119c:	eba1 0109 	sub.w	r1, r1, r9
 80011a0:	46c4      	mov	ip, r8
 80011a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80011a6:	fb09 f804 	mul.w	r8, r9, r4
 80011aa:	e7c4      	b.n	8001136 <__udivmoddi4+0x282>

080011ac <__aeabi_idiv0>:
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <HX711_Init>:
#include "hx711.h"

static float g_scale = 1.0f;

void HX711_Init(HX711* hx) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hx->sck_port, hx->sck_pin, GPIO_PIN_RESET);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6898      	ldr	r0, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	899b      	ldrh	r3, [r3, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	f002 f82e 	bl	8003224 <HAL_GPIO_WritePin>
    hx->offset = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
    hx->scale = 1.0f;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011d6:	615a      	str	r2, [r3, #20]
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HX711_Is_Ready>:

uint8_t HX711_Is_Ready(HX711* hx) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(hx->dout_port, hx->dout_pin) == GPIO_PIN_RESET;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f001 fffe 	bl	80031f4 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HX711_Read>:

int32_t HX711_Read(HX711* hx) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    int32_t data = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
    while (!HX711_Is_Ready(hx));
 8001218:	bf00      	nop
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffe0 	bl	80011e0 <HX711_Is_Ready>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f9      	beq.n	800121a <HX711_Read+0xe>

    for (int i = 0; i < 24; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	e023      	b.n	8001274 <HX711_Read+0x68>
        HAL_GPIO_WritePin(hx->sck_port, hx->sck_pin, GPIO_PIN_SET);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	899b      	ldrh	r3, [r3, #12]
 8001234:	2201      	movs	r2, #1
 8001236:	4619      	mov	r1, r3
 8001238:	f001 fff4 	bl	8003224 <HAL_GPIO_WritePin>
        data = data << 1;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(hx->sck_port, hx->sck_pin, GPIO_PIN_RESET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6898      	ldr	r0, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	899b      	ldrh	r3, [r3, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	f001 ffe9 	bl	8003224 <HAL_GPIO_WritePin>
        if (HAL_GPIO_ReadPin(hx->dout_port, hx->dout_pin)) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f001 ffc9 	bl	80031f4 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HX711_Read+0x62>
            data++;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3301      	adds	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 24; i++) {
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b17      	cmp	r3, #23
 8001278:	ddd8      	ble.n	800122c <HX711_Read+0x20>
        }
    }

    // Pulse 25th clock
    HAL_GPIO_WritePin(hx->sck_port, hx->sck_pin, GPIO_PIN_SET);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6898      	ldr	r0, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	899b      	ldrh	r3, [r3, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	4619      	mov	r1, r3
 8001286:	f001 ffcd 	bl	8003224 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hx->sck_port, hx->sck_pin, GPIO_PIN_RESET);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6898      	ldr	r0, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	899b      	ldrh	r3, [r3, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	f001 ffc5 	bl	8003224 <HAL_GPIO_WritePin>

    if (data & 0x800000) data |= 0xFF000000; // sign extend
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HX711_Read+0xa0>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80012aa:	60fb      	str	r3, [r7, #12]
    return data;
 80012ac:	68fb      	ldr	r3, [r7, #12]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HX711_Read_Average>:

float HX711_Read_Average(HX711* hx, uint8_t times) {
 80012b6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
    int64_t sum = 0;
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (uint8_t i = 0; i < times; i++) {
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e011      	b.n	80012fa <HX711_Read_Average+0x44>
        sum += HX711_Read(hx);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff98 	bl	800120c <HX711_Read>
 80012dc:	4603      	mov	r3, r0
 80012de:	17da      	asrs	r2, r3, #31
 80012e0:	461c      	mov	r4, r3
 80012e2:	4615      	mov	r5, r2
 80012e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012e8:	eb12 0804 	adds.w	r8, r2, r4
 80012ec:	eb43 0905 	adc.w	r9, r3, r5
 80012f0:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (uint8_t i = 0; i < times; i++) {
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d3e9      	bcc.n	80012d6 <HX711_Read_Average+0x20>
    }
    return (float)(sum / times);
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	2200      	movs	r2, #0
 8001306:	469a      	mov	sl, r3
 8001308:	4693      	mov	fp, r2
 800130a:	4652      	mov	r2, sl
 800130c:	465b      	mov	r3, fp
 800130e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001312:	f7ff fd67 	bl	8000de4 <__aeabi_ldivmod>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fd23 	bl	8000d68 <__aeabi_l2f>
 8001322:	4603      	mov	r3, r0
 8001324:	ee07 3a90 	vmov	s15, r3
}
 8001328:	eeb0 0a67 	vmov.f32	s0, s15
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001334 <HX711_Tare>:

void HX711_Tare(HX711* hx, uint8_t times) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
	hx->offset = HX711_Read_Average(hx, times);
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	4619      	mov	r1, r3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ffb6 	bl	80012b6 <HX711_Read_Average>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HX711_Set_Scale>:

void HX711_Set_Scale(HX711* hx, float scale) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	ed87 0a00 	vstr	s0, [r7]
	if (scale != 0) hx->scale = scale;
 8001368:	edd7 7a00 	vldr	s15, [r7]
 800136c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d002      	beq.n	800137c <HX711_Set_Scale+0x20>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	615a      	str	r2, [r3, #20]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HX711_Get_Weight>:

float HX711_Get_Weight(HX711* hx, uint8_t times) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
    float raw = HX711_Read_Average(hx, times);
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff8c 	bl	80012b6 <HX711_Read_Average>
 800139e:	ed87 0a03 	vstr	s0, [r7, #12]
    return (raw - hx->offset) / hx->scale;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80013a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80013b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <LCD_Send_Cmd>:
#include "lcd_i2c.h"
#include "stm32f4xx_hal.h"

void LCD_Send_Cmd(I2C_HandleTypeDef *hi2c, uint8_t cmd) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
    uint8_t data_u = (cmd & 0xF0);
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	f023 030f 	bic.w	r3, r3, #15
 80013da:	73fb      	strb	r3, [r7, #15]
    uint8_t data_l = ((cmd << 4) & 0xF0);
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {data_u | 0x0C, data_u | 0x08, data_l | 0x0C, data_l | 0x08};
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	f043 030c 	orr.w	r3, r3, #12
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	723b      	strb	r3, [r7, #8]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	727b      	strb	r3, [r7, #9]
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	f043 030c 	orr.w	r3, r3, #12
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	72bb      	strb	r3, [r7, #10]
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	b2db      	uxtb	r3, r3
 8001408:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, data_t, 4, 100);
 800140a:	f107 0208 	add.w	r2, r7, #8
 800140e:	2364      	movs	r3, #100	@ 0x64
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2304      	movs	r3, #4
 8001414:	214e      	movs	r1, #78	@ 0x4e
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f002 f886 	bl	8003528 <HAL_I2C_Master_Transmit>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <LCD_Send_Data>:

void LCD_Send_Data(I2C_HandleTypeDef *hi2c, uint8_t data) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
    uint8_t data_u = (data & 0xF0);
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	f023 030f 	bic.w	r3, r3, #15
 8001436:	73fb      	strb	r3, [r7, #15]
    uint8_t data_l = ((data << 4) & 0xF0);
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {data_u | 0x0D, data_u | 0x09, data_l | 0x0D, data_l | 0x09};
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	f043 030d 	orr.w	r3, r3, #13
 8001444:	b2db      	uxtb	r3, r3
 8001446:	723b      	strb	r3, [r7, #8]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f043 0309 	orr.w	r3, r3, #9
 800144e:	b2db      	uxtb	r3, r3
 8001450:	727b      	strb	r3, [r7, #9]
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	f043 030d 	orr.w	r3, r3, #13
 8001458:	b2db      	uxtb	r3, r3
 800145a:	72bb      	strb	r3, [r7, #10]
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	f043 0309 	orr.w	r3, r3, #9
 8001462:	b2db      	uxtb	r3, r3
 8001464:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, data_t, 4, 100);
 8001466:	f107 0208 	add.w	r2, r7, #8
 800146a:	2364      	movs	r3, #100	@ 0x64
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2304      	movs	r3, #4
 8001470:	214e      	movs	r1, #78	@ 0x4e
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f002 f858 	bl	8003528 <HAL_I2C_Master_Transmit>
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <LCD_Send_String>:

void LCD_Send_String(I2C_HandleTypeDef *hi2c, char *str) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
    while (*str) {
 800148a:	e008      	b.n	800149e <LCD_Send_String+0x1e>
        LCD_Send_Data(hi2c, (uint8_t)(*str));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffc6 	bl	8001424 <LCD_Send_Data>
        str++;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	603b      	str	r3, [r7, #0]
    while (*str) {
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f2      	bne.n	800148c <LCD_Send_String+0xc>
    }
}
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <LCD_Clear>:

void LCD_Clear(I2C_HandleTypeDef *hi2c) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    LCD_Send_Cmd(hi2c, 0x01);
 80014b8:	2101      	movs	r1, #1
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff84 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(2);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f001 fbb5 	bl	8002c30 <HAL_Delay>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *hi2c) {
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);
 80014d6:	2032      	movs	r0, #50	@ 0x32
 80014d8:	f001 fbaa 	bl	8002c30 <HAL_Delay>
    LCD_Send_Cmd(hi2c, 0x30);
 80014dc:	2130      	movs	r1, #48	@ 0x30
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff72 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(5);
 80014e4:	2005      	movs	r0, #5
 80014e6:	f001 fba3 	bl	8002c30 <HAL_Delay>
    LCD_Send_Cmd(hi2c, 0x30);
 80014ea:	2130      	movs	r1, #48	@ 0x30
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff6b 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(1);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f001 fb9c 	bl	8002c30 <HAL_Delay>
    LCD_Send_Cmd(hi2c, 0x30);
 80014f8:	2130      	movs	r1, #48	@ 0x30
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff64 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(10);
 8001500:	200a      	movs	r0, #10
 8001502:	f001 fb95 	bl	8002c30 <HAL_Delay>
    LCD_Send_Cmd(hi2c, 0x20);
 8001506:	2120      	movs	r1, #32
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff5d 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(10);
 800150e:	200a      	movs	r0, #10
 8001510:	f001 fb8e 	bl	8002c30 <HAL_Delay>

    LCD_Send_Cmd(hi2c, 0x28);
 8001514:	2128      	movs	r1, #40	@ 0x28
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff56 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(1);
 800151c:	2001      	movs	r0, #1
 800151e:	f001 fb87 	bl	8002c30 <HAL_Delay>
    LCD_Send_Cmd(hi2c, 0x08);
 8001522:	2108      	movs	r1, #8
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff4f 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f001 fb80 	bl	8002c30 <HAL_Delay>
    LCD_Send_Cmd(hi2c, 0x01);
 8001530:	2101      	movs	r1, #1
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ff48 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(2);
 8001538:	2002      	movs	r0, #2
 800153a:	f001 fb79 	bl	8002c30 <HAL_Delay>
    LCD_Send_Cmd(hi2c, 0x06);
 800153e:	2106      	movs	r1, #6
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff41 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f001 fb72 	bl	8002c30 <HAL_Delay>
    LCD_Send_Cmd(hi2c, 0x0C);
 800154c:	210c      	movs	r1, #12
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ff3a 	bl	80013c8 <LCD_Send_Cmd>
    HAL_Delay(1);
 8001554:	2001      	movs	r0, #1
 8001556:	f001 fb6b 	bl	8002c30 <HAL_Delay>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <LCD_Set_Cursor>:

void LCD_Set_Cursor(I2C_HandleTypeDef *hi2c, uint8_t row, uint8_t col) {
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	70fb      	strb	r3, [r7, #3]
 800156e:	4613      	mov	r3, r2
 8001570:	70bb      	strb	r3, [r7, #2]
    uint8_t row_offsets[] = {0x80, 0xC0};
 8001572:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8001576:	81bb      	strh	r3, [r7, #12]
    LCD_Send_Cmd(hi2c, row_offsets[row] + col);
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	3310      	adds	r3, #16
 800157c:	443b      	add	r3, r7
 800157e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001582:	78bb      	ldrb	r3, [r7, #2]
 8001584:	4413      	add	r3, r2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff1c 	bl	80013c8 <LCD_Send_Cmd>
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Decimal2BCD>:

//*************** các hàm nội bộ dùng trong thư viện ***************//
// ==========================
// Các hàm nội bộ cho thời gian
// ==========================
uint8_t Decimal2BCD(uint8_t val){
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	return (val/10)<<4 | (val%10);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <Decimal2BCD+0x48>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	b258      	sxtb	r0, r3
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <Decimal2BCD+0x48>)
 80015b8:	fba3 1302 	umull	r1, r3, r3, r2
 80015bc:	08d9      	lsrs	r1, r3, #3
 80015be:	460b      	mov	r3, r1
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	4303      	orrs	r3, r0
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	cccccccd 	.word	0xcccccccd

080015e4 <BCD2Decimal>:

uint8_t BCD2Decimal(uint8_t val){
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	return (val>>4)*10 + (val&0x0F);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	0092      	lsls	r2, r2, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	b2db      	uxtb	r3, r3
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <eepromWriteByte>:

// ==========================
// Các hàm nội bộ cho bộ nhớ EEPROM
// ==========================
// hàm nội bộ bậc 1
void eepromWriteByte(uint16_t addr, uint8_t data){
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af02      	add	r7, sp, #8
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	4613      	mov	r3, r2
 8001626:	717b      	strb	r3, [r7, #5]
	uint8_t buf[3] = { addr >> 8, addr & 0xFF, data };
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	737b      	strb	r3, [r7, #13]
 8001638:	797b      	ldrb	r3, [r7, #5]
 800163a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c3, EEPROM_ADDR, buf, 3, HAL_MAX_DELAY);
 800163c:	f107 020c 	add.w	r2, r7, #12
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2303      	movs	r3, #3
 8001648:	21ae      	movs	r1, #174	@ 0xae
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <eepromWriteByte+0x48>)
 800164c:	f001 ff6c 	bl	8003528 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001650:	2005      	movs	r0, #5
 8001652:	f001 faed 	bl	8002c30 <HAL_Delay>
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000250 	.word	0x20000250

08001664 <eepromReadByte>:

uint8_t eepromReadByte(uint16_t addr){
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
	uint8_t reg[2] = { addr >> 8, addr & 0xFF };
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	733b      	strb	r3, [r7, #12]
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	737b      	strb	r3, [r7, #13]
	uint8_t val = 0xFF;  // Trả về giá trị mặc định nếu không đọc được
 800167e:	23ff      	movs	r3, #255	@ 0xff
 8001680:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c3, EEPROM_ADDR, reg, 2, HAL_MAX_DELAY);
 8001682:	f107 020c 	add.w	r2, r7, #12
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2302      	movs	r3, #2
 800168e:	21ae      	movs	r1, #174	@ 0xae
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <eepromReadByte+0x50>)
 8001692:	f001 ff49 	bl	8003528 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c3, EEPROM_ADDR, &val, 1, HAL_MAX_DELAY);
 8001696:	f107 020b 	add.w	r2, r7, #11
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	21ae      	movs	r1, #174	@ 0xae
 80016a4:	4803      	ldr	r0, [pc, #12]	@ (80016b4 <eepromReadByte+0x50>)
 80016a6:	f002 f83d 	bl	8003724 <HAL_I2C_Master_Receive>
	return val;
 80016aa:	7afb      	ldrb	r3, [r7, #11]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000250 	.word	0x20000250

080016b8 <eepromWriteFloat>:


// hàm nội bộ bậc 2
void eepromWriteFloat(uint16_t addr, float val){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	ed87 0a00 	vstr	s0, [r7]
 80016c4:	80fb      	strh	r3, [r7, #6]
	FloatToByte.floatVal = val;
 80016c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <eepromWriteFloat+0x48>)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6013      	str	r3, [r2, #0]

	for (uint8_t i = 0; i < 4; i++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e00e      	b.n	80016f0 <eepromWriteFloat+0x38>
			eepromWriteByte(addr + i, FloatToByte.bytes[i]);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	4413      	add	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	4908      	ldr	r1, [pc, #32]	@ (8001700 <eepromWriteFloat+0x48>)
 80016e0:	5ccb      	ldrb	r3, [r1, r3]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7ff ff97 	bl	8001618 <eepromWriteByte>
	for (uint8_t i = 0; i < 4; i++) {
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	3301      	adds	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d9ed      	bls.n	80016d2 <eepromWriteFloat+0x1a>
	}
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200001f4 	.word	0x200001f4

08001704 <eepromReadFloat>:

float eepromReadFloat(uint16_t addr){
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e00f      	b.n	8001734 <eepromReadFloat+0x30>
			ByteToFloat.bytes[i] = eepromReadByte(addr + i);
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	b29a      	uxth	r2, r3
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4413      	add	r3, r2
 800171c:	b29b      	uxth	r3, r3
 800171e:	7bfc      	ldrb	r4, [r7, #15]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff9f 	bl	8001664 <eepromReadByte>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <eepromReadFloat+0x48>)
 800172c:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < 4; i++) {
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3301      	adds	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d9ec      	bls.n	8001714 <eepromReadFloat+0x10>
	}

	return ByteToFloat.floatVal;
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <eepromReadFloat+0x48>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	ee07 3a90 	vmov	s15, r3
}
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	200001f8 	.word	0x200001f8

08001750 <eepromWriteTime>:

void eepromWriteTime(uint16_t addr, Time* time){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	80fb      	strh	r3, [r7, #6]
	eepromWriteByte(addr + 0, time->sec);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff57 	bl	8001618 <eepromWriteByte>
	eepromWriteByte(addr + 1, time->min);
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	3301      	adds	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f7ff ff4e 	bl	8001618 <eepromWriteByte>
	eepromWriteByte(addr + 2, time->hour);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	3302      	adds	r3, #2
 8001780:	b29a      	uxth	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	789b      	ldrb	r3, [r3, #2]
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7ff ff45 	bl	8001618 <eepromWriteByte>
	eepromWriteByte(addr + 3, time->weekday);
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	3303      	adds	r3, #3
 8001792:	b29a      	uxth	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	78db      	ldrb	r3, [r3, #3]
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f7ff ff3c 	bl	8001618 <eepromWriteByte>
	eepromWriteByte(addr + 4, time->day);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	3304      	adds	r3, #4
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	791b      	ldrb	r3, [r3, #4]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f7ff ff33 	bl	8001618 <eepromWriteByte>
	eepromWriteByte(addr + 5, time->month);
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	3305      	adds	r3, #5
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	795b      	ldrb	r3, [r3, #5]
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f7ff ff2a 	bl	8001618 <eepromWriteByte>
	eepromWriteByte(addr + 6, time->year);
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	3306      	adds	r3, #6
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	799b      	ldrb	r3, [r3, #6]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f7ff ff21 	bl	8001618 <eepromWriteByte>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <eepromReadTime>:

Time eepromReadTime(uint16_t addr){
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]
	Time time;

	time.sec     = eepromReadByte(addr + 0);
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff39 	bl	8001664 <eepromReadByte>
 80017f2:	4603      	mov	r3, r0
 80017f4:	723b      	strb	r3, [r7, #8]
	time.min     = eepromReadByte(addr + 1);
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff31 	bl	8001664 <eepromReadByte>
 8001802:	4603      	mov	r3, r0
 8001804:	727b      	strb	r3, [r7, #9]
	time.hour    = eepromReadByte(addr + 2);
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	3302      	adds	r3, #2
 800180a:	b29b      	uxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff29 	bl	8001664 <eepromReadByte>
 8001812:	4603      	mov	r3, r0
 8001814:	72bb      	strb	r3, [r7, #10]
	time.weekday = eepromReadByte(addr + 3);
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	3303      	adds	r3, #3
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff21 	bl	8001664 <eepromReadByte>
 8001822:	4603      	mov	r3, r0
 8001824:	72fb      	strb	r3, [r7, #11]
	time.day     = eepromReadByte(addr + 4);
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	3304      	adds	r3, #4
 800182a:	b29b      	uxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff19 	bl	8001664 <eepromReadByte>
 8001832:	4603      	mov	r3, r0
 8001834:	733b      	strb	r3, [r7, #12]
	time.month   = eepromReadByte(addr + 5);
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	3305      	adds	r3, #5
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff11 	bl	8001664 <eepromReadByte>
 8001842:	4603      	mov	r3, r0
 8001844:	737b      	strb	r3, [r7, #13]
	time.year    = eepromReadByte(addr + 6);
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	3306      	adds	r3, #6
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff09 	bl	8001664 <eepromReadByte>
 8001852:	4603      	mov	r3, r0
 8001854:	73bb      	strb	r3, [r7, #14]

	return time;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	461a      	mov	r2, r3
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	6010      	str	r0, [r2, #0]
 8001862:	8899      	ldrh	r1, [r3, #4]
 8001864:	799b      	ldrb	r3, [r3, #6]
 8001866:	8091      	strh	r1, [r2, #4]
 8001868:	7193      	strb	r3, [r2, #6]
}
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <DS3231_Module_Init>:

//*************** các hàm thực hiện chức năng ***************//
// ==========================
// hàm khởi tạo
// ==========================
void DS3231_Module_Init(){ // Khởi tạo I2C hoặc thiết lập ban đầu
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

//	// Khởi tạo thời gian
//	InitialTime();

	// Đọc địa chỉ ghi tiếp theo từ 2 byte (tại vị trí 1 và 2) trong EEPROM
	uint8_t highByte = eepromReadByte(1);
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff fef2 	bl	8001664 <eepromReadByte>
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
	uint8_t lowByte = eepromReadByte(2);
 8001884:	2002      	movs	r0, #2
 8001886:	f7ff feed 	bl	8001664 <eepromReadByte>
 800188a:	4603      	mov	r3, r0
 800188c:	71bb      	strb	r3, [r7, #6]
	nextLogAddr = (highByte << 8) | lowByte;
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	b21b      	sxth	r3, r3
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b21a      	sxth	r2, r3
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21b      	sxth	r3, r3
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <DS3231_Module_Init+0x58>)
 80018a2:	801a      	strh	r2, [r3, #0]

	// Nếu EEPROM chưa từng ghi (giá trị mặc định là 0xFFFF) hoặc sắp hết bộ nhớ
	if (nextLogAddr == 0xFFFF || nextLogAddr >= EEPROM_SIZE - LOG_SIZE) {
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <DS3231_Module_Init+0x58>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d005      	beq.n	80018bc <DS3231_Module_Init+0x48>
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <DS3231_Module_Init+0x58>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	f640 72f4 	movw	r2, #4084	@ 0xff4
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d902      	bls.n	80018c2 <DS3231_Module_Init+0x4e>
			nextLogAddr = 3; // bắt đầu ghi sau 3 byte đầu tiên
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <DS3231_Module_Init+0x58>)
 80018be:	2203      	movs	r2, #3
 80018c0:	801a      	strh	r2, [r3, #0]
	}

}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200001f0 	.word	0x200001f0

080018d0 <DS3231_Module_Close>:


void DS3231_Module_Close(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	// Lưu giá trị địa chỉ tiếp theo vào eeprom để sau lấy lại
	eepromWriteByte(1, (nextLogAddr >> 8) & 0xFF);  // Byte cao
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <DS3231_Module_Close+0x28>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4619      	mov	r1, r3
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff fe99 	bl	8001618 <eepromWriteByte>
	eepromWriteByte(2, nextLogAddr & 0xFF);         // Byte thấp
 80018e6:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <DS3231_Module_Close+0x28>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4619      	mov	r1, r3
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7ff fe92 	bl	8001618 <eepromWriteByte>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001f0 	.word	0x200001f0

080018fc <InitialTime>:


void InitialTime() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
	Time Set_IniTime;

    Set_IniTime.sec = 00;
 8001902:	2300      	movs	r3, #0
 8001904:	703b      	strb	r3, [r7, #0]
    Set_IniTime.min = 12;
 8001906:	230c      	movs	r3, #12
 8001908:	707b      	strb	r3, [r7, #1]
    Set_IniTime.hour = 21;
 800190a:	2315      	movs	r3, #21
 800190c:	70bb      	strb	r3, [r7, #2]
    Set_IniTime.day = 30;
 800190e:	231e      	movs	r3, #30
 8001910:	713b      	strb	r3, [r7, #4]
    Set_IniTime.month = 6;
 8001912:	2306      	movs	r3, #6
 8001914:	717b      	strb	r3, [r7, #5]
    Set_IniTime.year = 25;
 8001916:	2319      	movs	r3, #25
 8001918:	71bb      	strb	r3, [r7, #6]
    Set_IniTime.weekday = 10;
 800191a:	230a      	movs	r3, #10
 800191c:	70fb      	strb	r3, [r7, #3]
    setTime(&Set_IniTime);
 800191e:	463b      	mov	r3, r7
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f809 	bl	8001938 <setTime>
    eepromWriteByte(INIT_FLAG_ADDR, INIT_FLAG_VALUE);
 8001926:	2101      	movs	r1, #1
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fe75 	bl	8001618 <eepromWriteByte>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <setTime>:

// ==========================
// Các hàm quản lý thời gian
// ==========================
void setTime(Time* time){
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	6078      	str	r0, [r7, #4]
    uint8_t data[8] = {
 8001940:	2300      	movs	r3, #0
 8001942:	723b      	strb	r3, [r7, #8]
        0x00, // Thanh ghi bắt đầu
        Decimal2BCD(time->sec), Decimal2BCD(time->min), Decimal2BCD(time->hour),
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fe25 	bl	8001598 <Decimal2BCD>
 800194e:	4603      	mov	r3, r0
    uint8_t data[8] = {
 8001950:	727b      	strb	r3, [r7, #9]
        Decimal2BCD(time->sec), Decimal2BCD(time->min), Decimal2BCD(time->hour),
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fe1e 	bl	8001598 <Decimal2BCD>
 800195c:	4603      	mov	r3, r0
    uint8_t data[8] = {
 800195e:	72bb      	strb	r3, [r7, #10]
        Decimal2BCD(time->sec), Decimal2BCD(time->min), Decimal2BCD(time->hour),
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	789b      	ldrb	r3, [r3, #2]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fe17 	bl	8001598 <Decimal2BCD>
 800196a:	4603      	mov	r3, r0
    uint8_t data[8] = {
 800196c:	72fb      	strb	r3, [r7, #11]
        Decimal2BCD(time->weekday), Decimal2BCD(time->day), Decimal2BCD(time->month), Decimal2BCD(time->year)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	78db      	ldrb	r3, [r3, #3]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fe10 	bl	8001598 <Decimal2BCD>
 8001978:	4603      	mov	r3, r0
    uint8_t data[8] = {
 800197a:	733b      	strb	r3, [r7, #12]
        Decimal2BCD(time->weekday), Decimal2BCD(time->day), Decimal2BCD(time->month), Decimal2BCD(time->year)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	791b      	ldrb	r3, [r3, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe09 	bl	8001598 <Decimal2BCD>
 8001986:	4603      	mov	r3, r0
    uint8_t data[8] = {
 8001988:	737b      	strb	r3, [r7, #13]
        Decimal2BCD(time->weekday), Decimal2BCD(time->day), Decimal2BCD(time->month), Decimal2BCD(time->year)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	795b      	ldrb	r3, [r3, #5]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fe02 	bl	8001598 <Decimal2BCD>
 8001994:	4603      	mov	r3, r0
    uint8_t data[8] = {
 8001996:	73bb      	strb	r3, [r7, #14]
        Decimal2BCD(time->weekday), Decimal2BCD(time->day), Decimal2BCD(time->month), Decimal2BCD(time->year)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	799b      	ldrb	r3, [r3, #6]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fdfb 	bl	8001598 <Decimal2BCD>
 80019a2:	4603      	mov	r3, r0
    uint8_t data[8] = {
 80019a4:	73fb      	strb	r3, [r7, #15]
    };
    HAL_I2C_Master_Transmit(&hi2c3, DS3231_ADDR, data, 8, HAL_MAX_DELAY); // ghi vào địa chỉ của DS3231
 80019a6:	f107 0208 	add.w	r2, r7, #8
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2308      	movs	r3, #8
 80019b2:	21d0      	movs	r1, #208	@ 0xd0
 80019b4:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <setTime+0x8c>)
 80019b6:	f001 fdb7 	bl	8003528 <HAL_I2C_Master_Transmit>
};
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000250 	.word	0x20000250

080019c8 <getTime>:


void getTime(Time* time){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	6078      	str	r0, [r7, #4]
    uint8_t reg = 0x00; // Thanh ghi bắt đầu
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
    uint8_t buffer[7];
    HAL_I2C_Master_Transmit(&hi2c3, DS3231_ADDR, &reg, 1, HAL_MAX_DELAY); // Trước khi đọc thì phải gửi tìm I2C có địa chỉ cần đọc
 80019d4:	f107 020f 	add.w	r2, r7, #15
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	21d0      	movs	r1, #208	@ 0xd0
 80019e2:	4824      	ldr	r0, [pc, #144]	@ (8001a74 <getTime+0xac>)
 80019e4:	f001 fda0 	bl	8003528 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS3231_ADDR, buffer, 7, HAL_MAX_DELAY);  // Yêu cầu đọc 7 byte
 80019e8:	f107 0208 	add.w	r2, r7, #8
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2307      	movs	r3, #7
 80019f4:	21d0      	movs	r1, #208	@ 0xd0
 80019f6:	481f      	ldr	r0, [pc, #124]	@ (8001a74 <getTime+0xac>)
 80019f8:	f001 fe94 	bl	8003724 <HAL_I2C_Master_Receive>

    // đọc 7 byte và chuyển đổi BCD
    time->sec     = BCD2Decimal(buffer[0]);
 80019fc:	7a3b      	ldrb	r3, [r7, #8]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fdf0 	bl	80015e4 <BCD2Decimal>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	701a      	strb	r2, [r3, #0]
    time->min     = BCD2Decimal(buffer[1]);
 8001a0c:	7a7b      	ldrb	r3, [r7, #9]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fde8 	bl	80015e4 <BCD2Decimal>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	705a      	strb	r2, [r3, #1]
    time->hour    = BCD2Decimal(buffer[2]);
 8001a1c:	7abb      	ldrb	r3, [r7, #10]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fde0 	bl	80015e4 <BCD2Decimal>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	709a      	strb	r2, [r3, #2]
    time->weekday = BCD2Decimal(buffer[3]);
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fdd8 	bl	80015e4 <BCD2Decimal>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	70da      	strb	r2, [r3, #3]
    time->day     = BCD2Decimal(buffer[4]);
 8001a3c:	7b3b      	ldrb	r3, [r7, #12]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fdd0 	bl	80015e4 <BCD2Decimal>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	711a      	strb	r2, [r3, #4]
    time->month   = BCD2Decimal(buffer[5]);
 8001a4c:	7b7b      	ldrb	r3, [r7, #13]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fdc8 	bl	80015e4 <BCD2Decimal>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	715a      	strb	r2, [r3, #5]
    time->year    = BCD2Decimal(buffer[6]);
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fdc0 	bl	80015e4 <BCD2Decimal>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	719a      	strb	r2, [r3, #6]
};
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000250 	.word	0x20000250

08001a78 <writeWeightLog>:


// ==========================
// Các hàm quản lý log EEPROM (hàm bậc 3)
// ==========================
void writeWeightLog(uint16_t addr, WeightLog* log){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	80fb      	strh	r3, [r7, #6]
	// Ghi float weight (4 byte)
	eepromWriteFloat(addr, log->weight);           // 0 -> 3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fe11 	bl	80016b8 <eepromWriteFloat>

	// Ghi struct Time (7 byte)
	eepromWriteTime(addr + 4, &(log->timestamp));     // 4 -> 10
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7ff fe54 	bl	8001750 <eepromWriteTime>

	// Dịch chuyển đến địa chỉ tiếp theo
	nextLogAddr = addr + LOG_SIZE;
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	330b      	adds	r3, #11
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <writeWeightLog+0x44>)
 8001ab0:	801a      	strh	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200001f0 	.word	0x200001f0

08001ac0 <readWeightLog>:

float readWeightLog(uint16_t addr, WeightLog* log){
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	81fb      	strh	r3, [r7, #14]
	if(addr >= 0){ // addr thg truyền vào để đọc = nextLogAddr - i*LOG_SIZE (với i là vị trí log tính từ nextLogAddr đổ về trước) => có thể có giá trị âm khi addr == 3
		// Đọc float weight
		log->weight = eepromReadFloat(addr);           // 0 -> 3
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fe18 	bl	8001704 <eepromReadFloat>
 8001ad4:	eef0 7a40 	vmov.f32	s15, s0
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	edc3 7a00 	vstr	s15, [r3]

		// Đọc struct Time
		log->timestamp = eepromReadTime(addr + 4);     // 4 -> 10
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68bc      	ldr	r4, [r7, #8]
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fe77 	bl	80017de <eepromReadTime>
 8001af0:	1d23      	adds	r3, r4, #4
 8001af2:	463a      	mov	r2, r7
 8001af4:	6810      	ldr	r0, [r2, #0]
 8001af6:	6018      	str	r0, [r3, #0]
 8001af8:	8891      	ldrh	r1, [r2, #4]
 8001afa:	7992      	ldrb	r2, [r2, #6]
 8001afc:	8099      	strh	r1, [r3, #4]
 8001afe:	719a      	strb	r2, [r3, #6]

		return log->weight;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	681b      	ldr	r3, [r3, #0]
	}
	return -1;
}
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
	...

08001b14 <clearAllLogs>:

void clearAllLogs(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	thay vì xóa thì ta chỉ cần cập nhật vị trí con trỏ tiếp theo rồi ghi đè giá trị lưu trước đó là được 
	=> EEPROM thường giới hạn số lần ghi (~100,000 lần) nên làm thế để tiết kiệm số lần ghi
	*/

	// Cập nhật con trỏ địa chỉ tiếp theo 
	nextLogAddr = 3;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <clearAllLogs+0x30>)
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	801a      	strh	r2, [r3, #0]
	eepromWriteByte(1, (nextLogAddr >> 8) & 0xFF);  // Byte cao
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <clearAllLogs+0x30>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fd74 	bl	8001618 <eepromWriteByte>
	eepromWriteByte(2, nextLogAddr & 0xFF);         // Byte thấp
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <clearAllLogs+0x30>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7ff fd6d 	bl	8001618 <eepromWriteByte>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200001f0 	.word	0x200001f0

08001b48 <clearLastLog>:

void clearLastLog(){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	if(getTotalLogs() != 0){
 8001b4c:	f000 f82a 	bl	8001ba4 <getTotalLogs>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d015      	beq.n	8001b82 <clearLastLog+0x3a>
		nextLogAddr = nextLogAddr - LOG_SIZE; //dịch con trỏ stack xuống (không xóa mà chỉ ghi đè)
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <clearLastLog+0x40>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	3b0b      	subs	r3, #11
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <clearLastLog+0x40>)
 8001b60:	801a      	strh	r2, [r3, #0]
		eepromWriteByte(1, (nextLogAddr >> 8) & 0xFF);  // Byte cao
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <clearLastLog+0x40>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7ff fd52 	bl	8001618 <eepromWriteByte>
		eepromWriteByte(2, nextLogAddr & 0xFF);         // Byte thấp
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <clearLastLog+0x40>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f7ff fd4b 	bl	8001618 <eepromWriteByte>
	}
};
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200001f0 	.word	0x200001f0

08001b8c <getLastLogAddress>:

uint16_t getLastLogAddress(){
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
	return nextLogAddr;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <getLastLogAddress+0x14>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200001f0 	.word	0x200001f0

08001ba4 <getTotalLogs>:


// ==========================
// Các hàm tiện ích
// ==========================
uint16_t getTotalLogs(){// Lấy số bản ghi đã lưu
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	return (nextLogAddr-3)/LOG_SIZE;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <getTotalLogs+0x24>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	4a07      	ldr	r2, [pc, #28]	@ (8001bcc <getTotalLogs+0x28>)
 8001bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb4:	1052      	asrs	r2, r2, #1
 8001bb6:	17db      	asrs	r3, r3, #31
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	b29b      	uxth	r3, r3
}    
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	200001f0 	.word	0x200001f0
 8001bcc:	2e8ba2e9 	.word	0x2e8ba2e9

08001bd0 <printLog>:

bool isStorageFull(){// Kiểm tra ROM đầy chưa
 	return (nextLogAddr + LOG_SIZE > EEPROM_SIZE); // nếu nextLogAddr tiếp theo bị vượt quá size eeprom tối đa
} 

void printLog(WeightLog* log){// In ra log qua Serial (để debug)
 8001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd2:	b0ab      	sub	sp, #172	@ 0xac
 8001bd4:	af06      	add	r7, sp, #24
 8001bd6:	60f8      	str	r0, [r7, #12]
	char buf[128];
	    sprintf(buf, "Weight: %.2f kg | Time: %02d:%02d:%02d Date: %02d/%02d/20%02d\r\n",
	            log->weight, // in cân nặng
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
	    sprintf(buf, "Weight: %.2f kg | Time: %02d:%02d:%02d Date: %02d/%02d/20%02d\r\n",
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcc3 	bl	8000568 <__aeabi_f2d>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
	            log->timestamp.hour, log->timestamp.min, log->timestamp.sec,
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	7989      	ldrb	r1, [r1, #6]
	    sprintf(buf, "Weight: %.2f kg | Time: %02d:%02d:%02d Date: %02d/%02d/20%02d\r\n",
 8001bea:	460c      	mov	r4, r1
	            log->timestamp.hour, log->timestamp.min, log->timestamp.sec,
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	7949      	ldrb	r1, [r1, #5]
	    sprintf(buf, "Weight: %.2f kg | Time: %02d:%02d:%02d Date: %02d/%02d/20%02d\r\n",
 8001bf0:	460d      	mov	r5, r1
	            log->timestamp.hour, log->timestamp.min, log->timestamp.sec,
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	7909      	ldrb	r1, [r1, #4]
	    sprintf(buf, "Weight: %.2f kg | Time: %02d:%02d:%02d Date: %02d/%02d/20%02d\r\n",
 8001bf6:	460e      	mov	r6, r1
	            log->timestamp.day, log->timestamp.month, log->timestamp.year); // in thời gian
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	7a09      	ldrb	r1, [r1, #8]
	    sprintf(buf, "Weight: %.2f kg | Time: %02d:%02d:%02d Date: %02d/%02d/20%02d\r\n",
 8001bfc:	60b9      	str	r1, [r7, #8]
	            log->timestamp.day, log->timestamp.month, log->timestamp.year); // in thời gian
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	7a49      	ldrb	r1, [r1, #9]
	    sprintf(buf, "Weight: %.2f kg | Time: %02d:%02d:%02d Date: %02d/%02d/20%02d\r\n",
 8001c02:	6079      	str	r1, [r7, #4]
	            log->timestamp.day, log->timestamp.month, log->timestamp.year); // in thời gian
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	7a89      	ldrb	r1, [r1, #10]
	    sprintf(buf, "Weight: %.2f kg | Time: %02d:%02d:%02d Date: %02d/%02d/20%02d\r\n",
 8001c08:	f107 0010 	add.w	r0, r7, #16
 8001c0c:	9105      	str	r1, [sp, #20]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	9104      	str	r1, [sp, #16]
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	9103      	str	r1, [sp, #12]
 8001c16:	9602      	str	r6, [sp, #8]
 8001c18:	9501      	str	r5, [sp, #4]
 8001c1a:	9400      	str	r4, [sp, #0]
 8001c1c:	490a      	ldr	r1, [pc, #40]	@ (8001c48 <printLog+0x78>)
 8001c1e:	f004 fa7d 	bl	800611c <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fb32 	bl	8000290 <strlen>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f107 0110 	add.w	r1, r7, #16
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
 8001c38:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <printLog+0x7c>)
 8001c3a:	f003 f8cf 	bl	8004ddc <HAL_UART_Transmit>

}  		
 8001c3e:	bf00      	nop
 8001c40:	3794      	adds	r7, #148	@ 0x94
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	08008398 	.word	0x08008398
 8001c4c:	200002a4 	.word	0x200002a4

08001c50 <printAllLogs>:

void printAllLogs(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)"----------- Log List -----------\r\n", 34, HAL_MAX_DELAY);
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	2222      	movs	r2, #34	@ 0x22
 8001c5c:	490f      	ldr	r1, [pc, #60]	@ (8001c9c <printAllLogs+0x4c>)
 8001c5e:	4810      	ldr	r0, [pc, #64]	@ (8001ca0 <printAllLogs+0x50>)
 8001c60:	f003 f8bc 	bl	8004ddc <HAL_UART_Transmit>
	for (uint16_t addr = 3; addr + LOG_SIZE <= nextLogAddr; addr += LOG_SIZE) {
 8001c64:	2303      	movs	r3, #3
 8001c66:	81fb      	strh	r3, [r7, #14]
 8001c68:	e00c      	b.n	8001c84 <printAllLogs+0x34>
			WeightLog log;
			readWeightLog(addr, &log);
 8001c6a:	463a      	mov	r2, r7
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff25 	bl	8001ac0 <readWeightLog>
			printLog(&log);
 8001c76:	463b      	mov	r3, r7
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ffa9 	bl	8001bd0 <printLog>
	for (uint16_t addr = 3; addr + LOG_SIZE <= nextLogAddr; addr += LOG_SIZE) {
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	330b      	adds	r3, #11
 8001c82:	81fb      	strh	r3, [r7, #14]
 8001c84:	89fb      	ldrh	r3, [r7, #14]
 8001c86:	330a      	adds	r3, #10
 8001c88:	4a06      	ldr	r2, [pc, #24]	@ (8001ca4 <printAllLogs+0x54>)
 8001c8a:	8812      	ldrh	r2, [r2, #0]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	dbec      	blt.n	8001c6a <printAllLogs+0x1a>
	}
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	080083d8 	.word	0x080083d8
 8001ca0:	200002a4 	.word	0x200002a4
 8001ca4:	200001f0 	.word	0x200001f0

08001ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cae:	f000 ff4d 	bl	8002b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb2:	f000 f95d 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb6:	f000 fa75 	bl	80021a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001cba:	f000 fa49 	bl	8002150 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001cbe:	f000 fa07 	bl	80020d0 <MX_I2C3_Init>
  MX_I2C1_Init();
 8001cc2:	f000 f9c5 	bl	8002050 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  wakeup_Init(); //sleep_process setup
 8001cc6:	f000 fc6f 	bl	80025a8 <wakeup_Init>
  InitialTime(); // BẬT KHI MUỐN ĐẶT LẠI GIỜ
 8001cca:	f7ff fe17 	bl	80018fc <InitialTime>
  DS3231_Module_Init(); //log_process setup
 8001cce:	f7ff fdd1 	bl	8001874 <DS3231_Module_Init>
  Scale_Init(); //scale_process setup
 8001cd2:	f000 faed 	bl	80022b0 <Scale_Init>

  lastActivityTime = HAL_GetTick();
 8001cd6:	f000 ff9f 	bl	8002c18 <HAL_GetTick>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a93      	ldr	r2, [pc, #588]	@ (8001f2c <main+0x284>)
 8001cde:	6013      	str	r3, [r2, #0]
  showMainMenu();
 8001ce0:	f000 fec2 	bl	8002a68 <showMainMenu>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Nhận dữ liệu từ UART
	if (HAL_UART_Receive(&huart1, &userInput, 1, 10) == HAL_OK) {
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4991      	ldr	r1, [pc, #580]	@ (8001f30 <main+0x288>)
 8001cea:	4892      	ldr	r0, [pc, #584]	@ (8001f34 <main+0x28c>)
 8001cec:	f003 f901 	bl	8004ef2 <HAL_UART_Receive>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 80f3 	bne.w	8001ede <main+0x236>
		lastActivityTime = HAL_GetTick();
 8001cf8:	f000 ff8e 	bl	8002c18 <HAL_GetTick>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4a8b      	ldr	r2, [pc, #556]	@ (8001f2c <main+0x284>)
 8001d00:	6013      	str	r3, [r2, #0]

		switch (currentMenu) {
 8001d02:	4b8d      	ldr	r3, [pc, #564]	@ (8001f38 <main+0x290>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	f000 80aa 	beq.w	8001e60 <main+0x1b8>
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	f300 80e6 	bgt.w	8001ede <main+0x236>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <main+0x74>
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d04b      	beq.n	8001db2 <main+0x10a>
 8001d1a:	e0e0      	b.n	8001ede <main+0x236>
			case 0:
				switch (userInput) {
 8001d1c:	4b84      	ldr	r3, [pc, #528]	@ (8001f30 <main+0x288>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b33      	cmp	r3, #51	@ 0x33
 8001d22:	d022      	beq.n	8001d6a <main+0xc2>
 8001d24:	2b33      	cmp	r3, #51	@ 0x33
 8001d26:	dc3b      	bgt.n	8001da0 <main+0xf8>
 8001d28:	2b31      	cmp	r3, #49	@ 0x31
 8001d2a:	d002      	beq.n	8001d32 <main+0x8a>
 8001d2c:	2b32      	cmp	r3, #50	@ 0x32
 8001d2e:	d00d      	beq.n	8001d4c <main+0xa4>
 8001d30:	e036      	b.n	8001da0 <main+0xf8>
					case '1':
						HAL_UART_Transmit(&huart1,
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	221a      	movs	r2, #26
 8001d38:	4980      	ldr	r1, [pc, #512]	@ (8001f3c <main+0x294>)
 8001d3a:	487e      	ldr	r0, [pc, #504]	@ (8001f34 <main+0x28c>)
 8001d3c:	f003 f84e 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Vao che do can...\r\n", 26,
								HAL_MAX_DELAY);
						currentMenu = 1;
 8001d40:	4b7d      	ldr	r3, [pc, #500]	@ (8001f38 <main+0x290>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
						showScaleOptions();
 8001d46:	f000 fea7 	bl	8002a98 <showScaleOptions>
						break;
 8001d4a:	e031      	b.n	8001db0 <main+0x108>
					case '2':
						HAL_UART_Transmit(&huart1,
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d50:	221f      	movs	r2, #31
 8001d52:	497b      	ldr	r1, [pc, #492]	@ (8001f40 <main+0x298>)
 8001d54:	4877      	ldr	r0, [pc, #476]	@ (8001f34 <main+0x28c>)
 8001d56:	f003 f841 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Truy cap lich su can...\r\n", 31,
								HAL_MAX_DELAY);
						currentMenu = 2;
 8001d5a:	4b77      	ldr	r3, [pc, #476]	@ (8001f38 <main+0x290>)
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	701a      	strb	r2, [r3, #0]
						printAllLogs();
 8001d60:	f7ff ff76 	bl	8001c50 <printAllLogs>
						showLogOptions();
 8001d64:	f000 feb0 	bl	8002ac8 <showLogOptions>
						break;
 8001d68:	e022      	b.n	8001db0 <main+0x108>
					case '3':
						HAL_UART_Transmit(&huart1,
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	2224      	movs	r2, #36	@ 0x24
 8001d70:	4974      	ldr	r1, [pc, #464]	@ (8001f44 <main+0x29c>)
 8001d72:	4870      	ldr	r0, [pc, #448]	@ (8001f34 <main+0x28c>)
 8001d74:	f003 f832 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Thoat va chuyen sang sleep...\r\n",
								36, HAL_MAX_DELAY);
						DS3231_Module_Close();
 8001d78:	f7ff fdaa 	bl	80018d0 <DS3231_Module_Close>
					    Scale_Close();
 8001d7c:	f000 fab8 	bl	80022f0 <Scale_Close>

					    enterSleep(); // vào sleep
 8001d80:	f000 fc1a 	bl	80025b8 <enterSleep>
					    SystemClock_Config(); // cần gọi sau khi thoát sleep
 8001d84:	f000 f8f4 	bl	8001f70 <SystemClock_Config>
					    currentMenu = 0;
 8001d88:	4b6b      	ldr	r3, [pc, #428]	@ (8001f38 <main+0x290>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
					    HAL_Delay(100); // Chờ ổn định trước khi gửi
 8001d8e:	2064      	movs	r0, #100	@ 0x64
 8001d90:	f000 ff4e 	bl	8002c30 <HAL_Delay>

					    LCD_Backlight_On(&hi2c1); // bật màn hình lcd sáng
 8001d94:	486c      	ldr	r0, [pc, #432]	@ (8001f48 <main+0x2a0>)
 8001d96:	f000 facb 	bl	8002330 <LCD_Backlight_On>
					    showMainMenu(); // hiện màn hình chính sau khi thức dậy
 8001d9a:	f000 fe65 	bl	8002a68 <showMainMenu>
						break;
 8001d9e:	e007      	b.n	8001db0 <main+0x108>
					default:
						HAL_UART_Transmit(&huart1,
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	2218      	movs	r2, #24
 8001da6:	4969      	ldr	r1, [pc, #420]	@ (8001f4c <main+0x2a4>)
 8001da8:	4862      	ldr	r0, [pc, #392]	@ (8001f34 <main+0x28c>)
 8001daa:	f003 f817 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) "Vui long chon (1-3): \r\n", 24,
								HAL_MAX_DELAY);
						break;
 8001dae:	bf00      	nop
				}
				break;
 8001db0:	e095      	b.n	8001ede <main+0x236>

			case 1:
				switch (userInput) {
 8001db2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f30 <main+0x288>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b33      	cmp	r3, #51	@ 0x33
 8001db8:	d03c      	beq.n	8001e34 <main+0x18c>
 8001dba:	2b33      	cmp	r3, #51	@ 0x33
 8001dbc:	dc47      	bgt.n	8001e4e <main+0x1a6>
 8001dbe:	2b31      	cmp	r3, #49	@ 0x31
 8001dc0:	d002      	beq.n	8001dc8 <main+0x120>
 8001dc2:	2b32      	cmp	r3, #50	@ 0x32
 8001dc4:	d027      	beq.n	8001e16 <main+0x16e>
 8001dc6:	e042      	b.n	8001e4e <main+0x1a6>
					case '1': {
						HAL_UART_Transmit(&huart1,
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	2214      	movs	r2, #20
 8001dce:	4960      	ldr	r1, [pc, #384]	@ (8001f50 <main+0x2a8>)
 8001dd0:	4858      	ldr	r0, [pc, #352]	@ (8001f34 <main+0x28c>)
 8001dd2:	f003 f803 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Luu ket qua...\r\n", 20,
								HAL_MAX_DELAY);
						startScaleProcess();
 8001dd6:	f000 fbb3 	bl	8002540 <startScaleProcess>
						WeightLog log;
						getTime(&log.timestamp);
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	3304      	adds	r3, #4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fdf2 	bl	80019c8 <getTime>
						log.weight = getWeight();
 8001de4:	f000 fbd2 	bl	800258c <getWeight>
 8001de8:	eef0 7a40 	vmov.f32	s15, s0
 8001dec:	edc7 7a01 	vstr	s15, [r7, #4]
						newLogAddr = getLastLogAddress();
 8001df0:	f7ff fecc 	bl	8001b8c <getLastLogAddress>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b56      	ldr	r3, [pc, #344]	@ (8001f54 <main+0x2ac>)
 8001dfa:	801a      	strh	r2, [r3, #0]
						writeWeightLog(newLogAddr, &log);
 8001dfc:	4b55      	ldr	r3, [pc, #340]	@ (8001f54 <main+0x2ac>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	1d3a      	adds	r2, r7, #4
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fe37 	bl	8001a78 <writeWeightLog>
						currentMenu = 0;
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f38 <main+0x290>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
						showMainMenu();
 8001e10:	f000 fe2a 	bl	8002a68 <showMainMenu>
						break;
 8001e14:	e023      	b.n	8001e5e <main+0x1b6>
					}
					case '2':
						HAL_UART_Transmit(&huart1,
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	221b      	movs	r2, #27
 8001e1c:	494e      	ldr	r1, [pc, #312]	@ (8001f58 <main+0x2b0>)
 8001e1e:	4845      	ldr	r0, [pc, #276]	@ (8001f34 <main+0x28c>)
 8001e20:	f002 ffdc 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Khong luu ket qua...\r\n", 27,
								HAL_MAX_DELAY);
						startScaleProcess();
 8001e24:	f000 fb8c 	bl	8002540 <startScaleProcess>
						currentMenu = 0;
 8001e28:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <main+0x290>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
						showMainMenu();
 8001e2e:	f000 fe1b 	bl	8002a68 <showMainMenu>
						break;
 8001e32:	e014      	b.n	8001e5e <main+0x1b6>
					case '3':
						HAL_UART_Transmit(&huart1,
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
 8001e38:	2221      	movs	r2, #33	@ 0x21
 8001e3a:	4948      	ldr	r1, [pc, #288]	@ (8001f5c <main+0x2b4>)
 8001e3c:	483d      	ldr	r0, [pc, #244]	@ (8001f34 <main+0x28c>)
 8001e3e:	f002 ffcd 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Huy, quay lai menu chinh...\r\n", 33,
								HAL_MAX_DELAY);
						currentMenu = 0;
 8001e42:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <main+0x290>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
						showMainMenu();
 8001e48:	f000 fe0e 	bl	8002a68 <showMainMenu>
						break;
 8001e4c:	e007      	b.n	8001e5e <main+0x1b6>
					default:
						HAL_UART_Transmit(&huart1,
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	2218      	movs	r2, #24
 8001e54:	493d      	ldr	r1, [pc, #244]	@ (8001f4c <main+0x2a4>)
 8001e56:	4837      	ldr	r0, [pc, #220]	@ (8001f34 <main+0x28c>)
 8001e58:	f002 ffc0 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) "Vui long chon (1-3): \r\n", 24,
								HAL_MAX_DELAY);
						break;
 8001e5c:	bf00      	nop
				}
				break;
 8001e5e:	e03e      	b.n	8001ede <main+0x236>

			case 2:
				switch (userInput) {
 8001e60:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <main+0x288>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b33      	cmp	r3, #51	@ 0x33
 8001e66:	d024      	beq.n	8001eb2 <main+0x20a>
 8001e68:	2b33      	cmp	r3, #51	@ 0x33
 8001e6a:	dc2f      	bgt.n	8001ecc <main+0x224>
 8001e6c:	2b31      	cmp	r3, #49	@ 0x31
 8001e6e:	d002      	beq.n	8001e76 <main+0x1ce>
 8001e70:	2b32      	cmp	r3, #50	@ 0x32
 8001e72:	d00f      	beq.n	8001e94 <main+0x1ec>
 8001e74:	e02a      	b.n	8001ecc <main+0x224>
					case '1':
						HAL_UART_Transmit(&huart1,
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	2221      	movs	r2, #33	@ 0x21
 8001e7c:	4938      	ldr	r1, [pc, #224]	@ (8001f60 <main+0x2b8>)
 8001e7e:	482d      	ldr	r0, [pc, #180]	@ (8001f34 <main+0x28c>)
 8001e80:	f002 ffac 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Xoa, quay lai menu chinh...\r\n", 33,
								HAL_MAX_DELAY);
						clearLastLog();
 8001e84:	f7ff fe60 	bl	8001b48 <clearLastLog>
						currentMenu = 0;
 8001e88:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <main+0x290>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
						showMainMenu();
 8001e8e:	f000 fdeb 	bl	8002a68 <showMainMenu>
						break;
 8001e92:	e023      	b.n	8001edc <main+0x234>
					case '2':
						HAL_UART_Transmit(&huart1,
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
 8001e98:	2228      	movs	r2, #40	@ 0x28
 8001e9a:	4932      	ldr	r1, [pc, #200]	@ (8001f64 <main+0x2bc>)
 8001e9c:	4825      	ldr	r0, [pc, #148]	@ (8001f34 <main+0x28c>)
 8001e9e:	f002 ff9d 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Xoa toan bo, quay lai menu chinh...\r\n", 40,
								HAL_MAX_DELAY);
						clearAllLogs();
 8001ea2:	f7ff fe37 	bl	8001b14 <clearAllLogs>
						currentMenu = 0;
 8001ea6:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <main+0x290>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
						showMainMenu();
 8001eac:	f000 fddc 	bl	8002a68 <showMainMenu>
						break;
 8001eb0:	e014      	b.n	8001edc <main+0x234>
					case '3':
						HAL_UART_Transmit(&huart1,
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	2228      	movs	r2, #40	@ 0x28
 8001eb8:	492b      	ldr	r1, [pc, #172]	@ (8001f68 <main+0x2c0>)
 8001eba:	481e      	ldr	r0, [pc, #120]	@ (8001f34 <main+0x28c>)
 8001ebc:	f002 ff8e 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) ">> Thoat, quay lai menu chinh...\r\n", 40,
								HAL_MAX_DELAY);
						currentMenu = 0;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <main+0x290>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
						showMainMenu();
 8001ec6:	f000 fdcf 	bl	8002a68 <showMainMenu>
						break;
 8001eca:	e007      	b.n	8001edc <main+0x234>
					default:
						HAL_UART_Transmit(&huart1,
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	2218      	movs	r2, #24
 8001ed2:	491e      	ldr	r1, [pc, #120]	@ (8001f4c <main+0x2a4>)
 8001ed4:	4817      	ldr	r0, [pc, #92]	@ (8001f34 <main+0x28c>)
 8001ed6:	f002 ff81 	bl	8004ddc <HAL_UART_Transmit>
								(uint8_t*) "Vui long chon (1-3): \r\n", 24,
								HAL_MAX_DELAY);
						break;
 8001eda:	bf00      	nop
				}
				break;
 8001edc:	bf00      	nop
			}
	}

	// Kiểm tra timeout
	if (HAL_GetTick() - lastActivityTime > timeout) {
 8001ede:	f000 fe9b 	bl	8002c18 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <main+0x284>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f67f aef8 	bls.w	8001ce4 <main+0x3c>
		HAL_UART_Transmit(&huart1,
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	2221      	movs	r2, #33	@ 0x21
 8001efa:	491c      	ldr	r1, [pc, #112]	@ (8001f6c <main+0x2c4>)
 8001efc:	480d      	ldr	r0, [pc, #52]	@ (8001f34 <main+0x28c>)
 8001efe:	f002 ff6d 	bl	8004ddc <HAL_UART_Transmit>
				(uint8_t*) "Khong co thao tac, vao sleep...\r\n", 33,
				HAL_MAX_DELAY);
		DS3231_Module_Close();
 8001f02:	f7ff fce5 	bl	80018d0 <DS3231_Module_Close>
		Scale_Close();
 8001f06:	f000 f9f3 	bl	80022f0 <Scale_Close>

		enterSleep(); // vào sleep
 8001f0a:	f000 fb55 	bl	80025b8 <enterSleep>
		SystemClock_Config(); // cần gọi sau khi thoát sleep
 8001f0e:	f000 f82f 	bl	8001f70 <SystemClock_Config>
		currentMenu = 0;
 8001f12:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <main+0x290>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100); // Chờ ổn định trước khi gửi
 8001f18:	2064      	movs	r0, #100	@ 0x64
 8001f1a:	f000 fe89 	bl	8002c30 <HAL_Delay>

		LCD_Backlight_On(&hi2c1); // bật màn hình lcd sáng
 8001f1e:	480a      	ldr	r0, [pc, #40]	@ (8001f48 <main+0x2a0>)
 8001f20:	f000 fa06 	bl	8002330 <LCD_Backlight_On>
		showMainMenu(); // hiện màn hình chính sau khi thức dậy
 8001f24:	f000 fda0 	bl	8002a68 <showMainMenu>
	if (HAL_UART_Receive(&huart1, &userInput, 1, 10) == HAL_OK) {
 8001f28:	e6dc      	b.n	8001ce4 <main+0x3c>
 8001f2a:	bf00      	nop
 8001f2c:	200002f0 	.word	0x200002f0
 8001f30:	200002ec 	.word	0x200002ec
 8001f34:	200002a4 	.word	0x200002a4
 8001f38:	200002ed 	.word	0x200002ed
 8001f3c:	080083fc 	.word	0x080083fc
 8001f40:	08008414 	.word	0x08008414
 8001f44:	08008434 	.word	0x08008434
 8001f48:	200001fc 	.word	0x200001fc
 8001f4c:	08008458 	.word	0x08008458
 8001f50:	08008470 	.word	0x08008470
 8001f54:	200002f4 	.word	0x200002f4
 8001f58:	08008484 	.word	0x08008484
 8001f5c:	080084a0 	.word	0x080084a0
 8001f60:	080084c4 	.word	0x080084c4
 8001f64:	080084e8 	.word	0x080084e8
 8001f68:	08008514 	.word	0x08008514
 8001f6c:	08008538 	.word	0x08008538

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b094      	sub	sp, #80	@ 0x50
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0320 	add.w	r3, r7, #32
 8001f7a:	2230      	movs	r2, #48	@ 0x30
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f931 	bl	80061e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <SystemClock_Config+0xd8>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002048 <SystemClock_Config+0xd8>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <SystemClock_Config+0xd8>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	4b25      	ldr	r3, [pc, #148]	@ (800204c <SystemClock_Config+0xdc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a24      	ldr	r2, [pc, #144]	@ (800204c <SystemClock_Config+0xdc>)
 8001fba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b22      	ldr	r3, [pc, #136]	@ (800204c <SystemClock_Config+0xdc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001fe4:	23d8      	movs	r3, #216	@ 0xd8
 8001fe6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fec:	2304      	movs	r3, #4
 8001fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff0:	f107 0320 	add.w	r3, r7, #32
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fa49 	bl	800448c <HAL_RCC_OscConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002000:	f000 f950 	bl	80022a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002004:	f002 f9f2 	bl	80043ec <HAL_PWREx_EnableOverDrive>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800200e:	f000 f949 	bl	80022a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002012:	230f      	movs	r3, #15
 8002014:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002016:	2302      	movs	r3, #2
 8002018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800201e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002022:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002028:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	2105      	movs	r1, #5
 8002030:	4618      	mov	r0, r3
 8002032:	f002 fca3 	bl	800497c <HAL_RCC_ClockConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800203c:	f000 f932 	bl	80022a4 <Error_Handler>
  }
}
 8002040:	bf00      	nop
 8002042:	3750      	adds	r7, #80	@ 0x50
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	40007000 	.word	0x40007000

08002050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002056:	4a1c      	ldr	r2, [pc, #112]	@ (80020c8 <MX_I2C1_Init+0x78>)
 8002058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800205c:	4a1b      	ldr	r2, [pc, #108]	@ (80020cc <MX_I2C1_Init+0x7c>)
 800205e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002066:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800206c:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800206e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002074:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800207a:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002080:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002086:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800208c:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800208e:	f001 f907 	bl	80032a0 <HAL_I2C_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002098:	f000 f904 	bl	80022a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800209c:	2100      	movs	r1, #0
 800209e:	4809      	ldr	r0, [pc, #36]	@ (80020c4 <MX_I2C1_Init+0x74>)
 80020a0:	f002 f8f8 	bl	8004294 <HAL_I2CEx_ConfigAnalogFilter>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80020aa:	f000 f8fb 	bl	80022a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020ae:	2100      	movs	r1, #0
 80020b0:	4804      	ldr	r0, [pc, #16]	@ (80020c4 <MX_I2C1_Init+0x74>)
 80020b2:	f002 f92b 	bl	800430c <HAL_I2CEx_ConfigDigitalFilter>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80020bc:	f000 f8f2 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200001fc 	.word	0x200001fc
 80020c8:	40005400 	.word	0x40005400
 80020cc:	00061a80 	.word	0x00061a80

080020d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <MX_I2C3_Init+0x74>)
 80020d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <MX_I2C3_Init+0x78>)
 80020d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80020da:	4b1a      	ldr	r3, [pc, #104]	@ (8002144 <MX_I2C3_Init+0x74>)
 80020dc:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <MX_I2C3_Init+0x7c>)
 80020de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <MX_I2C3_Init+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80020e6:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <MX_I2C3_Init+0x74>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <MX_I2C3_Init+0x74>)
 80020ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <MX_I2C3_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <MX_I2C3_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <MX_I2C3_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <MX_I2C3_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800210c:	480d      	ldr	r0, [pc, #52]	@ (8002144 <MX_I2C3_Init+0x74>)
 800210e:	f001 f8c7 	bl	80032a0 <HAL_I2C_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002118:	f000 f8c4 	bl	80022a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800211c:	2100      	movs	r1, #0
 800211e:	4809      	ldr	r0, [pc, #36]	@ (8002144 <MX_I2C3_Init+0x74>)
 8002120:	f002 f8b8 	bl	8004294 <HAL_I2CEx_ConfigAnalogFilter>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800212a:	f000 f8bb 	bl	80022a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800212e:	2100      	movs	r1, #0
 8002130:	4804      	ldr	r0, [pc, #16]	@ (8002144 <MX_I2C3_Init+0x74>)
 8002132:	f002 f8eb 	bl	800430c <HAL_I2CEx_ConfigDigitalFilter>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800213c:	f000 f8b2 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000250 	.word	0x20000250
 8002148:	40005c00 	.word	0x40005c00
 800214c:	00061a80 	.word	0x00061a80

08002150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 8002156:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <MX_USART1_UART_Init+0x50>)
 8002158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 800215c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 8002176:	220c      	movs	r2, #12
 8002178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_USART1_UART_Init+0x4c>)
 8002188:	f002 fdd8 	bl	8004d3c <HAL_UART_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002192:	f000 f887 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200002a4 	.word	0x200002a4
 80021a0:	40011000 	.word	0x40011000

080021a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b37      	ldr	r3, [pc, #220]	@ (800229c <MX_GPIO_Init+0xf8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4a36      	ldr	r2, [pc, #216]	@ (800229c <MX_GPIO_Init+0xf8>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ca:	4b34      	ldr	r3, [pc, #208]	@ (800229c <MX_GPIO_Init+0xf8>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b30      	ldr	r3, [pc, #192]	@ (800229c <MX_GPIO_Init+0xf8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a2f      	ldr	r2, [pc, #188]	@ (800229c <MX_GPIO_Init+0xf8>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <MX_GPIO_Init+0xf8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b29      	ldr	r3, [pc, #164]	@ (800229c <MX_GPIO_Init+0xf8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a28      	ldr	r2, [pc, #160]	@ (800229c <MX_GPIO_Init+0xf8>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b26      	ldr	r3, [pc, #152]	@ (800229c <MX_GPIO_Init+0xf8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b22      	ldr	r3, [pc, #136]	@ (800229c <MX_GPIO_Init+0xf8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a21      	ldr	r2, [pc, #132]	@ (800229c <MX_GPIO_Init+0xf8>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <MX_GPIO_Init+0xf8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	2120      	movs	r1, #32
 800222e:	481c      	ldr	r0, [pc, #112]	@ (80022a0 <MX_GPIO_Init+0xfc>)
 8002230:	f000 fff8 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002234:	2301      	movs	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002238:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4815      	ldr	r0, [pc, #84]	@ (80022a0 <MX_GPIO_Init+0xfc>)
 800224a:	f000 fe27 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800224e:	2310      	movs	r3, #16
 8002250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	480f      	ldr	r0, [pc, #60]	@ (80022a0 <MX_GPIO_Init+0xfc>)
 8002262:	f000 fe1b 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002266:	2320      	movs	r3, #32
 8002268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4619      	mov	r1, r3
 800227c:	4808      	ldr	r0, [pc, #32]	@ (80022a0 <MX_GPIO_Init+0xfc>)
 800227e:	f000 fe0d 	bl	8002e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2101      	movs	r1, #1
 8002286:	2006      	movs	r0, #6
 8002288:	f000 fdd1 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800228c:	2006      	movs	r0, #6
 800228e:	f000 fdea 	bl	8002e66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	@ 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020000 	.word	0x40020000

080022a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
}
 80022aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <Error_Handler+0x8>

080022b0 <Scale_Init>:
#define LCD_BACKLIGHT 0x08  // Bit điều khiển đèn nền

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

void Scale_Init(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
    // LCD I2C khởi tạo
    LCD_Init(&hi2c1);
 80022b4:	480b      	ldr	r0, [pc, #44]	@ (80022e4 <Scale_Init+0x34>)
 80022b6:	f7ff f90a 	bl	80014ce <LCD_Init>
    LCD_Clear(&hi2c1);
 80022ba:	480a      	ldr	r0, [pc, #40]	@ (80022e4 <Scale_Init+0x34>)
 80022bc:	f7ff f8f8 	bl	80014b0 <LCD_Clear>

    // Khởi tạo HX711
    hx.dout_pin = HX711_DOUT_Pin;
 80022c0:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <Scale_Init+0x38>)
 80022c2:	2210      	movs	r2, #16
 80022c4:	809a      	strh	r2, [r3, #4]
    hx.dout_port = HX711_DOUT_Port;
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <Scale_Init+0x38>)
 80022c8:	4a08      	ldr	r2, [pc, #32]	@ (80022ec <Scale_Init+0x3c>)
 80022ca:	601a      	str	r2, [r3, #0]
    hx.sck_pin = HX711_SCK_Pin;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <Scale_Init+0x38>)
 80022ce:	2220      	movs	r2, #32
 80022d0:	819a      	strh	r2, [r3, #12]
    hx.sck_port = HX711_SCK_Port;
 80022d2:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <Scale_Init+0x38>)
 80022d4:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <Scale_Init+0x3c>)
 80022d6:	609a      	str	r2, [r3, #8]
    HX711_Init(&hx);
 80022d8:	4803      	ldr	r0, [pc, #12]	@ (80022e8 <Scale_Init+0x38>)
 80022da:	f7fe ff69 	bl	80011b0 <HX711_Init>
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200001fc 	.word	0x200001fc
 80022e8:	200002fc 	.word	0x200002fc
 80022ec:	40020000 	.word	0x40020000

080022f0 <Scale_Close>:

void Scale_Close(void) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
    LCD_Clear(&hi2c1);
 80022f4:	4803      	ldr	r0, [pc, #12]	@ (8002304 <Scale_Close+0x14>)
 80022f6:	f7ff f8db 	bl	80014b0 <LCD_Clear>
    LCD_Backlight_Off(&hi2c1);  // Tắt đèn nền
 80022fa:	4802      	ldr	r0, [pc, #8]	@ (8002304 <Scale_Close+0x14>)
 80022fc:	f000 f804 	bl	8002308 <LCD_Backlight_Off>
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	200001fc 	.word	0x200001fc

08002308 <LCD_Backlight_Off>:

void LCD_Backlight_Off(I2C_HandleTypeDef *hi2c) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	6078      	str	r0, [r7, #4]
    uint8_t data = 0x00;  // tất cả bit = 0
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, &data, 1, HAL_MAX_DELAY);
 8002314:	f107 020f 	add.w	r2, r7, #15
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2301      	movs	r3, #1
 8002320:	214e      	movs	r1, #78	@ 0x4e
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f001 f900 	bl	8003528 <HAL_I2C_Master_Transmit>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <LCD_Backlight_On>:

void LCD_Backlight_On(I2C_HandleTypeDef *hi2c) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
    uint8_t data = LCD_BACKLIGHT;
 8002338:	2308      	movs	r3, #8
 800233a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, &data, 1, HAL_MAX_DELAY);
 800233c:	f107 020f 	add.w	r2, r7, #15
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	214e      	movs	r1, #78	@ 0x4e
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f001 f8ec 	bl	8003528 <HAL_I2C_Master_Transmit>
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <tareScale>:


void tareScale(void) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
    LCD_Clear(&hi2c1);
 800235e:	481d      	ldr	r0, [pc, #116]	@ (80023d4 <tareScale+0x7c>)
 8002360:	f7ff f8a6 	bl	80014b0 <LCD_Clear>
    LCD_Send_String(&hi2c1, "Tare...");
 8002364:	491c      	ldr	r1, [pc, #112]	@ (80023d8 <tareScale+0x80>)
 8002366:	481b      	ldr	r0, [pc, #108]	@ (80023d4 <tareScale+0x7c>)
 8002368:	f7ff f88a 	bl	8001480 <LCD_Send_String>
    const char *msg = "Tare removes...\r\n";
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <tareScale+0x84>)
 800236e:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fd ff8d 	bl	8000290 <strlen>
 8002376:	4603      	mov	r3, r0
 8002378:	b29a      	uxth	r2, r3
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4817      	ldr	r0, [pc, #92]	@ (80023e0 <tareScale+0x88>)
 8002382:	f002 fd2b 	bl	8004ddc <HAL_UART_Transmit>
    HAL_Delay(2000);
 8002386:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800238a:	f000 fc51 	bl	8002c30 <HAL_Delay>

    HX711_Tare(&hx, 10);
 800238e:	210a      	movs	r1, #10
 8002390:	4814      	ldr	r0, [pc, #80]	@ (80023e4 <tareScale+0x8c>)
 8002392:	f7fe ffcf 	bl	8001334 <HX711_Tare>

    LCD_Clear(&hi2c1);
 8002396:	480f      	ldr	r0, [pc, #60]	@ (80023d4 <tareScale+0x7c>)
 8002398:	f7ff f88a 	bl	80014b0 <LCD_Clear>
    LCD_Send_String(&hi2c1, "Tare done.");
 800239c:	4912      	ldr	r1, [pc, #72]	@ (80023e8 <tareScale+0x90>)
 800239e:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <tareScale+0x7c>)
 80023a0:	f7ff f86e 	bl	8001480 <LCD_Send_String>
    msg = "Tare done...\r\n";
 80023a4:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <tareScale+0x94>)
 80023a6:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7fd ff71 	bl	8000290 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4809      	ldr	r0, [pc, #36]	@ (80023e0 <tareScale+0x88>)
 80023ba:	f002 fd0f 	bl	8004ddc <HAL_UART_Transmit>
    HAL_Delay(2000);
 80023be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023c2:	f000 fc35 	bl	8002c30 <HAL_Delay>
    LCD_Clear(&hi2c1);
 80023c6:	4803      	ldr	r0, [pc, #12]	@ (80023d4 <tareScale+0x7c>)
 80023c8:	f7ff f872 	bl	80014b0 <LCD_Clear>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200001fc 	.word	0x200001fc
 80023d8:	0800855c 	.word	0x0800855c
 80023dc:	08008564 	.word	0x08008564
 80023e0:	200002a4 	.word	0x200002a4
 80023e4:	200002fc 	.word	0x200002fc
 80023e8:	08008578 	.word	0x08008578
 80023ec:	08008584 	.word	0x08008584

080023f0 <weightScale>:

float weightScale(void) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
    LCD_Clear(&hi2c1);
 80023f4:	4813      	ldr	r0, [pc, #76]	@ (8002444 <weightScale+0x54>)
 80023f6:	f7ff f85b 	bl	80014b0 <LCD_Clear>
    LCD_Send_String(&hi2c1, "Put weight...");
 80023fa:	4913      	ldr	r1, [pc, #76]	@ (8002448 <weightScale+0x58>)
 80023fc:	4811      	ldr	r0, [pc, #68]	@ (8002444 <weightScale+0x54>)
 80023fe:	f7ff f83f 	bl	8001480 <LCD_Send_String>
    HAL_UART_Transmit(&huart1, (uint8_t*)"Put weight...\r\n", 17, HAL_MAX_DELAY);
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	2211      	movs	r2, #17
 8002408:	4910      	ldr	r1, [pc, #64]	@ (800244c <weightScale+0x5c>)
 800240a:	4811      	ldr	r0, [pc, #68]	@ (8002450 <weightScale+0x60>)
 800240c:	f002 fce6 	bl	8004ddc <HAL_UART_Transmit>
    HAL_Delay(2000);
 8002410:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002414:	f000 fc0c 	bl	8002c30 <HAL_Delay>
    LCD_Clear(&hi2c1);
 8002418:	480a      	ldr	r0, [pc, #40]	@ (8002444 <weightScale+0x54>)
 800241a:	f7ff f849 	bl	80014b0 <LCD_Clear>
//        sum += HX711_Read_Average(&hx, 10);
//        HAL_Delay(200);
//    }
//    float raw = sum / sample;
//    weight = fabs(raw) / 19676.0f;  // Scale factor điều chỉnh theo cảm biến
    weight =  fabs(HX711_Get_Weight(&hx, 10));
 800241e:	210a      	movs	r1, #10
 8002420:	480c      	ldr	r0, [pc, #48]	@ (8002454 <weightScale+0x64>)
 8002422:	f7fe ffb1 	bl	8001388 <HX711_Get_Weight>
 8002426:	eef0 7a40 	vmov.f32	s15, s0
 800242a:	eef0 7ae7 	vabs.f32	s15, s15
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <weightScale+0x68>)
 8002430:	edc3 7a00 	vstr	s15, [r3]
    return weight;
 8002434:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <weightScale+0x68>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	ee07 3a90 	vmov	s15, r3
}
 800243c:	eeb0 0a67 	vmov.f32	s0, s15
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200001fc 	.word	0x200001fc
 8002448:	08008594 	.word	0x08008594
 800244c:	080085a4 	.word	0x080085a4
 8002450:	200002a4 	.word	0x200002a4
 8002454:	200002fc 	.word	0x200002fc
 8002458:	200002f8 	.word	0x200002f8

0800245c <displayWeighResult>:

void displayWeighResult(float weight) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	@ 0x30
 8002460:	af02      	add	r7, sp, #8
 8002462:	ed87 0a01 	vstr	s0, [r7, #4]
    char msg[32];
    LCD_Clear(&hi2c1);
 8002466:	4830      	ldr	r0, [pc, #192]	@ (8002528 <displayWeighResult+0xcc>)
 8002468:	f7ff f822 	bl	80014b0 <LCD_Clear>
    LCD_Send_String(&hi2c1, "Result:");
 800246c:	492f      	ldr	r1, [pc, #188]	@ (800252c <displayWeighResult+0xd0>)
 800246e:	482e      	ldr	r0, [pc, #184]	@ (8002528 <displayWeighResult+0xcc>)
 8002470:	f7ff f806 	bl	8001480 <LCD_Send_String>
    snprintf(msg, sizeof(msg), "esult...\r\n", weight);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fe f877 	bl	8000568 <__aeabi_f2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	f107 0008 	add.w	r0, r7, #8
 8002482:	e9cd 2300 	strd	r2, r3, [sp]
 8002486:	4a2a      	ldr	r2, [pc, #168]	@ (8002530 <displayWeighResult+0xd4>)
 8002488:	2120      	movs	r1, #32
 800248a:	f003 fe11 	bl	80060b0 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd fefc 	bl	8000290 <strlen>
 8002498:	4603      	mov	r3, r0
 800249a:	b29a      	uxth	r2, r3
 800249c:	f107 0108 	add.w	r1, r7, #8
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
 80024a4:	4823      	ldr	r0, [pc, #140]	@ (8002534 <displayWeighResult+0xd8>)
 80024a6:	f002 fc99 	bl	8004ddc <HAL_UART_Transmit>

    snprintf(msg, sizeof(msg), "Weight: %.2f kg\r\n", weight);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe f85c 	bl	8000568 <__aeabi_f2d>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	f107 0008 	add.w	r0, r7, #8
 80024b8:	e9cd 2300 	strd	r2, r3, [sp]
 80024bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002538 <displayWeighResult+0xdc>)
 80024be:	2120      	movs	r1, #32
 80024c0:	f003 fdf6 	bl	80060b0 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd fee1 	bl	8000290 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	f107 0108 	add.w	r1, r7, #8
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	4816      	ldr	r0, [pc, #88]	@ (8002534 <displayWeighResult+0xd8>)
 80024dc:	f002 fc7e 	bl	8004ddc <HAL_UART_Transmit>
    LCD_Set_Cursor(&hi2c1, 1, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2101      	movs	r1, #1
 80024e4:	4810      	ldr	r0, [pc, #64]	@ (8002528 <displayWeighResult+0xcc>)
 80024e6:	f7ff f83c 	bl	8001562 <LCD_Set_Cursor>
    snprintf(msg, sizeof(msg), "%.2f kg", weight);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe f83c 	bl	8000568 <__aeabi_f2d>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	f107 0008 	add.w	r0, r7, #8
 80024f8:	e9cd 2300 	strd	r2, r3, [sp]
 80024fc:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <displayWeighResult+0xe0>)
 80024fe:	2120      	movs	r1, #32
 8002500:	f003 fdd6 	bl	80060b0 <sniprintf>
    LCD_Send_String(&hi2c1, msg);
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4619      	mov	r1, r3
 800250a:	4807      	ldr	r0, [pc, #28]	@ (8002528 <displayWeighResult+0xcc>)
 800250c:	f7fe ffb8 	bl	8001480 <LCD_Send_String>
    HAL_Delay(2000);
 8002510:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002514:	f000 fb8c 	bl	8002c30 <HAL_Delay>
    LCD_Clear(&hi2c1);
 8002518:	4803      	ldr	r0, [pc, #12]	@ (8002528 <displayWeighResult+0xcc>)
 800251a:	f7fe ffc9 	bl	80014b0 <LCD_Clear>
}
 800251e:	bf00      	nop
 8002520:	3728      	adds	r7, #40	@ 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200001fc 	.word	0x200001fc
 800252c:	080085b4 	.word	0x080085b4
 8002530:	080085bc 	.word	0x080085bc
 8002534:	200002a4 	.word	0x200002a4
 8002538:	080085c8 	.word	0x080085c8
 800253c:	080085dc 	.word	0x080085dc

08002540 <startScaleProcess>:

void startScaleProcess(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
    if (HX711_Is_Ready(&hx)) {
 8002544:	480e      	ldr	r0, [pc, #56]	@ (8002580 <startScaleProcess+0x40>)
 8002546:	f7fe fe4b 	bl	80011e0 <HX711_Is_Ready>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d014      	beq.n	800257a <startScaleProcess+0x3a>
        HX711_Set_Scale(&hx, 19676.0f);  // Scale factor điều chỉnh theo cảm biến
 8002550:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002584 <startScaleProcess+0x44>
 8002554:	480a      	ldr	r0, [pc, #40]	@ (8002580 <startScaleProcess+0x40>)
 8002556:	f7fe ff01 	bl	800135c <HX711_Set_Scale>
        tareScale();
 800255a:	f7ff fefd 	bl	8002358 <tareScale>
        weight = weightScale();
 800255e:	f7ff ff47 	bl	80023f0 <weightScale>
 8002562:	eef0 7a40 	vmov.f32	s15, s0
 8002566:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <startScaleProcess+0x48>)
 8002568:	edc3 7a00 	vstr	s15, [r3]
        displayWeighResult(weight);
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <startScaleProcess+0x48>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	eeb0 0a67 	vmov.f32	s0, s15
 8002576:	f7ff ff71 	bl	800245c <displayWeighResult>
    }
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200002fc 	.word	0x200002fc
 8002584:	4699b800 	.word	0x4699b800
 8002588:	200002f8 	.word	0x200002f8

0800258c <getWeight>:

float getWeight(void) {
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
    return weight;
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <getWeight+0x18>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	ee07 3a90 	vmov	s15, r3
}
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	200002f8 	.word	0x200002f8

080025a8 <wakeup_Init>:
#define WAKEUP_PIN        GPIO_PIN_0
#define WAKEUP_GPIO_PORT  GPIOA

extern UART_HandleTypeDef huart1;

void wakeup_Init(){
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
//    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(EXTI0_IRQn);

//    char *msg = "Wakeup config done\r\n";
//    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <enterSleep>:

void enterSleep(){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
    char *msg = "Entering STOP/SLEEP mode...\r\n";
 80025be:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <enterSleep+0x58>)
 80025c0:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fd fe64 	bl	8000290 <strlen>
 80025c8:	4603      	mov	r3, r0
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4810      	ldr	r0, [pc, #64]	@ (8002614 <enterSleep+0x5c>)
 80025d4:	f002 fc02 	bl	8004ddc <HAL_UART_Transmit>
    HAL_Delay(1000);
 80025d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025dc:	f000 fb28 	bl	8002c30 <HAL_Delay>

    // Cho phép power interface
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <enterSleep+0x60>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <enterSleep+0x60>)
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <enterSleep+0x60>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]

    // Vào STOP mode
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80025fc:	2101      	movs	r1, #1
 80025fe:	2001      	movs	r0, #1
 8002600:	f001 fec4 	bl	800438c <HAL_PWR_EnterSTOPMode>

    // Sau khi đánh thức ta cần phải reset clock system
    SystemClock_Config();
 8002604:	f7ff fcb4 	bl	8001f70 <SystemClock_Config>
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	080085e4 	.word	0x080085e4
 8002614:	200002a4 	.word	0x200002a4
 8002618:	40023800 	.word	0x40023800

0800261c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <HAL_MspInit+0x4c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <HAL_MspInit+0x4c>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002630:	6453      	str	r3, [r2, #68]	@ 0x44
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HAL_MspInit+0x4c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <HAL_MspInit+0x4c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	4a08      	ldr	r2, [pc, #32]	@ (8002668 <HAL_MspInit+0x4c>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	@ 0x40
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_MspInit+0x4c>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800

0800266c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	@ 0x30
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a42      	ldr	r2, [pc, #264]	@ (8002794 <HAL_I2C_MspInit+0x128>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12c      	bne.n	80026e8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a40      	ldr	r2, [pc, #256]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b3e      	ldr	r3, [pc, #248]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026aa:	23c0      	movs	r3, #192	@ 0xc0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ae:	2312      	movs	r3, #18
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026ba:	2304      	movs	r3, #4
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 031c 	add.w	r3, r7, #28
 80026c2:	4619      	mov	r1, r3
 80026c4:	4835      	ldr	r0, [pc, #212]	@ (800279c <HAL_I2C_MspInit+0x130>)
 80026c6:	f000 fbe9 	bl	8002e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	4b32      	ldr	r3, [pc, #200]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	4a31      	ldr	r2, [pc, #196]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 80026d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026da:	4b2f      	ldr	r3, [pc, #188]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026e6:	e050      	b.n	800278a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2c      	ldr	r2, [pc, #176]	@ (80027a0 <HAL_I2C_MspInit+0x134>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d14b      	bne.n	800278a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a27      	ldr	r2, [pc, #156]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b25      	ldr	r3, [pc, #148]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b21      	ldr	r3, [pc, #132]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a20      	ldr	r2, [pc, #128]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800272a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002730:	2312      	movs	r3, #18
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800273c:	2304      	movs	r3, #4
 800273e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4619      	mov	r1, r3
 8002746:	4817      	ldr	r0, [pc, #92]	@ (80027a4 <HAL_I2C_MspInit+0x138>)
 8002748:	f000 fba8 	bl	8002e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800274c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002752:	2312      	movs	r3, #18
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800275e:	2304      	movs	r3, #4
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f107 031c 	add.w	r3, r7, #28
 8002766:	4619      	mov	r1, r3
 8002768:	480f      	ldr	r0, [pc, #60]	@ (80027a8 <HAL_I2C_MspInit+0x13c>)
 800276a:	f000 fb97 	bl	8002e9c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	4a08      	ldr	r2, [pc, #32]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002778:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800277c:	6413      	str	r3, [r2, #64]	@ 0x40
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_I2C_MspInit+0x12c>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
}
 800278a:	bf00      	nop
 800278c:	3730      	adds	r7, #48	@ 0x30
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40005400 	.word	0x40005400
 8002798:	40023800 	.word	0x40023800
 800279c:	40020400 	.word	0x40020400
 80027a0:	40005c00 	.word	0x40005c00
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020000 	.word	0x40020000

080027ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	@ 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <HAL_UART_MspInit+0x84>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d12c      	bne.n	8002828 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <HAL_UART_MspInit+0x88>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	4a17      	ldr	r2, [pc, #92]	@ (8002834 <HAL_UART_MspInit+0x88>)
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <HAL_UART_MspInit+0x88>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <HAL_UART_MspInit+0x88>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	4a10      	ldr	r2, [pc, #64]	@ (8002834 <HAL_UART_MspInit+0x88>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <HAL_UART_MspInit+0x88>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002806:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800280a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002818:	2307      	movs	r3, #7
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4619      	mov	r1, r3
 8002822:	4805      	ldr	r0, [pc, #20]	@ (8002838 <HAL_UART_MspInit+0x8c>)
 8002824:	f000 fb3a 	bl	8002e9c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	@ 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40011000 	.word	0x40011000
 8002834:	40023800 	.word	0x40023800
 8002838:	40020000 	.word	0x40020000

0800283c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <NMI_Handler+0x4>

08002844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <HardFault_Handler+0x4>

0800284c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <MemManage_Handler+0x4>

08002854 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <BusFault_Handler+0x4>

0800285c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <UsageFault_Handler+0x4>

08002864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002892:	f000 f9ad 	bl	8002bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	lastActivityTime = HAL_GetTick();  //Reset thời điểm hoạt động
 80028a0:	f000 f9ba 	bl	8002c18 <HAL_GetTick>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4a03      	ldr	r2, [pc, #12]	@ (80028b4 <EXTI0_IRQHandler+0x18>)
 80028a8:	6013      	str	r3, [r2, #0]


  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f000 fcd4 	bl	8003258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200002f0 	.word	0x200002f0

080028b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return 1;
 80028bc:	2301      	movs	r3, #1
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <_kill>:

int _kill(int pid, int sig)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028d2:	f003 fcdb 	bl	800628c <__errno>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2216      	movs	r2, #22
 80028da:	601a      	str	r2, [r3, #0]
  return -1;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_exit>:

void _exit (int status)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ffe7 	bl	80028c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028fa:	bf00      	nop
 80028fc:	e7fd      	b.n	80028fa <_exit+0x12>

080028fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e00a      	b.n	8002926 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002910:	f3af 8000 	nop.w
 8002914:	4601      	mov	r1, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	60ba      	str	r2, [r7, #8]
 800291c:	b2ca      	uxtb	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	dbf0      	blt.n	8002910 <_read+0x12>
  }

  return len;
 800292e:	687b      	ldr	r3, [r7, #4]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e009      	b.n	800295e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	60ba      	str	r2, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3301      	adds	r3, #1
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	429a      	cmp	r2, r3
 8002964:	dbf1      	blt.n	800294a <_write+0x12>
  }
  return len;
 8002966:	687b      	ldr	r3, [r7, #4]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <_close>:

int _close(int file)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002998:	605a      	str	r2, [r3, #4]
  return 0;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_isatty>:

int _isatty(int file)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029b0:	2301      	movs	r3, #1
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e0:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <_sbrk+0x5c>)
 80029e2:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <_sbrk+0x60>)
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <_sbrk+0x64>)
 80029f6:	4a12      	ldr	r2, [pc, #72]	@ (8002a40 <_sbrk+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d207      	bcs.n	8002a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a08:	f003 fc40 	bl	800628c <__errno>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	220c      	movs	r2, #12
 8002a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	e009      	b.n	8002a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <_sbrk+0x64>)
 8002a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20030000 	.word	0x20030000
 8002a38:	00000400 	.word	0x00000400
 8002a3c:	20000314 	.word	0x20000314
 8002a40:	20000468 	.word	0x20000468

08002a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a48:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <SystemInit+0x20>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	4a05      	ldr	r2, [pc, #20]	@ (8002a64 <SystemInit+0x20>)
 8002a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <showMainMenu>:
#include "uart_interface.h"
#include <string.h>

extern UART_HandleTypeDef huart1;

void showMainMenu() {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
    char *menu =
 8002a6e:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <showMainMenu+0x28>)
 8002a70:	607b      	str	r3, [r7, #4]
		"========== MENU CHINH ==========\r\n"
		"1. Can\r\n"
		"2. Xem lich su can\r\n"
		"3. Thoat\r\n"
		"================================\r\n";
    HAL_UART_Transmit(&huart1, (uint8_t *)menu, strlen(menu), HAL_MAX_DELAY);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fd fc0c 	bl	8000290 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4804      	ldr	r0, [pc, #16]	@ (8002a94 <showMainMenu+0x2c>)
 8002a84:	f002 f9aa 	bl	8004ddc <HAL_UART_Transmit>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	08008604 	.word	0x08008604
 8002a94:	200002a4 	.word	0x200002a4

08002a98 <showScaleOptions>:

void showScaleOptions() {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
    char *menu =
 8002a9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <showScaleOptions+0x28>)
 8002aa0:	607b      	str	r3, [r7, #4]
		"======== TUY CHON CAN =========\r\n"
		"1. Luu ket qua\r\n"
		"2. Khong luu ket qua\r\n"
		"3. Huy va quay lai menu chinh\r\n"
		"================================\r\n";
    HAL_UART_Transmit(&huart1, (uint8_t *)menu, strlen(menu), HAL_MAX_DELAY);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fd fbf4 	bl	8000290 <strlen>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4804      	ldr	r0, [pc, #16]	@ (8002ac4 <showScaleOptions+0x2c>)
 8002ab4:	f002 f992 	bl	8004ddc <HAL_UART_Transmit>
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	08008670 	.word	0x08008670
 8002ac4:	200002a4 	.word	0x200002a4

08002ac8 <showLogOptions>:

void showLogOptions() {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
    char *menu =
 8002ace:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <showLogOptions+0x28>)
 8002ad0:	607b      	str	r3, [r7, #4]
		"====== TUY CHON HIEN THI =======\r\n"
		"1. Xoa lan can moi nhat\r\n"
		"2. Xoa toan bo lich su can\r\n"
		"3. Thoat va quay lai menu chinh\r\n"
		"================================\r\n";
    HAL_UART_Transmit(&huart1, (uint8_t *)menu, strlen(menu), HAL_MAX_DELAY);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd fbdc 	bl	8000290 <strlen>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4804      	ldr	r0, [pc, #16]	@ (8002af4 <showLogOptions+0x2c>)
 8002ae4:	f002 f97a 	bl	8004ddc <HAL_UART_Transmit>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	080086fc 	.word	0x080086fc
 8002af4:	200002a4 	.word	0x200002a4

08002af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002afc:	f7ff ffa2 	bl	8002a44 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b00:	480c      	ldr	r0, [pc, #48]	@ (8002b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b02:	490d      	ldr	r1, [pc, #52]	@ (8002b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b04:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b08:	e002      	b.n	8002b10 <LoopCopyDataInit>

08002b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0e:	3304      	adds	r3, #4

08002b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b14:	d3f9      	bcc.n	8002b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b16:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b18:	4c0a      	ldr	r4, [pc, #40]	@ (8002b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b1c:	e001      	b.n	8002b22 <LoopFillZerobss>

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b20:	3204      	adds	r2, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b26:	f003 fbb7 	bl	8006298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b2a:	f7ff f8bd 	bl	8001ca8 <main>
  bx  lr    
 8002b2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b3c:	08008b34 	.word	0x08008b34
  ldr r2, =_sbss
 8002b40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002b44:	20000468 	.word	0x20000468

08002b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC_IRQHandler>
	...

08002b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b50:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a0d      	ldr	r2, [pc, #52]	@ (8002b8c <HAL_Init+0x40>)
 8002b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_Init+0x40>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <HAL_Init+0x40>)
 8002b62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <HAL_Init+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a07      	ldr	r2, [pc, #28]	@ (8002b8c <HAL_Init+0x40>)
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f000 f94f 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7a:	200f      	movs	r0, #15
 8002b7c:	f000 f808 	bl	8002b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b80:	f7ff fd4c 	bl	800261c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023c00 	.word	0x40023c00

08002b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <HAL_InitTick+0x54>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_InitTick+0x58>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f967 	bl	8002e82 <HAL_SYSTICK_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00e      	b.n	8002bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b0f      	cmp	r3, #15
 8002bc2:	d80a      	bhi.n	8002bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f000 f92f 	bl	8002e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd0:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <HAL_InitTick+0x5c>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000000 	.word	0x20000000
 8002be8:	20000008 	.word	0x20000008
 8002bec:	20000004 	.word	0x20000004

08002bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_IncTick+0x20>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_IncTick+0x24>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_IncTick+0x24>)
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000008 	.word	0x20000008
 8002c14:	20000318 	.word	0x20000318

08002c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_GetTick+0x14>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000318 	.word	0x20000318

08002c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7ff ffee 	bl	8002c18 <HAL_GetTick>
 8002c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d005      	beq.n	8002c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_Delay+0x44>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c56:	bf00      	nop
 8002c58:	f7ff ffde 	bl	8002c18 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d8f7      	bhi.n	8002c58 <HAL_Delay+0x28>
  {
  }
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000008 	.word	0x20000008

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4907      	ldr	r1, [pc, #28]	@ (8002d14 <__NVIC_EnableIRQ+0x38>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	@ (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	@ 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf28      	it	cs
 8002d8a:	2304      	movcs	r3, #4
 8002d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d902      	bls.n	8002d9c <NVIC_EncodePriority+0x30>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b03      	subs	r3, #3
 8002d9a:	e000      	b.n	8002d9e <NVIC_EncodePriority+0x32>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	4313      	orrs	r3, r2
         );
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	@ 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002de4:	d301      	bcc.n	8002dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00f      	b.n	8002e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dea:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <SysTick_Config+0x40>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df2:	210f      	movs	r1, #15
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	f7ff ff8e 	bl	8002d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <SysTick_Config+0x40>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e02:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <SysTick_Config+0x40>)
 8002e04:	2207      	movs	r2, #7
 8002e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff29 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e40:	f7ff ff3e 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7ff ff8e 	bl	8002d6c <NVIC_EncodePriority>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff5d 	bl	8002d18 <__NVIC_SetPriority>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff31 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffa2 	bl	8002dd4 <SysTick_Config>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e177      	b.n	80031a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8166 	bne.w	80031a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d005      	beq.n	8002eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d130      	bne.n	8002f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0201 	and.w	r2, r3, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d017      	beq.n	8002f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d123      	bne.n	8002fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80c0 	beq.w	80031a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b66      	ldr	r3, [pc, #408]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303e:	4a61      	ldr	r2, [pc, #388]	@ (80031c4 <HAL_GPIO_Init+0x328>)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a58      	ldr	r2, [pc, #352]	@ (80031c8 <HAL_GPIO_Init+0x32c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d037      	beq.n	80030da <HAL_GPIO_Init+0x23e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a57      	ldr	r2, [pc, #348]	@ (80031cc <HAL_GPIO_Init+0x330>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_GPIO_Init+0x23a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a56      	ldr	r2, [pc, #344]	@ (80031d0 <HAL_GPIO_Init+0x334>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d02b      	beq.n	80030d2 <HAL_GPIO_Init+0x236>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a55      	ldr	r2, [pc, #340]	@ (80031d4 <HAL_GPIO_Init+0x338>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d025      	beq.n	80030ce <HAL_GPIO_Init+0x232>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a54      	ldr	r2, [pc, #336]	@ (80031d8 <HAL_GPIO_Init+0x33c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01f      	beq.n	80030ca <HAL_GPIO_Init+0x22e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a53      	ldr	r2, [pc, #332]	@ (80031dc <HAL_GPIO_Init+0x340>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d019      	beq.n	80030c6 <HAL_GPIO_Init+0x22a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a52      	ldr	r2, [pc, #328]	@ (80031e0 <HAL_GPIO_Init+0x344>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0x226>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a51      	ldr	r2, [pc, #324]	@ (80031e4 <HAL_GPIO_Init+0x348>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00d      	beq.n	80030be <HAL_GPIO_Init+0x222>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a50      	ldr	r2, [pc, #320]	@ (80031e8 <HAL_GPIO_Init+0x34c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <HAL_GPIO_Init+0x21e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4f      	ldr	r2, [pc, #316]	@ (80031ec <HAL_GPIO_Init+0x350>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_GPIO_Init+0x21a>
 80030b2:	2309      	movs	r3, #9
 80030b4:	e012      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030b6:	230a      	movs	r3, #10
 80030b8:	e010      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ba:	2308      	movs	r3, #8
 80030bc:	e00e      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030be:	2307      	movs	r3, #7
 80030c0:	e00c      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030c2:	2306      	movs	r3, #6
 80030c4:	e00a      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030c6:	2305      	movs	r3, #5
 80030c8:	e008      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ca:	2304      	movs	r3, #4
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030da:	2300      	movs	r3, #0
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f002 0203 	and.w	r2, r2, #3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ec:	4935      	ldr	r1, [pc, #212]	@ (80031c4 <HAL_GPIO_Init+0x328>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fa:	4b3d      	ldr	r3, [pc, #244]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800311e:	4a34      	ldr	r2, [pc, #208]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003124:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003148:	4a29      	ldr	r2, [pc, #164]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800314e:	4b28      	ldr	r3, [pc, #160]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003172:	4a1f      	ldr	r2, [pc, #124]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003178:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319c:	4a14      	ldr	r2, [pc, #80]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3301      	adds	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	f67f ae84 	bls.w	8002eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020c00 	.word	0x40020c00
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40021400 	.word	0x40021400
 80031e0:	40021800 	.word	0x40021800
 80031e4:	40021c00 	.word	0x40021c00
 80031e8:	40022000 	.word	0x40022000
 80031ec:	40022400 	.word	0x40022400
 80031f0:	40013c00 	.word	0x40013c00

080031f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e001      	b.n	8003216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
 8003230:	4613      	mov	r3, r2
 8003232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003234:	787b      	ldrb	r3, [r7, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003240:	e003      	b.n	800324a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	041a      	lsls	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003262:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800326e:	4a05      	ldr	r2, [pc, #20]	@ (8003284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f806 	bl	8003288 <HAL_GPIO_EXTI_Callback>
  }
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40013c00 	.word	0x40013c00

08003288 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e12b      	b.n	800350a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff f9d0 	bl	800266c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	@ 0x24
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003304:	f001 fcf2 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8003308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a81      	ldr	r2, [pc, #516]	@ (8003514 <HAL_I2C_Init+0x274>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d807      	bhi.n	8003324 <HAL_I2C_Init+0x84>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a80      	ldr	r2, [pc, #512]	@ (8003518 <HAL_I2C_Init+0x278>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e006      	b.n	8003332 <HAL_I2C_Init+0x92>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a7d      	ldr	r2, [pc, #500]	@ (800351c <HAL_I2C_Init+0x27c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0e7      	b.n	800350a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a78      	ldr	r2, [pc, #480]	@ (8003520 <HAL_I2C_Init+0x280>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0c9b      	lsrs	r3, r3, #18
 8003344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a6a      	ldr	r2, [pc, #424]	@ (8003514 <HAL_I2C_Init+0x274>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d802      	bhi.n	8003374 <HAL_I2C_Init+0xd4>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	e009      	b.n	8003388 <HAL_I2C_Init+0xe8>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	4a69      	ldr	r2, [pc, #420]	@ (8003524 <HAL_I2C_Init+0x284>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	3301      	adds	r3, #1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	430b      	orrs	r3, r1
 800338e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800339a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	495c      	ldr	r1, [pc, #368]	@ (8003514 <HAL_I2C_Init+0x274>)
 80033a4:	428b      	cmp	r3, r1
 80033a6:	d819      	bhi.n	80033dc <HAL_I2C_Init+0x13c>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e59      	subs	r1, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033bc:	400b      	ands	r3, r1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_I2C_Init+0x138>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e59      	subs	r1, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d6:	e051      	b.n	800347c <HAL_I2C_Init+0x1dc>
 80033d8:	2304      	movs	r3, #4
 80033da:	e04f      	b.n	800347c <HAL_I2C_Init+0x1dc>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d111      	bne.n	8003408 <HAL_I2C_Init+0x168>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e012      	b.n	800342e <HAL_I2C_Init+0x18e>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Init+0x196>
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_I2C_Init+0x1dc>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10e      	bne.n	800345c <HAL_I2C_Init+0x1bc>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1e58      	subs	r0, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	440b      	add	r3, r1
 800344c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800345a:	e00f      	b.n	800347c <HAL_I2C_Init+0x1dc>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	0099      	lsls	r1, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6809      	ldr	r1, [r1, #0]
 8003480:	4313      	orrs	r3, r2
 8003482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6911      	ldr	r1, [r2, #16]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	000186a0 	.word	0x000186a0
 8003518:	001e847f 	.word	0x001e847f
 800351c:	003d08ff 	.word	0x003d08ff
 8003520:	431bde83 	.word	0x431bde83
 8003524:	10624dd3 	.word	0x10624dd3

08003528 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	460b      	mov	r3, r1
 8003536:	817b      	strh	r3, [r7, #10]
 8003538:	4613      	mov	r3, r2
 800353a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7ff fb6c 	bl	8002c18 <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b20      	cmp	r3, #32
 800354c:	f040 80e0 	bne.w	8003710 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2319      	movs	r3, #25
 8003556:	2201      	movs	r2, #1
 8003558:	4970      	ldr	r1, [pc, #448]	@ (800371c <HAL_I2C_Master_Transmit+0x1f4>)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fc64 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
 8003568:	e0d3      	b.n	8003712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_I2C_Master_Transmit+0x50>
 8003574:	2302      	movs	r3, #2
 8003576:	e0cc      	b.n	8003712 <HAL_I2C_Master_Transmit+0x1ea>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d007      	beq.n	800359e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2221      	movs	r2, #33	@ 0x21
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2210      	movs	r2, #16
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	893a      	ldrh	r2, [r7, #8]
 80035ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a50      	ldr	r2, [pc, #320]	@ (8003720 <HAL_I2C_Master_Transmit+0x1f8>)
 80035de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035e0:	8979      	ldrh	r1, [r7, #10]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 face 	bl	8003b88 <I2C_MasterRequestWrite>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e08d      	b.n	8003712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800360c:	e066      	b.n	80036dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	6a39      	ldr	r1, [r7, #32]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fd22 	bl	800405c <I2C_WaitOnTXEFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	2b04      	cmp	r3, #4
 8003624:	d107      	bne.n	8003636 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06b      	b.n	8003712 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d11b      	bne.n	80036b0 <HAL_I2C_Master_Transmit+0x188>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d017      	beq.n	80036b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	6a39      	ldr	r1, [r7, #32]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fd19 	bl	80040ec <I2C_WaitOnBTFFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d107      	bne.n	80036d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e01a      	b.n	8003712 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d194      	bne.n	800360e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	00100002 	.word	0x00100002
 8003720:	ffff0000 	.word	0xffff0000

08003724 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08c      	sub	sp, #48	@ 0x30
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	461a      	mov	r2, r3
 8003730:	460b      	mov	r3, r1
 8003732:	817b      	strh	r3, [r7, #10]
 8003734:	4613      	mov	r3, r2
 8003736:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff fa6e 	bl	8002c18 <HAL_GetTick>
 800373c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b20      	cmp	r3, #32
 8003748:	f040 8217 	bne.w	8003b7a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2319      	movs	r3, #25
 8003752:	2201      	movs	r2, #1
 8003754:	497c      	ldr	r1, [pc, #496]	@ (8003948 <HAL_I2C_Master_Receive+0x224>)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fb66 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
 8003764:	e20a      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_I2C_Master_Receive+0x50>
 8003770:	2302      	movs	r3, #2
 8003772:	e203      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b01      	cmp	r3, #1
 8003788:	d007      	beq.n	800379a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2222      	movs	r2, #34	@ 0x22
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2210      	movs	r2, #16
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	893a      	ldrh	r2, [r7, #8]
 80037ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a5c      	ldr	r2, [pc, #368]	@ (800394c <HAL_I2C_Master_Receive+0x228>)
 80037da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fa52 	bl	8003c8c <I2C_MasterRequestRead>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e1c4      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d113      	bne.n	8003822 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e198      	b.n	8003b54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	2b01      	cmp	r3, #1
 8003828:	d11b      	bne.n	8003862 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e178      	b.n	8003b54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003866:	2b02      	cmp	r3, #2
 8003868:	d11b      	bne.n	80038a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003878:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	e158      	b.n	8003b54 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038c8:	e144      	b.n	8003b54 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	f200 80f1 	bhi.w	8003ab6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d123      	bne.n	8003924 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fc4b 	bl	800417c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e145      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003922:	e117      	b.n	8003b54 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003928:	2b02      	cmp	r3, #2
 800392a:	d14e      	bne.n	80039ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	2200      	movs	r2, #0
 8003934:	4906      	ldr	r1, [pc, #24]	@ (8003950 <HAL_I2C_Master_Receive+0x22c>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fa76 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e11a      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
 8003946:	bf00      	nop
 8003948:	00100002 	.word	0x00100002
 800394c:	ffff0000 	.word	0xffff0000
 8003950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039c8:	e0c4      	b.n	8003b54 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	2200      	movs	r2, #0
 80039d2:	496c      	ldr	r1, [pc, #432]	@ (8003b84 <HAL_I2C_Master_Receive+0x460>)
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fa27 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0cb      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4955      	ldr	r1, [pc, #340]	@ (8003b84 <HAL_I2C_Master_Receive+0x460>)
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f9f9 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e09d      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ab4:	e04e      	b.n	8003b54 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fb5e 	bl	800417c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e058      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d124      	bne.n	8003b54 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d107      	bne.n	8003b22 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f47f aeb6 	bne.w	80038ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
  }
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3728      	adds	r7, #40	@ 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	00010004 	.word	0x00010004

08003b88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	460b      	mov	r3, r1
 8003b96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d006      	beq.n	8003bb2 <I2C_MasterRequestWrite+0x2a>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d003      	beq.n	8003bb2 <I2C_MasterRequestWrite+0x2a>
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bb0:	d108      	bne.n	8003bc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00b      	b.n	8003bdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	2b12      	cmp	r3, #18
 8003bca:	d107      	bne.n	8003bdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f91d 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c02:	d103      	bne.n	8003c0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e035      	b.n	8003c7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c18:	d108      	bne.n	8003c2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	e01b      	b.n	8003c64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c2c:	897b      	ldrh	r3, [r7, #10]
 8003c2e:	11db      	asrs	r3, r3, #7
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0306 	and.w	r3, r3, #6
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f063 030f 	orn	r3, r3, #15
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	490e      	ldr	r1, [pc, #56]	@ (8003c84 <I2C_MasterRequestWrite+0xfc>)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f966 	bl	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e010      	b.n	8003c7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c5a:	897b      	ldrh	r3, [r7, #10]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4907      	ldr	r1, [pc, #28]	@ (8003c88 <I2C_MasterRequestWrite+0x100>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f956 	bl	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	00010008 	.word	0x00010008
 8003c88:	00010002 	.word	0x00010002

08003c8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d006      	beq.n	8003cc6 <I2C_MasterRequestRead+0x3a>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d003      	beq.n	8003cc6 <I2C_MasterRequestRead+0x3a>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cc4:	d108      	bne.n	8003cd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e00b      	b.n	8003cf0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	2b11      	cmp	r3, #17
 8003cde:	d107      	bne.n	8003cf0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f893 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d16:	d103      	bne.n	8003d20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e079      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d2c:	d108      	bne.n	8003d40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d2e:	897b      	ldrh	r3, [r7, #10]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	e05f      	b.n	8003e00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d40:	897b      	ldrh	r3, [r7, #10]
 8003d42:	11db      	asrs	r3, r3, #7
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f003 0306 	and.w	r3, r3, #6
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f063 030f 	orn	r3, r3, #15
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4930      	ldr	r1, [pc, #192]	@ (8003e20 <I2C_MasterRequestRead+0x194>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f8dc 	bl	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e054      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4929      	ldr	r1, [pc, #164]	@ (8003e24 <I2C_MasterRequestRead+0x198>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f8cc 	bl	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e044      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f831 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dda:	d103      	bne.n	8003de4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e017      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003de8:	897b      	ldrh	r3, [r7, #10]
 8003dea:	11db      	asrs	r3, r3, #7
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 0306 	and.w	r3, r3, #6
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f063 030e 	orn	r3, r3, #14
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4907      	ldr	r1, [pc, #28]	@ (8003e24 <I2C_MasterRequestRead+0x198>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f888 	bl	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	00010008 	.word	0x00010008
 8003e24:	00010002 	.word	0x00010002

08003e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e38:	e048      	b.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d044      	beq.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe fee9 	bl	8002c18 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d139      	bne.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	0c1b      	lsrs	r3, r3, #16
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d10d      	bne.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	e00c      	b.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	43da      	mvns	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d116      	bne.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e023      	b.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10d      	bne.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	43da      	mvns	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	e00c      	b.n	8003f0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d093      	beq.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2a:	e071      	b.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3a:	d123      	bne.n	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e067      	b.n	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d041      	beq.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fe fe44 	bl	8002c18 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d136      	bne.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10c      	bne.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e00b      	b.n	8003fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e021      	b.n	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d10c      	bne.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	43da      	mvns	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4013      	ands	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e00b      	b.n	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f af6d 	bne.w	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004068:	e034      	b.n	80040d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f8e3 	bl	8004236 <I2C_IsAcknowledgeFailed>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e034      	b.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d028      	beq.n	80040d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004082:	f7fe fdc9 	bl	8002c18 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11d      	bne.n	80040d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a2:	2b80      	cmp	r3, #128	@ 0x80
 80040a4:	d016      	beq.n	80040d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040de:	2b80      	cmp	r3, #128	@ 0x80
 80040e0:	d1c3      	bne.n	800406a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040f8:	e034      	b.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f89b 	bl	8004236 <I2C_IsAcknowledgeFailed>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e034      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d028      	beq.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004112:	f7fe fd81 	bl	8002c18 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d016      	beq.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d1c3      	bne.n	80040fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004188:	e049      	b.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b10      	cmp	r3, #16
 8004196:	d119      	bne.n	80041cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e030      	b.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041cc:	f7fe fd24 	bl	8002c18 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11d      	bne.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d016      	beq.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e007      	b.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004228:	2b40      	cmp	r3, #64	@ 0x40
 800422a:	d1ae      	bne.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424c:	d11b      	bne.n	8004286 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004256:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	f043 0204 	orr.w	r2, r3, #4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d129      	bne.n	80042fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2224      	movs	r2, #36	@ 0x24
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0210 	bic.w	r2, r2, #16
 80042d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b20      	cmp	r3, #32
 8004324:	d12a      	bne.n	800437c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2224      	movs	r2, #36	@ 0x24
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004346:	89fb      	ldrh	r3, [r7, #14]
 8004348:	f023 030f 	bic.w	r3, r3, #15
 800434c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b29a      	uxth	r2, r3
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	4313      	orrs	r3, r2
 8004356:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	89fa      	ldrh	r2, [r7, #14]
 800435e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004398:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <HAL_PWR_EnterSTOPMode+0x58>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 0203 	bic.w	r2, r3, #3
 80043a0:	4910      	ldr	r1, [pc, #64]	@ (80043e4 <HAL_PWR_EnterSTOPMode+0x58>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80043a8:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	4a0e      	ldr	r2, [pc, #56]	@ (80043e8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80043ae:	f043 0304 	orr.w	r3, r3, #4
 80043b2:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80043ba:	bf30      	wfi
 80043bc:	e005      	b.n	80043ca <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d001      	beq.n	80043c8 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 80043c4:	bf40      	sev
      __WFE();
 80043c6:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 80043c8:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80043ca:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	4a06      	ldr	r2, [pc, #24]	@ (80043e8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	6113      	str	r3, [r2, #16]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40007000 	.word	0x40007000
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_PWREx_EnableOverDrive+0x90>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <HAL_PWREx_EnableOverDrive+0x90>)
 8004400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004404:	6413      	str	r3, [r2, #64]	@ 0x40
 8004406:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <HAL_PWREx_EnableOverDrive+0x90>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004412:	4b1b      	ldr	r3, [pc, #108]	@ (8004480 <HAL_PWREx_EnableOverDrive+0x94>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004418:	f7fe fbfe 	bl	8002c18 <HAL_GetTick>
 800441c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800441e:	e009      	b.n	8004434 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004420:	f7fe fbfa 	bl	8002c18 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800442e:	d901      	bls.n	8004434 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e01f      	b.n	8004474 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004434:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <HAL_PWREx_EnableOverDrive+0x98>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004440:	d1ee      	bne.n	8004420 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004442:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004448:	f7fe fbe6 	bl	8002c18 <HAL_GetTick>
 800444c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800444e:	e009      	b.n	8004464 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004450:	f7fe fbe2 	bl	8002c18 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800445e:	d901      	bls.n	8004464 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e007      	b.n	8004474 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004464:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <HAL_PWREx_EnableOverDrive+0x98>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004470:	d1ee      	bne.n	8004450 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	420e0040 	.word	0x420e0040
 8004484:	40007000 	.word	0x40007000
 8004488:	420e0044 	.word	0x420e0044

0800448c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e267      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d075      	beq.n	8004596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044aa:	4b88      	ldr	r3, [pc, #544]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d00c      	beq.n	80044d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b6:	4b85      	ldr	r3, [pc, #532]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d112      	bne.n	80044e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c2:	4b82      	ldr	r3, [pc, #520]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ce:	d10b      	bne.n	80044e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	4b7e      	ldr	r3, [pc, #504]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05b      	beq.n	8004594 <HAL_RCC_OscConfig+0x108>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d157      	bne.n	8004594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e242      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f0:	d106      	bne.n	8004500 <HAL_RCC_OscConfig+0x74>
 80044f2:	4b76      	ldr	r3, [pc, #472]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a75      	ldr	r2, [pc, #468]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e01d      	b.n	800453c <HAL_RCC_OscConfig+0xb0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x98>
 800450a:	4b70      	ldr	r3, [pc, #448]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6f      	ldr	r2, [pc, #444]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6d      	ldr	r3, [pc, #436]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6c      	ldr	r2, [pc, #432]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0xb0>
 8004524:	4b69      	ldr	r3, [pc, #420]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a68      	ldr	r2, [pc, #416]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b66      	ldr	r3, [pc, #408]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a65      	ldr	r2, [pc, #404]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe fb68 	bl	8002c18 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fe fb64 	bl	8002c18 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	@ 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e207      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b5b      	ldr	r3, [pc, #364]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0xc0>
 800456a:	e014      	b.n	8004596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe fb54 	bl	8002c18 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fb50 	bl	8002c18 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1f3      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	4b51      	ldr	r3, [pc, #324]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0xe8>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d063      	beq.n	800466a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045a2:	4b4a      	ldr	r3, [pc, #296]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ae:	4b47      	ldr	r3, [pc, #284]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d11c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ba:	4b44      	ldr	r3, [pc, #272]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	4b41      	ldr	r3, [pc, #260]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x152>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e1c7      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b3b      	ldr	r3, [pc, #236]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4937      	ldr	r1, [pc, #220]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	e03a      	b.n	800466a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fc:	4b34      	ldr	r3, [pc, #208]	@ (80046d0 <HAL_RCC_OscConfig+0x244>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fe fb09 	bl	8002c18 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fe fb05 	bl	8002c18 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1a8      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	4b2b      	ldr	r3, [pc, #172]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b28      	ldr	r3, [pc, #160]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4925      	ldr	r1, [pc, #148]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
 800463c:	e015      	b.n	800466a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <HAL_RCC_OscConfig+0x244>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fe fae8 	bl	8002c18 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464c:	f7fe fae4 	bl	8002c18 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e187      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d036      	beq.n	80046e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d016      	beq.n	80046ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <HAL_RCC_OscConfig+0x248>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fe fac8 	bl	8002c18 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fe fac4 	bl	8002c18 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e167      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80046a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x200>
 80046aa:	e01b      	b.n	80046e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <HAL_RCC_OscConfig+0x248>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b2:	f7fe fab1 	bl	8002c18 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	e00e      	b.n	80046d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ba:	f7fe faad 	bl	8002c18 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d907      	bls.n	80046d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e150      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	42470000 	.word	0x42470000
 80046d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d8:	4b88      	ldr	r3, [pc, #544]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80046da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ea      	bne.n	80046ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8097 	beq.w	8004820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b81      	ldr	r3, [pc, #516]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	4b7d      	ldr	r3, [pc, #500]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	4a7c      	ldr	r2, [pc, #496]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	@ 0x40
 8004712:	4b7a      	ldr	r3, [pc, #488]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004722:	4b77      	ldr	r3, [pc, #476]	@ (8004900 <HAL_RCC_OscConfig+0x474>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d118      	bne.n	8004760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472e:	4b74      	ldr	r3, [pc, #464]	@ (8004900 <HAL_RCC_OscConfig+0x474>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a73      	ldr	r2, [pc, #460]	@ (8004900 <HAL_RCC_OscConfig+0x474>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473a:	f7fe fa6d 	bl	8002c18 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004742:	f7fe fa69 	bl	8002c18 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e10c      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	4b6a      	ldr	r3, [pc, #424]	@ (8004900 <HAL_RCC_OscConfig+0x474>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x2ea>
 8004768:	4b64      	ldr	r3, [pc, #400]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	4a63      	ldr	r2, [pc, #396]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	@ 0x70
 8004774:	e01c      	b.n	80047b0 <HAL_RCC_OscConfig+0x324>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b05      	cmp	r3, #5
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x30c>
 800477e:	4b5f      	ldr	r3, [pc, #380]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	4a5e      	ldr	r2, [pc, #376]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	6713      	str	r3, [r2, #112]	@ 0x70
 800478a:	4b5c      	ldr	r3, [pc, #368]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	4a5b      	ldr	r2, [pc, #364]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	6713      	str	r3, [r2, #112]	@ 0x70
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0x324>
 8004798:	4b58      	ldr	r3, [pc, #352]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479c:	4a57      	ldr	r2, [pc, #348]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a4:	4b55      	ldr	r3, [pc, #340]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a8:	4a54      	ldr	r2, [pc, #336]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80047aa:	f023 0304 	bic.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fe fa2e 	bl	8002c18 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fe fa2a 	bl	8002c18 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e0cb      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d6:	4b49      	ldr	r3, [pc, #292]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0ee      	beq.n	80047c0 <HAL_RCC_OscConfig+0x334>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e4:	f7fe fa18 	bl	8002c18 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fe fa14 	bl	8002c18 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e0b5      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004802:	4b3e      	ldr	r3, [pc, #248]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ee      	bne.n	80047ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d105      	bne.n	8004820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004814:	4b39      	ldr	r3, [pc, #228]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	4a38      	ldr	r2, [pc, #224]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800481a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a1 	beq.w	800496c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800482a:	4b34      	ldr	r3, [pc, #208]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b08      	cmp	r3, #8
 8004834:	d05c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d141      	bne.n	80048c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483e:	4b31      	ldr	r3, [pc, #196]	@ (8004904 <HAL_RCC_OscConfig+0x478>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fe f9e8 	bl	8002c18 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484c:	f7fe f9e4 	bl	8002c18 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e087      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	4b27      	ldr	r3, [pc, #156]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	3b01      	subs	r3, #1
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	491b      	ldr	r1, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004894:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <HAL_RCC_OscConfig+0x478>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fe f9bd 	bl	8002c18 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fe f9b9 	bl	8002c18 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e05c      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b4:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x416>
 80048c0:	e054      	b.n	800496c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c2:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <HAL_RCC_OscConfig+0x478>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fe f9a6 	bl	8002c18 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fe f9a2 	bl	8002c18 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e045      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x444>
 80048ee:	e03d      	b.n	800496c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e038      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
 80048fc:	40023800 	.word	0x40023800
 8004900:	40007000 	.word	0x40007000
 8004904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004908:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <HAL_RCC_OscConfig+0x4ec>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d028      	beq.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d121      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	429a      	cmp	r2, r3
 8004930:	d11a      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004938:	4013      	ands	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800493e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004940:	4293      	cmp	r3, r2
 8004942:	d111      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	3b01      	subs	r3, #1
 8004952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d107      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800

0800497c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0cc      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b68      	ldr	r3, [pc, #416]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d90c      	bls.n	80049b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b65      	ldr	r3, [pc, #404]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b63      	ldr	r3, [pc, #396]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0b8      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d020      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d0:	4b59      	ldr	r3, [pc, #356]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4a58      	ldr	r2, [pc, #352]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e8:	4b53      	ldr	r3, [pc, #332]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a52      	ldr	r2, [pc, #328]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f4:	4b50      	ldr	r3, [pc, #320]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	494d      	ldr	r1, [pc, #308]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d044      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b47      	ldr	r3, [pc, #284]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d119      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e07f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e067      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5a:	4b37      	ldr	r3, [pc, #220]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4934      	ldr	r1, [pc, #208]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7fe f8d4 	bl	8002c18 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fe f8d0 	bl	8002c18 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e04f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 020c 	and.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1eb      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b25      	ldr	r3, [pc, #148]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d20c      	bcs.n	8004ac4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b22      	ldr	r3, [pc, #136]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b20      	ldr	r3, [pc, #128]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e032      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4916      	ldr	r1, [pc, #88]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	490e      	ldr	r1, [pc, #56]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b02:	f000 f821 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8004b06:	4602      	mov	r2, r0
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	490a      	ldr	r1, [pc, #40]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 8004b14:	5ccb      	ldrb	r3, [r1, r3]
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b1e:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe f834 	bl	8002b90 <HAL_InitTick>

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40023c00 	.word	0x40023c00
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	08008798 	.word	0x08008798
 8004b40:	20000000 	.word	0x20000000
 8004b44:	20000004 	.word	0x20000004

08004b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b090      	sub	sp, #64	@ 0x40
 8004b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b60:	4b59      	ldr	r3, [pc, #356]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d00d      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x40>
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	f200 80a1 	bhi.w	8004cb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x34>
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b7a:	e09b      	b.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b7c:	4b53      	ldr	r3, [pc, #332]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8004b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b80:	e09b      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b82:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b86:	e098      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b88:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b92:	4b4d      	ldr	r3, [pc, #308]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	623b      	str	r3, [r7, #32]
 8004ba8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4b47      	ldr	r3, [pc, #284]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bb4:	fb03 f201 	mul.w	r2, r3, r1
 8004bb8:	2300      	movs	r3, #0
 8004bba:	fb00 f303 	mul.w	r3, r0, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	4a43      	ldr	r2, [pc, #268]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bc2:	fba0 1202 	umull	r1, r2, r0, r2
 8004bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bc8:	460a      	mov	r2, r1
 8004bca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bce:	4413      	add	r3, r2
 8004bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	61fa      	str	r2, [r7, #28]
 8004bda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004be2:	f7fc f94f 	bl	8000e84 <__aeabi_uldivmod>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4613      	mov	r3, r2
 8004bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bee:	e053      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf0:	4b35      	ldr	r3, [pc, #212]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	617a      	str	r2, [r7, #20]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c02:	f04f 0b00 	mov.w	fp, #0
 8004c06:	4652      	mov	r2, sl
 8004c08:	465b      	mov	r3, fp
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	0159      	lsls	r1, r3, #5
 8004c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c18:	0150      	lsls	r0, r2, #5
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	ebb2 080a 	subs.w	r8, r2, sl
 8004c22:	eb63 090b 	sbc.w	r9, r3, fp
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c3a:	ebb2 0408 	subs.w	r4, r2, r8
 8004c3e:	eb63 0509 	sbc.w	r5, r3, r9
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	00eb      	lsls	r3, r5, #3
 8004c4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c50:	00e2      	lsls	r2, r4, #3
 8004c52:	4614      	mov	r4, r2
 8004c54:	461d      	mov	r5, r3
 8004c56:	eb14 030a 	adds.w	r3, r4, sl
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	eb45 030b 	adc.w	r3, r5, fp
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	028b      	lsls	r3, r1, #10
 8004c72:	4621      	mov	r1, r4
 8004c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c78:	4621      	mov	r1, r4
 8004c7a:	028a      	lsls	r2, r1, #10
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c82:	2200      	movs	r2, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	60fa      	str	r2, [r7, #12]
 8004c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c8c:	f7fc f8fa 	bl	8000e84 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8004cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3740      	adds	r7, #64	@ 0x40
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	00f42400 	.word	0x00f42400
 8004cd0:	017d7840 	.word	0x017d7840

08004cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000000 	.word	0x20000000

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cf0:	f7ff fff0 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4903      	ldr	r1, [pc, #12]	@ (8004d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	080087a8 	.word	0x080087a8

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d18:	f7ff ffdc 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0b5b      	lsrs	r3, r3, #13
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4903      	ldr	r1, [pc, #12]	@ (8004d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	080087a8 	.word	0x080087a8

08004d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e042      	b.n	8004dd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fd fd22 	bl	80027ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	@ 0x24
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fa09 	bl	8005198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d175      	bne.n	8004ee8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_UART_Transmit+0x2c>
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e06e      	b.n	8004eea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2221      	movs	r2, #33	@ 0x21
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1a:	f7fd fefd 	bl	8002c18 <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e34:	d108      	bne.n	8004e48 <HAL_UART_Transmit+0x6c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e003      	b.n	8004e50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e50:	e02e      	b.n	8004eb0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2180      	movs	r1, #128	@ 0x80
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f8df 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e03a      	b.n	8004eea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e007      	b.n	8004ea2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1cb      	bne.n	8004e52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2140      	movs	r1, #64	@ 0x40
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f8ab 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e000      	b.n	8004eea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
  }
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b08a      	sub	sp, #40	@ 0x28
 8004ef6:	af02      	add	r7, sp, #8
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	f040 8081 	bne.w	8005016 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_UART_Receive+0x2e>
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e079      	b.n	8005018 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2222      	movs	r2, #34	@ 0x22
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f38:	f7fd fe6e 	bl	8002c18 <HAL_GetTick>
 8004f3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f52:	d108      	bne.n	8004f66 <HAL_UART_Receive+0x74>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d104      	bne.n	8004f66 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e003      	b.n	8004f6e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004f6e:	e047      	b.n	8005000 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2200      	movs	r2, #0
 8004f78:	2120      	movs	r1, #32
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f850 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e042      	b.n	8005018 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10c      	bne.n	8004fb2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	3302      	adds	r3, #2
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	e01f      	b.n	8004ff2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fba:	d007      	beq.n	8004fcc <HAL_UART_Receive+0xda>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <HAL_UART_Receive+0xe8>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	e008      	b.n	8004fec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1b2      	bne.n	8004f70 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005016:	2302      	movs	r3, #2
  }
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005030:	e03b      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d037      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fd fded 	bl	8002c18 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <UART_WaitOnFlagUntilTimeout+0x30>
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e03a      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d023      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b80      	cmp	r3, #128	@ 0x80
 8005066:	d020      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b40      	cmp	r3, #64	@ 0x40
 800506c:	d01d      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b08      	cmp	r3, #8
 800507a:	d116      	bne.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f81d 	bl	80050d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2208      	movs	r2, #8
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00f      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d0b4      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b095      	sub	sp, #84	@ 0x54
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80050fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e5      	bne.n	80050da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	61fb      	str	r3, [r7, #28]
   return(result);
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e5      	bne.n	800510e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	2b01      	cmp	r3, #1
 8005148:	d119      	bne.n	800517e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	60bb      	str	r3, [r7, #8]
   return(result);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f023 0310 	bic.w	r3, r3, #16
 8005160:	647b      	str	r3, [r7, #68]	@ 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800516a:	61ba      	str	r2, [r7, #24]
 800516c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6979      	ldr	r1, [r7, #20]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	613b      	str	r3, [r7, #16]
   return(result);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800518c:	bf00      	nop
 800518e:	3754      	adds	r7, #84	@ 0x54
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800519c:	b0c0      	sub	sp, #256	@ 0x100
 800519e:	af00      	add	r7, sp, #0
 80051a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	68d9      	ldr	r1, [r3, #12]
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	ea40 0301 	orr.w	r3, r0, r1
 80051c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051f0:	f021 010c 	bic.w	r1, r1, #12
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051fe:	430b      	orrs	r3, r1
 8005200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005212:	6999      	ldr	r1, [r3, #24]
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	ea40 0301 	orr.w	r3, r0, r1
 800521e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4b8f      	ldr	r3, [pc, #572]	@ (8005464 <UART_SetConfig+0x2cc>)
 8005228:	429a      	cmp	r2, r3
 800522a:	d005      	beq.n	8005238 <UART_SetConfig+0xa0>
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b8d      	ldr	r3, [pc, #564]	@ (8005468 <UART_SetConfig+0x2d0>)
 8005234:	429a      	cmp	r2, r3
 8005236:	d104      	bne.n	8005242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005238:	f7ff fd6c 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 800523c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005240:	e003      	b.n	800524a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005242:	f7ff fd53 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8005246:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005254:	f040 810c 	bne.w	8005470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800525c:	2200      	movs	r2, #0
 800525e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005262:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800526a:	4622      	mov	r2, r4
 800526c:	462b      	mov	r3, r5
 800526e:	1891      	adds	r1, r2, r2
 8005270:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005272:	415b      	adcs	r3, r3
 8005274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800527a:	4621      	mov	r1, r4
 800527c:	eb12 0801 	adds.w	r8, r2, r1
 8005280:	4629      	mov	r1, r5
 8005282:	eb43 0901 	adc.w	r9, r3, r1
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800529a:	4690      	mov	r8, r2
 800529c:	4699      	mov	r9, r3
 800529e:	4623      	mov	r3, r4
 80052a0:	eb18 0303 	adds.w	r3, r8, r3
 80052a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052a8:	462b      	mov	r3, r5
 80052aa:	eb49 0303 	adc.w	r3, r9, r3
 80052ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052c6:	460b      	mov	r3, r1
 80052c8:	18db      	adds	r3, r3, r3
 80052ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80052cc:	4613      	mov	r3, r2
 80052ce:	eb42 0303 	adc.w	r3, r2, r3
 80052d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052dc:	f7fb fdd2 	bl	8000e84 <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4b61      	ldr	r3, [pc, #388]	@ (800546c <UART_SetConfig+0x2d4>)
 80052e6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	011c      	lsls	r4, r3, #4
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	1891      	adds	r1, r2, r2
 8005306:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005308:	415b      	adcs	r3, r3
 800530a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800530c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005310:	4641      	mov	r1, r8
 8005312:	eb12 0a01 	adds.w	sl, r2, r1
 8005316:	4649      	mov	r1, r9
 8005318:	eb43 0b01 	adc.w	fp, r3, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800532c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005330:	4692      	mov	sl, r2
 8005332:	469b      	mov	fp, r3
 8005334:	4643      	mov	r3, r8
 8005336:	eb1a 0303 	adds.w	r3, sl, r3
 800533a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800533e:	464b      	mov	r3, r9
 8005340:	eb4b 0303 	adc.w	r3, fp, r3
 8005344:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005354:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800535c:	460b      	mov	r3, r1
 800535e:	18db      	adds	r3, r3, r3
 8005360:	643b      	str	r3, [r7, #64]	@ 0x40
 8005362:	4613      	mov	r3, r2
 8005364:	eb42 0303 	adc.w	r3, r2, r3
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
 800536a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800536e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005372:	f7fb fd87 	bl	8000e84 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4611      	mov	r1, r2
 800537c:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <UART_SetConfig+0x2d4>)
 800537e:	fba3 2301 	umull	r2, r3, r3, r1
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2264      	movs	r2, #100	@ 0x64
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	1acb      	subs	r3, r1, r3
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005392:	4b36      	ldr	r3, [pc, #216]	@ (800546c <UART_SetConfig+0x2d4>)
 8005394:	fba3 2302 	umull	r2, r3, r3, r2
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053a0:	441c      	add	r4, r3
 80053a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	1891      	adds	r1, r2, r2
 80053ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053bc:	415b      	adcs	r3, r3
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053c4:	4641      	mov	r1, r8
 80053c6:	1851      	adds	r1, r2, r1
 80053c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80053ca:	4649      	mov	r1, r9
 80053cc:	414b      	adcs	r3, r1
 80053ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053dc:	4659      	mov	r1, fp
 80053de:	00cb      	lsls	r3, r1, #3
 80053e0:	4651      	mov	r1, sl
 80053e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053e6:	4651      	mov	r1, sl
 80053e8:	00ca      	lsls	r2, r1, #3
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	4642      	mov	r2, r8
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053f8:	464b      	mov	r3, r9
 80053fa:	460a      	mov	r2, r1
 80053fc:	eb42 0303 	adc.w	r3, r2, r3
 8005400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005410:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005418:	460b      	mov	r3, r1
 800541a:	18db      	adds	r3, r3, r3
 800541c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541e:	4613      	mov	r3, r2
 8005420:	eb42 0303 	adc.w	r3, r2, r3
 8005424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800542a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800542e:	f7fb fd29 	bl	8000e84 <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <UART_SetConfig+0x2d4>)
 8005438:	fba3 1302 	umull	r1, r3, r3, r2
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	2164      	movs	r1, #100	@ 0x64
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	3332      	adds	r3, #50	@ 0x32
 800544a:	4a08      	ldr	r2, [pc, #32]	@ (800546c <UART_SetConfig+0x2d4>)
 800544c:	fba2 2303 	umull	r2, r3, r2, r3
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	f003 0207 	and.w	r2, r3, #7
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4422      	add	r2, r4
 800545e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005460:	e106      	b.n	8005670 <UART_SetConfig+0x4d8>
 8005462:	bf00      	nop
 8005464:	40011000 	.word	0x40011000
 8005468:	40011400 	.word	0x40011400
 800546c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005474:	2200      	movs	r2, #0
 8005476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800547a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800547e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005482:	4642      	mov	r2, r8
 8005484:	464b      	mov	r3, r9
 8005486:	1891      	adds	r1, r2, r2
 8005488:	6239      	str	r1, [r7, #32]
 800548a:	415b      	adcs	r3, r3
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
 800548e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005492:	4641      	mov	r1, r8
 8005494:	1854      	adds	r4, r2, r1
 8005496:	4649      	mov	r1, r9
 8005498:	eb43 0501 	adc.w	r5, r3, r1
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	00eb      	lsls	r3, r5, #3
 80054a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054aa:	00e2      	lsls	r2, r4, #3
 80054ac:	4614      	mov	r4, r2
 80054ae:	461d      	mov	r5, r3
 80054b0:	4643      	mov	r3, r8
 80054b2:	18e3      	adds	r3, r4, r3
 80054b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054b8:	464b      	mov	r3, r9
 80054ba:	eb45 0303 	adc.w	r3, r5, r3
 80054be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054de:	4629      	mov	r1, r5
 80054e0:	008b      	lsls	r3, r1, #2
 80054e2:	4621      	mov	r1, r4
 80054e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e8:	4621      	mov	r1, r4
 80054ea:	008a      	lsls	r2, r1, #2
 80054ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054f0:	f7fb fcc8 	bl	8000e84 <__aeabi_uldivmod>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4b60      	ldr	r3, [pc, #384]	@ (800567c <UART_SetConfig+0x4e4>)
 80054fa:	fba3 2302 	umull	r2, r3, r3, r2
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	011c      	lsls	r4, r3, #4
 8005502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005506:	2200      	movs	r2, #0
 8005508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800550c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	1891      	adds	r1, r2, r2
 800551a:	61b9      	str	r1, [r7, #24]
 800551c:	415b      	adcs	r3, r3
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005524:	4641      	mov	r1, r8
 8005526:	1851      	adds	r1, r2, r1
 8005528:	6139      	str	r1, [r7, #16]
 800552a:	4649      	mov	r1, r9
 800552c:	414b      	adcs	r3, r1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800553c:	4659      	mov	r1, fp
 800553e:	00cb      	lsls	r3, r1, #3
 8005540:	4651      	mov	r1, sl
 8005542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005546:	4651      	mov	r1, sl
 8005548:	00ca      	lsls	r2, r1, #3
 800554a:	4610      	mov	r0, r2
 800554c:	4619      	mov	r1, r3
 800554e:	4603      	mov	r3, r0
 8005550:	4642      	mov	r2, r8
 8005552:	189b      	adds	r3, r3, r2
 8005554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005558:	464b      	mov	r3, r9
 800555a:	460a      	mov	r2, r1
 800555c:	eb42 0303 	adc.w	r3, r2, r3
 8005560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800556e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800557c:	4649      	mov	r1, r9
 800557e:	008b      	lsls	r3, r1, #2
 8005580:	4641      	mov	r1, r8
 8005582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005586:	4641      	mov	r1, r8
 8005588:	008a      	lsls	r2, r1, #2
 800558a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800558e:	f7fb fc79 	bl	8000e84 <__aeabi_uldivmod>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4611      	mov	r1, r2
 8005598:	4b38      	ldr	r3, [pc, #224]	@ (800567c <UART_SetConfig+0x4e4>)
 800559a:	fba3 2301 	umull	r2, r3, r3, r1
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	2264      	movs	r2, #100	@ 0x64
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	1acb      	subs	r3, r1, r3
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	3332      	adds	r3, #50	@ 0x32
 80055ac:	4a33      	ldr	r2, [pc, #204]	@ (800567c <UART_SetConfig+0x4e4>)
 80055ae:	fba2 2303 	umull	r2, r3, r2, r3
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055b8:	441c      	add	r4, r3
 80055ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055be:	2200      	movs	r2, #0
 80055c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80055c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80055c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	1891      	adds	r1, r2, r2
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	415b      	adcs	r3, r3
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055d8:	4641      	mov	r1, r8
 80055da:	1851      	adds	r1, r2, r1
 80055dc:	6039      	str	r1, [r7, #0]
 80055de:	4649      	mov	r1, r9
 80055e0:	414b      	adcs	r3, r1
 80055e2:	607b      	str	r3, [r7, #4]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055f0:	4659      	mov	r1, fp
 80055f2:	00cb      	lsls	r3, r1, #3
 80055f4:	4651      	mov	r1, sl
 80055f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055fa:	4651      	mov	r1, sl
 80055fc:	00ca      	lsls	r2, r1, #3
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	4603      	mov	r3, r0
 8005604:	4642      	mov	r2, r8
 8005606:	189b      	adds	r3, r3, r2
 8005608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800560a:	464b      	mov	r3, r9
 800560c:	460a      	mov	r2, r1
 800560e:	eb42 0303 	adc.w	r3, r2, r3
 8005612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	663b      	str	r3, [r7, #96]	@ 0x60
 800561e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800562c:	4649      	mov	r1, r9
 800562e:	008b      	lsls	r3, r1, #2
 8005630:	4641      	mov	r1, r8
 8005632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005636:	4641      	mov	r1, r8
 8005638:	008a      	lsls	r2, r1, #2
 800563a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800563e:	f7fb fc21 	bl	8000e84 <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <UART_SetConfig+0x4e4>)
 8005648:	fba3 1302 	umull	r1, r3, r3, r2
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	2164      	movs	r1, #100	@ 0x64
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	3332      	adds	r3, #50	@ 0x32
 800565a:	4a08      	ldr	r2, [pc, #32]	@ (800567c <UART_SetConfig+0x4e4>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	f003 020f 	and.w	r2, r3, #15
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4422      	add	r2, r4
 800566e:	609a      	str	r2, [r3, #8]
}
 8005670:	bf00      	nop
 8005672:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005676:	46bd      	mov	sp, r7
 8005678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800567c:	51eb851f 	.word	0x51eb851f

08005680 <__cvt>:
 8005680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005684:	ec57 6b10 	vmov	r6, r7, d0
 8005688:	2f00      	cmp	r7, #0
 800568a:	460c      	mov	r4, r1
 800568c:	4619      	mov	r1, r3
 800568e:	463b      	mov	r3, r7
 8005690:	bfbb      	ittet	lt
 8005692:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005696:	461f      	movlt	r7, r3
 8005698:	2300      	movge	r3, #0
 800569a:	232d      	movlt	r3, #45	@ 0x2d
 800569c:	700b      	strb	r3, [r1, #0]
 800569e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80056a4:	4691      	mov	r9, r2
 80056a6:	f023 0820 	bic.w	r8, r3, #32
 80056aa:	bfbc      	itt	lt
 80056ac:	4632      	movlt	r2, r6
 80056ae:	4616      	movlt	r6, r2
 80056b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056b4:	d005      	beq.n	80056c2 <__cvt+0x42>
 80056b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056ba:	d100      	bne.n	80056be <__cvt+0x3e>
 80056bc:	3401      	adds	r4, #1
 80056be:	2102      	movs	r1, #2
 80056c0:	e000      	b.n	80056c4 <__cvt+0x44>
 80056c2:	2103      	movs	r1, #3
 80056c4:	ab03      	add	r3, sp, #12
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	ab02      	add	r3, sp, #8
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	ec47 6b10 	vmov	d0, r6, r7
 80056d0:	4653      	mov	r3, sl
 80056d2:	4622      	mov	r2, r4
 80056d4:	f000 fe90 	bl	80063f8 <_dtoa_r>
 80056d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056dc:	4605      	mov	r5, r0
 80056de:	d119      	bne.n	8005714 <__cvt+0x94>
 80056e0:	f019 0f01 	tst.w	r9, #1
 80056e4:	d00e      	beq.n	8005704 <__cvt+0x84>
 80056e6:	eb00 0904 	add.w	r9, r0, r4
 80056ea:	2200      	movs	r2, #0
 80056ec:	2300      	movs	r3, #0
 80056ee:	4630      	mov	r0, r6
 80056f0:	4639      	mov	r1, r7
 80056f2:	f7fb f9f9 	bl	8000ae8 <__aeabi_dcmpeq>
 80056f6:	b108      	cbz	r0, 80056fc <__cvt+0x7c>
 80056f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80056fc:	2230      	movs	r2, #48	@ 0x30
 80056fe:	9b03      	ldr	r3, [sp, #12]
 8005700:	454b      	cmp	r3, r9
 8005702:	d31e      	bcc.n	8005742 <__cvt+0xc2>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005708:	1b5b      	subs	r3, r3, r5
 800570a:	4628      	mov	r0, r5
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	b004      	add	sp, #16
 8005710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005714:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005718:	eb00 0904 	add.w	r9, r0, r4
 800571c:	d1e5      	bne.n	80056ea <__cvt+0x6a>
 800571e:	7803      	ldrb	r3, [r0, #0]
 8005720:	2b30      	cmp	r3, #48	@ 0x30
 8005722:	d10a      	bne.n	800573a <__cvt+0xba>
 8005724:	2200      	movs	r2, #0
 8005726:	2300      	movs	r3, #0
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f7fb f9dc 	bl	8000ae8 <__aeabi_dcmpeq>
 8005730:	b918      	cbnz	r0, 800573a <__cvt+0xba>
 8005732:	f1c4 0401 	rsb	r4, r4, #1
 8005736:	f8ca 4000 	str.w	r4, [sl]
 800573a:	f8da 3000 	ldr.w	r3, [sl]
 800573e:	4499      	add	r9, r3
 8005740:	e7d3      	b.n	80056ea <__cvt+0x6a>
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	9103      	str	r1, [sp, #12]
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	e7d9      	b.n	80056fe <__cvt+0x7e>

0800574a <__exponent>:
 800574a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800574c:	2900      	cmp	r1, #0
 800574e:	bfba      	itte	lt
 8005750:	4249      	neglt	r1, r1
 8005752:	232d      	movlt	r3, #45	@ 0x2d
 8005754:	232b      	movge	r3, #43	@ 0x2b
 8005756:	2909      	cmp	r1, #9
 8005758:	7002      	strb	r2, [r0, #0]
 800575a:	7043      	strb	r3, [r0, #1]
 800575c:	dd29      	ble.n	80057b2 <__exponent+0x68>
 800575e:	f10d 0307 	add.w	r3, sp, #7
 8005762:	461d      	mov	r5, r3
 8005764:	270a      	movs	r7, #10
 8005766:	461a      	mov	r2, r3
 8005768:	fbb1 f6f7 	udiv	r6, r1, r7
 800576c:	fb07 1416 	mls	r4, r7, r6, r1
 8005770:	3430      	adds	r4, #48	@ 0x30
 8005772:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005776:	460c      	mov	r4, r1
 8005778:	2c63      	cmp	r4, #99	@ 0x63
 800577a:	f103 33ff 	add.w	r3, r3, #4294967295
 800577e:	4631      	mov	r1, r6
 8005780:	dcf1      	bgt.n	8005766 <__exponent+0x1c>
 8005782:	3130      	adds	r1, #48	@ 0x30
 8005784:	1e94      	subs	r4, r2, #2
 8005786:	f803 1c01 	strb.w	r1, [r3, #-1]
 800578a:	1c41      	adds	r1, r0, #1
 800578c:	4623      	mov	r3, r4
 800578e:	42ab      	cmp	r3, r5
 8005790:	d30a      	bcc.n	80057a8 <__exponent+0x5e>
 8005792:	f10d 0309 	add.w	r3, sp, #9
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	42ac      	cmp	r4, r5
 800579a:	bf88      	it	hi
 800579c:	2300      	movhi	r3, #0
 800579e:	3302      	adds	r3, #2
 80057a0:	4403      	add	r3, r0
 80057a2:	1a18      	subs	r0, r3, r0
 80057a4:	b003      	add	sp, #12
 80057a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057b0:	e7ed      	b.n	800578e <__exponent+0x44>
 80057b2:	2330      	movs	r3, #48	@ 0x30
 80057b4:	3130      	adds	r1, #48	@ 0x30
 80057b6:	7083      	strb	r3, [r0, #2]
 80057b8:	70c1      	strb	r1, [r0, #3]
 80057ba:	1d03      	adds	r3, r0, #4
 80057bc:	e7f1      	b.n	80057a2 <__exponent+0x58>
	...

080057c0 <_printf_float>:
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	b08d      	sub	sp, #52	@ 0x34
 80057c6:	460c      	mov	r4, r1
 80057c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80057cc:	4616      	mov	r6, r2
 80057ce:	461f      	mov	r7, r3
 80057d0:	4605      	mov	r5, r0
 80057d2:	f000 fd11 	bl	80061f8 <_localeconv_r>
 80057d6:	6803      	ldr	r3, [r0, #0]
 80057d8:	9304      	str	r3, [sp, #16]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fa fd58 	bl	8000290 <strlen>
 80057e0:	2300      	movs	r3, #0
 80057e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80057e4:	f8d8 3000 	ldr.w	r3, [r8]
 80057e8:	9005      	str	r0, [sp, #20]
 80057ea:	3307      	adds	r3, #7
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	f103 0208 	add.w	r2, r3, #8
 80057f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057f8:	f8d4 b000 	ldr.w	fp, [r4]
 80057fc:	f8c8 2000 	str.w	r2, [r8]
 8005800:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005804:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005808:	9307      	str	r3, [sp, #28]
 800580a:	f8cd 8018 	str.w	r8, [sp, #24]
 800580e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005816:	4b9c      	ldr	r3, [pc, #624]	@ (8005a88 <_printf_float+0x2c8>)
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	f7fb f996 	bl	8000b4c <__aeabi_dcmpun>
 8005820:	bb70      	cbnz	r0, 8005880 <_printf_float+0xc0>
 8005822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005826:	4b98      	ldr	r3, [pc, #608]	@ (8005a88 <_printf_float+0x2c8>)
 8005828:	f04f 32ff 	mov.w	r2, #4294967295
 800582c:	f7fb f970 	bl	8000b10 <__aeabi_dcmple>
 8005830:	bb30      	cbnz	r0, 8005880 <_printf_float+0xc0>
 8005832:	2200      	movs	r2, #0
 8005834:	2300      	movs	r3, #0
 8005836:	4640      	mov	r0, r8
 8005838:	4649      	mov	r1, r9
 800583a:	f7fb f95f 	bl	8000afc <__aeabi_dcmplt>
 800583e:	b110      	cbz	r0, 8005846 <_printf_float+0x86>
 8005840:	232d      	movs	r3, #45	@ 0x2d
 8005842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005846:	4a91      	ldr	r2, [pc, #580]	@ (8005a8c <_printf_float+0x2cc>)
 8005848:	4b91      	ldr	r3, [pc, #580]	@ (8005a90 <_printf_float+0x2d0>)
 800584a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800584e:	bf8c      	ite	hi
 8005850:	4690      	movhi	r8, r2
 8005852:	4698      	movls	r8, r3
 8005854:	2303      	movs	r3, #3
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	f02b 0304 	bic.w	r3, fp, #4
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	f04f 0900 	mov.w	r9, #0
 8005862:	9700      	str	r7, [sp, #0]
 8005864:	4633      	mov	r3, r6
 8005866:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005868:	4621      	mov	r1, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f9d2 	bl	8005c14 <_printf_common>
 8005870:	3001      	adds	r0, #1
 8005872:	f040 808d 	bne.w	8005990 <_printf_float+0x1d0>
 8005876:	f04f 30ff 	mov.w	r0, #4294967295
 800587a:	b00d      	add	sp, #52	@ 0x34
 800587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005880:	4642      	mov	r2, r8
 8005882:	464b      	mov	r3, r9
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fb f960 	bl	8000b4c <__aeabi_dcmpun>
 800588c:	b140      	cbz	r0, 80058a0 <_printf_float+0xe0>
 800588e:	464b      	mov	r3, r9
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfbc      	itt	lt
 8005894:	232d      	movlt	r3, #45	@ 0x2d
 8005896:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800589a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a94 <_printf_float+0x2d4>)
 800589c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a98 <_printf_float+0x2d8>)
 800589e:	e7d4      	b.n	800584a <_printf_float+0x8a>
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80058a6:	9206      	str	r2, [sp, #24]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	d13b      	bne.n	8005924 <_printf_float+0x164>
 80058ac:	2306      	movs	r3, #6
 80058ae:	6063      	str	r3, [r4, #4]
 80058b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80058b4:	2300      	movs	r3, #0
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	9303      	str	r3, [sp, #12]
 80058ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80058bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058c0:	ab09      	add	r3, sp, #36	@ 0x24
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	6861      	ldr	r1, [r4, #4]
 80058c6:	ec49 8b10 	vmov	d0, r8, r9
 80058ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80058ce:	4628      	mov	r0, r5
 80058d0:	f7ff fed6 	bl	8005680 <__cvt>
 80058d4:	9b06      	ldr	r3, [sp, #24]
 80058d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058d8:	2b47      	cmp	r3, #71	@ 0x47
 80058da:	4680      	mov	r8, r0
 80058dc:	d129      	bne.n	8005932 <_printf_float+0x172>
 80058de:	1cc8      	adds	r0, r1, #3
 80058e0:	db02      	blt.n	80058e8 <_printf_float+0x128>
 80058e2:	6863      	ldr	r3, [r4, #4]
 80058e4:	4299      	cmp	r1, r3
 80058e6:	dd41      	ble.n	800596c <_printf_float+0x1ac>
 80058e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80058ec:	fa5f fa8a 	uxtb.w	sl, sl
 80058f0:	3901      	subs	r1, #1
 80058f2:	4652      	mov	r2, sl
 80058f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80058fa:	f7ff ff26 	bl	800574a <__exponent>
 80058fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005900:	1813      	adds	r3, r2, r0
 8005902:	2a01      	cmp	r2, #1
 8005904:	4681      	mov	r9, r0
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	dc02      	bgt.n	8005910 <_printf_float+0x150>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	07d2      	lsls	r2, r2, #31
 800590e:	d501      	bpl.n	8005914 <_printf_float+0x154>
 8005910:	3301      	adds	r3, #1
 8005912:	6123      	str	r3, [r4, #16]
 8005914:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0a2      	beq.n	8005862 <_printf_float+0xa2>
 800591c:	232d      	movs	r3, #45	@ 0x2d
 800591e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005922:	e79e      	b.n	8005862 <_printf_float+0xa2>
 8005924:	9a06      	ldr	r2, [sp, #24]
 8005926:	2a47      	cmp	r2, #71	@ 0x47
 8005928:	d1c2      	bne.n	80058b0 <_printf_float+0xf0>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1c0      	bne.n	80058b0 <_printf_float+0xf0>
 800592e:	2301      	movs	r3, #1
 8005930:	e7bd      	b.n	80058ae <_printf_float+0xee>
 8005932:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005936:	d9db      	bls.n	80058f0 <_printf_float+0x130>
 8005938:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800593c:	d118      	bne.n	8005970 <_printf_float+0x1b0>
 800593e:	2900      	cmp	r1, #0
 8005940:	6863      	ldr	r3, [r4, #4]
 8005942:	dd0b      	ble.n	800595c <_printf_float+0x19c>
 8005944:	6121      	str	r1, [r4, #16]
 8005946:	b913      	cbnz	r3, 800594e <_printf_float+0x18e>
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	07d0      	lsls	r0, r2, #31
 800594c:	d502      	bpl.n	8005954 <_printf_float+0x194>
 800594e:	3301      	adds	r3, #1
 8005950:	440b      	add	r3, r1
 8005952:	6123      	str	r3, [r4, #16]
 8005954:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005956:	f04f 0900 	mov.w	r9, #0
 800595a:	e7db      	b.n	8005914 <_printf_float+0x154>
 800595c:	b913      	cbnz	r3, 8005964 <_printf_float+0x1a4>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	07d2      	lsls	r2, r2, #31
 8005962:	d501      	bpl.n	8005968 <_printf_float+0x1a8>
 8005964:	3302      	adds	r3, #2
 8005966:	e7f4      	b.n	8005952 <_printf_float+0x192>
 8005968:	2301      	movs	r3, #1
 800596a:	e7f2      	b.n	8005952 <_printf_float+0x192>
 800596c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005972:	4299      	cmp	r1, r3
 8005974:	db05      	blt.n	8005982 <_printf_float+0x1c2>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	6121      	str	r1, [r4, #16]
 800597a:	07d8      	lsls	r0, r3, #31
 800597c:	d5ea      	bpl.n	8005954 <_printf_float+0x194>
 800597e:	1c4b      	adds	r3, r1, #1
 8005980:	e7e7      	b.n	8005952 <_printf_float+0x192>
 8005982:	2900      	cmp	r1, #0
 8005984:	bfd4      	ite	le
 8005986:	f1c1 0202 	rsble	r2, r1, #2
 800598a:	2201      	movgt	r2, #1
 800598c:	4413      	add	r3, r2
 800598e:	e7e0      	b.n	8005952 <_printf_float+0x192>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	055a      	lsls	r2, r3, #21
 8005994:	d407      	bmi.n	80059a6 <_printf_float+0x1e6>
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	4642      	mov	r2, r8
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	d12b      	bne.n	80059fc <_printf_float+0x23c>
 80059a4:	e767      	b.n	8005876 <_printf_float+0xb6>
 80059a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059aa:	f240 80dd 	bls.w	8005b68 <_printf_float+0x3a8>
 80059ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059b2:	2200      	movs	r2, #0
 80059b4:	2300      	movs	r3, #0
 80059b6:	f7fb f897 	bl	8000ae8 <__aeabi_dcmpeq>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d033      	beq.n	8005a26 <_printf_float+0x266>
 80059be:	4a37      	ldr	r2, [pc, #220]	@ (8005a9c <_printf_float+0x2dc>)
 80059c0:	2301      	movs	r3, #1
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f af54 	beq.w	8005876 <_printf_float+0xb6>
 80059ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80059d2:	4543      	cmp	r3, r8
 80059d4:	db02      	blt.n	80059dc <_printf_float+0x21c>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	07d8      	lsls	r0, r3, #31
 80059da:	d50f      	bpl.n	80059fc <_printf_float+0x23c>
 80059dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059e0:	4631      	mov	r1, r6
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	f43f af45 	beq.w	8005876 <_printf_float+0xb6>
 80059ec:	f04f 0900 	mov.w	r9, #0
 80059f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80059f4:	f104 0a1a 	add.w	sl, r4, #26
 80059f8:	45c8      	cmp	r8, r9
 80059fa:	dc09      	bgt.n	8005a10 <_printf_float+0x250>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	079b      	lsls	r3, r3, #30
 8005a00:	f100 8103 	bmi.w	8005c0a <_printf_float+0x44a>
 8005a04:	68e0      	ldr	r0, [r4, #12]
 8005a06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a08:	4298      	cmp	r0, r3
 8005a0a:	bfb8      	it	lt
 8005a0c:	4618      	movlt	r0, r3
 8005a0e:	e734      	b.n	800587a <_printf_float+0xba>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4652      	mov	r2, sl
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f af2b 	beq.w	8005876 <_printf_float+0xb6>
 8005a20:	f109 0901 	add.w	r9, r9, #1
 8005a24:	e7e8      	b.n	80059f8 <_printf_float+0x238>
 8005a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dc39      	bgt.n	8005aa0 <_printf_float+0x2e0>
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <_printf_float+0x2dc>)
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af1d 	beq.w	8005876 <_printf_float+0xb6>
 8005a3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a40:	ea59 0303 	orrs.w	r3, r9, r3
 8005a44:	d102      	bne.n	8005a4c <_printf_float+0x28c>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	07d9      	lsls	r1, r3, #31
 8005a4a:	d5d7      	bpl.n	80059fc <_printf_float+0x23c>
 8005a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a50:	4631      	mov	r1, r6
 8005a52:	4628      	mov	r0, r5
 8005a54:	47b8      	blx	r7
 8005a56:	3001      	adds	r0, #1
 8005a58:	f43f af0d 	beq.w	8005876 <_printf_float+0xb6>
 8005a5c:	f04f 0a00 	mov.w	sl, #0
 8005a60:	f104 0b1a 	add.w	fp, r4, #26
 8005a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a66:	425b      	negs	r3, r3
 8005a68:	4553      	cmp	r3, sl
 8005a6a:	dc01      	bgt.n	8005a70 <_printf_float+0x2b0>
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	e793      	b.n	8005998 <_printf_float+0x1d8>
 8005a70:	2301      	movs	r3, #1
 8005a72:	465a      	mov	r2, fp
 8005a74:	4631      	mov	r1, r6
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b8      	blx	r7
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	f43f aefb 	beq.w	8005876 <_printf_float+0xb6>
 8005a80:	f10a 0a01 	add.w	sl, sl, #1
 8005a84:	e7ee      	b.n	8005a64 <_printf_float+0x2a4>
 8005a86:	bf00      	nop
 8005a88:	7fefffff 	.word	0x7fefffff
 8005a8c:	080087b4 	.word	0x080087b4
 8005a90:	080087b0 	.word	0x080087b0
 8005a94:	080087bc 	.word	0x080087bc
 8005a98:	080087b8 	.word	0x080087b8
 8005a9c:	080087c0 	.word	0x080087c0
 8005aa0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005aa2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005aa6:	4553      	cmp	r3, sl
 8005aa8:	bfa8      	it	ge
 8005aaa:	4653      	movge	r3, sl
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	4699      	mov	r9, r3
 8005ab0:	dc36      	bgt.n	8005b20 <_printf_float+0x360>
 8005ab2:	f04f 0b00 	mov.w	fp, #0
 8005ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aba:	f104 021a 	add.w	r2, r4, #26
 8005abe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ac0:	9306      	str	r3, [sp, #24]
 8005ac2:	eba3 0309 	sub.w	r3, r3, r9
 8005ac6:	455b      	cmp	r3, fp
 8005ac8:	dc31      	bgt.n	8005b2e <_printf_float+0x36e>
 8005aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005acc:	459a      	cmp	sl, r3
 8005ace:	dc3a      	bgt.n	8005b46 <_printf_float+0x386>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	07da      	lsls	r2, r3, #31
 8005ad4:	d437      	bmi.n	8005b46 <_printf_float+0x386>
 8005ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ad8:	ebaa 0903 	sub.w	r9, sl, r3
 8005adc:	9b06      	ldr	r3, [sp, #24]
 8005ade:	ebaa 0303 	sub.w	r3, sl, r3
 8005ae2:	4599      	cmp	r9, r3
 8005ae4:	bfa8      	it	ge
 8005ae6:	4699      	movge	r9, r3
 8005ae8:	f1b9 0f00 	cmp.w	r9, #0
 8005aec:	dc33      	bgt.n	8005b56 <_printf_float+0x396>
 8005aee:	f04f 0800 	mov.w	r8, #0
 8005af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005af6:	f104 0b1a 	add.w	fp, r4, #26
 8005afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afc:	ebaa 0303 	sub.w	r3, sl, r3
 8005b00:	eba3 0309 	sub.w	r3, r3, r9
 8005b04:	4543      	cmp	r3, r8
 8005b06:	f77f af79 	ble.w	80059fc <_printf_float+0x23c>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	465a      	mov	r2, fp
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	f43f aeae 	beq.w	8005876 <_printf_float+0xb6>
 8005b1a:	f108 0801 	add.w	r8, r8, #1
 8005b1e:	e7ec      	b.n	8005afa <_printf_float+0x33a>
 8005b20:	4642      	mov	r2, r8
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d1c2      	bne.n	8005ab2 <_printf_float+0x2f2>
 8005b2c:	e6a3      	b.n	8005876 <_printf_float+0xb6>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4631      	mov	r1, r6
 8005b32:	4628      	mov	r0, r5
 8005b34:	9206      	str	r2, [sp, #24]
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f ae9c 	beq.w	8005876 <_printf_float+0xb6>
 8005b3e:	9a06      	ldr	r2, [sp, #24]
 8005b40:	f10b 0b01 	add.w	fp, fp, #1
 8005b44:	e7bb      	b.n	8005abe <_printf_float+0x2fe>
 8005b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	d1c0      	bne.n	8005ad6 <_printf_float+0x316>
 8005b54:	e68f      	b.n	8005876 <_printf_float+0xb6>
 8005b56:	9a06      	ldr	r2, [sp, #24]
 8005b58:	464b      	mov	r3, r9
 8005b5a:	4442      	add	r2, r8
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	d1c3      	bne.n	8005aee <_printf_float+0x32e>
 8005b66:	e686      	b.n	8005876 <_printf_float+0xb6>
 8005b68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b6c:	f1ba 0f01 	cmp.w	sl, #1
 8005b70:	dc01      	bgt.n	8005b76 <_printf_float+0x3b6>
 8005b72:	07db      	lsls	r3, r3, #31
 8005b74:	d536      	bpl.n	8005be4 <_printf_float+0x424>
 8005b76:	2301      	movs	r3, #1
 8005b78:	4642      	mov	r2, r8
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b8      	blx	r7
 8005b80:	3001      	adds	r0, #1
 8005b82:	f43f ae78 	beq.w	8005876 <_printf_float+0xb6>
 8005b86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f ae70 	beq.w	8005876 <_printf_float+0xb6>
 8005b96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ba2:	f7fa ffa1 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ba6:	b9c0      	cbnz	r0, 8005bda <_printf_float+0x41a>
 8005ba8:	4653      	mov	r3, sl
 8005baa:	f108 0201 	add.w	r2, r8, #1
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d10c      	bne.n	8005bd2 <_printf_float+0x412>
 8005bb8:	e65d      	b.n	8005876 <_printf_float+0xb6>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	465a      	mov	r2, fp
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b8      	blx	r7
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f43f ae56 	beq.w	8005876 <_printf_float+0xb6>
 8005bca:	f108 0801 	add.w	r8, r8, #1
 8005bce:	45d0      	cmp	r8, sl
 8005bd0:	dbf3      	blt.n	8005bba <_printf_float+0x3fa>
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bd8:	e6df      	b.n	800599a <_printf_float+0x1da>
 8005bda:	f04f 0800 	mov.w	r8, #0
 8005bde:	f104 0b1a 	add.w	fp, r4, #26
 8005be2:	e7f4      	b.n	8005bce <_printf_float+0x40e>
 8005be4:	2301      	movs	r3, #1
 8005be6:	4642      	mov	r2, r8
 8005be8:	e7e1      	b.n	8005bae <_printf_float+0x3ee>
 8005bea:	2301      	movs	r3, #1
 8005bec:	464a      	mov	r2, r9
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b8      	blx	r7
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	f43f ae3e 	beq.w	8005876 <_printf_float+0xb6>
 8005bfa:	f108 0801 	add.w	r8, r8, #1
 8005bfe:	68e3      	ldr	r3, [r4, #12]
 8005c00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c02:	1a5b      	subs	r3, r3, r1
 8005c04:	4543      	cmp	r3, r8
 8005c06:	dcf0      	bgt.n	8005bea <_printf_float+0x42a>
 8005c08:	e6fc      	b.n	8005a04 <_printf_float+0x244>
 8005c0a:	f04f 0800 	mov.w	r8, #0
 8005c0e:	f104 0919 	add.w	r9, r4, #25
 8005c12:	e7f4      	b.n	8005bfe <_printf_float+0x43e>

08005c14 <_printf_common>:
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	4616      	mov	r6, r2
 8005c1a:	4698      	mov	r8, r3
 8005c1c:	688a      	ldr	r2, [r1, #8]
 8005c1e:	690b      	ldr	r3, [r1, #16]
 8005c20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bfb8      	it	lt
 8005c28:	4613      	movlt	r3, r2
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c30:	4607      	mov	r7, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b10a      	cbz	r2, 8005c3a <_printf_common+0x26>
 8005c36:	3301      	adds	r3, #1
 8005c38:	6033      	str	r3, [r6, #0]
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	0699      	lsls	r1, r3, #26
 8005c3e:	bf42      	ittt	mi
 8005c40:	6833      	ldrmi	r3, [r6, #0]
 8005c42:	3302      	addmi	r3, #2
 8005c44:	6033      	strmi	r3, [r6, #0]
 8005c46:	6825      	ldr	r5, [r4, #0]
 8005c48:	f015 0506 	ands.w	r5, r5, #6
 8005c4c:	d106      	bne.n	8005c5c <_printf_common+0x48>
 8005c4e:	f104 0a19 	add.w	sl, r4, #25
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	6832      	ldr	r2, [r6, #0]
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	42ab      	cmp	r3, r5
 8005c5a:	dc26      	bgt.n	8005caa <_printf_common+0x96>
 8005c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c60:	6822      	ldr	r2, [r4, #0]
 8005c62:	3b00      	subs	r3, #0
 8005c64:	bf18      	it	ne
 8005c66:	2301      	movne	r3, #1
 8005c68:	0692      	lsls	r2, r2, #26
 8005c6a:	d42b      	bmi.n	8005cc4 <_printf_common+0xb0>
 8005c6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c70:	4641      	mov	r1, r8
 8005c72:	4638      	mov	r0, r7
 8005c74:	47c8      	blx	r9
 8005c76:	3001      	adds	r0, #1
 8005c78:	d01e      	beq.n	8005cb8 <_printf_common+0xa4>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	6922      	ldr	r2, [r4, #16]
 8005c7e:	f003 0306 	and.w	r3, r3, #6
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	bf02      	ittt	eq
 8005c86:	68e5      	ldreq	r5, [r4, #12]
 8005c88:	6833      	ldreq	r3, [r6, #0]
 8005c8a:	1aed      	subeq	r5, r5, r3
 8005c8c:	68a3      	ldr	r3, [r4, #8]
 8005c8e:	bf0c      	ite	eq
 8005c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c94:	2500      	movne	r5, #0
 8005c96:	4293      	cmp	r3, r2
 8005c98:	bfc4      	itt	gt
 8005c9a:	1a9b      	subgt	r3, r3, r2
 8005c9c:	18ed      	addgt	r5, r5, r3
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	341a      	adds	r4, #26
 8005ca2:	42b5      	cmp	r5, r6
 8005ca4:	d11a      	bne.n	8005cdc <_printf_common+0xc8>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e008      	b.n	8005cbc <_printf_common+0xa8>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4652      	mov	r2, sl
 8005cae:	4641      	mov	r1, r8
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	47c8      	blx	r9
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d103      	bne.n	8005cc0 <_printf_common+0xac>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	e7c6      	b.n	8005c52 <_printf_common+0x3e>
 8005cc4:	18e1      	adds	r1, r4, r3
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	2030      	movs	r0, #48	@ 0x30
 8005cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cce:	4422      	add	r2, r4
 8005cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cd8:	3302      	adds	r3, #2
 8005cda:	e7c7      	b.n	8005c6c <_printf_common+0x58>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4622      	mov	r2, r4
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	47c8      	blx	r9
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d0e6      	beq.n	8005cb8 <_printf_common+0xa4>
 8005cea:	3601      	adds	r6, #1
 8005cec:	e7d9      	b.n	8005ca2 <_printf_common+0x8e>
	...

08005cf0 <_printf_i>:
 8005cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	7e0f      	ldrb	r7, [r1, #24]
 8005cf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cf8:	2f78      	cmp	r7, #120	@ 0x78
 8005cfa:	4691      	mov	r9, r2
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	469a      	mov	sl, r3
 8005d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d06:	d807      	bhi.n	8005d18 <_printf_i+0x28>
 8005d08:	2f62      	cmp	r7, #98	@ 0x62
 8005d0a:	d80a      	bhi.n	8005d22 <_printf_i+0x32>
 8005d0c:	2f00      	cmp	r7, #0
 8005d0e:	f000 80d1 	beq.w	8005eb4 <_printf_i+0x1c4>
 8005d12:	2f58      	cmp	r7, #88	@ 0x58
 8005d14:	f000 80b8 	beq.w	8005e88 <_printf_i+0x198>
 8005d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d20:	e03a      	b.n	8005d98 <_printf_i+0xa8>
 8005d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d26:	2b15      	cmp	r3, #21
 8005d28:	d8f6      	bhi.n	8005d18 <_printf_i+0x28>
 8005d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8005d30 <_printf_i+0x40>)
 8005d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d19 	.word	0x08005d19
 8005d3c:	08005d19 	.word	0x08005d19
 8005d40:	08005d19 	.word	0x08005d19
 8005d44:	08005d19 	.word	0x08005d19
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d19 	.word	0x08005d19
 8005d50:	08005d19 	.word	0x08005d19
 8005d54:	08005d19 	.word	0x08005d19
 8005d58:	08005d19 	.word	0x08005d19
 8005d5c:	08005e9b 	.word	0x08005e9b
 8005d60:	08005dc7 	.word	0x08005dc7
 8005d64:	08005e55 	.word	0x08005e55
 8005d68:	08005d19 	.word	0x08005d19
 8005d6c:	08005d19 	.word	0x08005d19
 8005d70:	08005ebd 	.word	0x08005ebd
 8005d74:	08005d19 	.word	0x08005d19
 8005d78:	08005dc7 	.word	0x08005dc7
 8005d7c:	08005d19 	.word	0x08005d19
 8005d80:	08005d19 	.word	0x08005d19
 8005d84:	08005e5d 	.word	0x08005e5d
 8005d88:	6833      	ldr	r3, [r6, #0]
 8005d8a:	1d1a      	adds	r2, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6032      	str	r2, [r6, #0]
 8005d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e09c      	b.n	8005ed6 <_printf_i+0x1e6>
 8005d9c:	6833      	ldr	r3, [r6, #0]
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	1d19      	adds	r1, r3, #4
 8005da2:	6031      	str	r1, [r6, #0]
 8005da4:	0606      	lsls	r6, r0, #24
 8005da6:	d501      	bpl.n	8005dac <_printf_i+0xbc>
 8005da8:	681d      	ldr	r5, [r3, #0]
 8005daa:	e003      	b.n	8005db4 <_printf_i+0xc4>
 8005dac:	0645      	lsls	r5, r0, #25
 8005dae:	d5fb      	bpl.n	8005da8 <_printf_i+0xb8>
 8005db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005db4:	2d00      	cmp	r5, #0
 8005db6:	da03      	bge.n	8005dc0 <_printf_i+0xd0>
 8005db8:	232d      	movs	r3, #45	@ 0x2d
 8005dba:	426d      	negs	r5, r5
 8005dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dc0:	4858      	ldr	r0, [pc, #352]	@ (8005f24 <_printf_i+0x234>)
 8005dc2:	230a      	movs	r3, #10
 8005dc4:	e011      	b.n	8005dea <_printf_i+0xfa>
 8005dc6:	6821      	ldr	r1, [r4, #0]
 8005dc8:	6833      	ldr	r3, [r6, #0]
 8005dca:	0608      	lsls	r0, r1, #24
 8005dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005dd0:	d402      	bmi.n	8005dd8 <_printf_i+0xe8>
 8005dd2:	0649      	lsls	r1, r1, #25
 8005dd4:	bf48      	it	mi
 8005dd6:	b2ad      	uxthmi	r5, r5
 8005dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dda:	4852      	ldr	r0, [pc, #328]	@ (8005f24 <_printf_i+0x234>)
 8005ddc:	6033      	str	r3, [r6, #0]
 8005dde:	bf14      	ite	ne
 8005de0:	230a      	movne	r3, #10
 8005de2:	2308      	moveq	r3, #8
 8005de4:	2100      	movs	r1, #0
 8005de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dea:	6866      	ldr	r6, [r4, #4]
 8005dec:	60a6      	str	r6, [r4, #8]
 8005dee:	2e00      	cmp	r6, #0
 8005df0:	db05      	blt.n	8005dfe <_printf_i+0x10e>
 8005df2:	6821      	ldr	r1, [r4, #0]
 8005df4:	432e      	orrs	r6, r5
 8005df6:	f021 0104 	bic.w	r1, r1, #4
 8005dfa:	6021      	str	r1, [r4, #0]
 8005dfc:	d04b      	beq.n	8005e96 <_printf_i+0x1a6>
 8005dfe:	4616      	mov	r6, r2
 8005e00:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e04:	fb03 5711 	mls	r7, r3, r1, r5
 8005e08:	5dc7      	ldrb	r7, [r0, r7]
 8005e0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e0e:	462f      	mov	r7, r5
 8005e10:	42bb      	cmp	r3, r7
 8005e12:	460d      	mov	r5, r1
 8005e14:	d9f4      	bls.n	8005e00 <_printf_i+0x110>
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d10b      	bne.n	8005e32 <_printf_i+0x142>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	07df      	lsls	r7, r3, #31
 8005e1e:	d508      	bpl.n	8005e32 <_printf_i+0x142>
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	6861      	ldr	r1, [r4, #4]
 8005e24:	4299      	cmp	r1, r3
 8005e26:	bfde      	ittt	le
 8005e28:	2330      	movle	r3, #48	@ 0x30
 8005e2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e32:	1b92      	subs	r2, r2, r6
 8005e34:	6122      	str	r2, [r4, #16]
 8005e36:	f8cd a000 	str.w	sl, [sp]
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	aa03      	add	r2, sp, #12
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4640      	mov	r0, r8
 8005e42:	f7ff fee7 	bl	8005c14 <_printf_common>
 8005e46:	3001      	adds	r0, #1
 8005e48:	d14a      	bne.n	8005ee0 <_printf_i+0x1f0>
 8005e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4e:	b004      	add	sp, #16
 8005e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	f043 0320 	orr.w	r3, r3, #32
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	4832      	ldr	r0, [pc, #200]	@ (8005f28 <_printf_i+0x238>)
 8005e5e:	2778      	movs	r7, #120	@ 0x78
 8005e60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	6831      	ldr	r1, [r6, #0]
 8005e68:	061f      	lsls	r7, r3, #24
 8005e6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e6e:	d402      	bmi.n	8005e76 <_printf_i+0x186>
 8005e70:	065f      	lsls	r7, r3, #25
 8005e72:	bf48      	it	mi
 8005e74:	b2ad      	uxthmi	r5, r5
 8005e76:	6031      	str	r1, [r6, #0]
 8005e78:	07d9      	lsls	r1, r3, #31
 8005e7a:	bf44      	itt	mi
 8005e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e80:	6023      	strmi	r3, [r4, #0]
 8005e82:	b11d      	cbz	r5, 8005e8c <_printf_i+0x19c>
 8005e84:	2310      	movs	r3, #16
 8005e86:	e7ad      	b.n	8005de4 <_printf_i+0xf4>
 8005e88:	4826      	ldr	r0, [pc, #152]	@ (8005f24 <_printf_i+0x234>)
 8005e8a:	e7e9      	b.n	8005e60 <_printf_i+0x170>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	f023 0320 	bic.w	r3, r3, #32
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	e7f6      	b.n	8005e84 <_printf_i+0x194>
 8005e96:	4616      	mov	r6, r2
 8005e98:	e7bd      	b.n	8005e16 <_printf_i+0x126>
 8005e9a:	6833      	ldr	r3, [r6, #0]
 8005e9c:	6825      	ldr	r5, [r4, #0]
 8005e9e:	6961      	ldr	r1, [r4, #20]
 8005ea0:	1d18      	adds	r0, r3, #4
 8005ea2:	6030      	str	r0, [r6, #0]
 8005ea4:	062e      	lsls	r6, r5, #24
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	d501      	bpl.n	8005eae <_printf_i+0x1be>
 8005eaa:	6019      	str	r1, [r3, #0]
 8005eac:	e002      	b.n	8005eb4 <_printf_i+0x1c4>
 8005eae:	0668      	lsls	r0, r5, #25
 8005eb0:	d5fb      	bpl.n	8005eaa <_printf_i+0x1ba>
 8005eb2:	8019      	strh	r1, [r3, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6123      	str	r3, [r4, #16]
 8005eb8:	4616      	mov	r6, r2
 8005eba:	e7bc      	b.n	8005e36 <_printf_i+0x146>
 8005ebc:	6833      	ldr	r3, [r6, #0]
 8005ebe:	1d1a      	adds	r2, r3, #4
 8005ec0:	6032      	str	r2, [r6, #0]
 8005ec2:	681e      	ldr	r6, [r3, #0]
 8005ec4:	6862      	ldr	r2, [r4, #4]
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f7fa f991 	bl	80001f0 <memchr>
 8005ece:	b108      	cbz	r0, 8005ed4 <_printf_i+0x1e4>
 8005ed0:	1b80      	subs	r0, r0, r6
 8005ed2:	6060      	str	r0, [r4, #4]
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ede:	e7aa      	b.n	8005e36 <_printf_i+0x146>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	47d0      	blx	sl
 8005eea:	3001      	adds	r0, #1
 8005eec:	d0ad      	beq.n	8005e4a <_printf_i+0x15a>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	079b      	lsls	r3, r3, #30
 8005ef2:	d413      	bmi.n	8005f1c <_printf_i+0x22c>
 8005ef4:	68e0      	ldr	r0, [r4, #12]
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	4298      	cmp	r0, r3
 8005efa:	bfb8      	it	lt
 8005efc:	4618      	movlt	r0, r3
 8005efe:	e7a6      	b.n	8005e4e <_printf_i+0x15e>
 8005f00:	2301      	movs	r3, #1
 8005f02:	4632      	mov	r2, r6
 8005f04:	4649      	mov	r1, r9
 8005f06:	4640      	mov	r0, r8
 8005f08:	47d0      	blx	sl
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d09d      	beq.n	8005e4a <_printf_i+0x15a>
 8005f0e:	3501      	adds	r5, #1
 8005f10:	68e3      	ldr	r3, [r4, #12]
 8005f12:	9903      	ldr	r1, [sp, #12]
 8005f14:	1a5b      	subs	r3, r3, r1
 8005f16:	42ab      	cmp	r3, r5
 8005f18:	dcf2      	bgt.n	8005f00 <_printf_i+0x210>
 8005f1a:	e7eb      	b.n	8005ef4 <_printf_i+0x204>
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	f104 0619 	add.w	r6, r4, #25
 8005f22:	e7f5      	b.n	8005f10 <_printf_i+0x220>
 8005f24:	080087c2 	.word	0x080087c2
 8005f28:	080087d3 	.word	0x080087d3

08005f2c <std>:
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	4604      	mov	r4, r0
 8005f32:	e9c0 3300 	strd	r3, r3, [r0]
 8005f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f3a:	6083      	str	r3, [r0, #8]
 8005f3c:	8181      	strh	r1, [r0, #12]
 8005f3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f40:	81c2      	strh	r2, [r0, #14]
 8005f42:	6183      	str	r3, [r0, #24]
 8005f44:	4619      	mov	r1, r3
 8005f46:	2208      	movs	r2, #8
 8005f48:	305c      	adds	r0, #92	@ 0x5c
 8005f4a:	f000 f94c 	bl	80061e6 <memset>
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <std+0x58>)
 8005f50:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <std+0x5c>)
 8005f54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f56:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <std+0x60>)
 8005f58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <std+0x64>)
 8005f5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f94 <std+0x68>)
 8005f60:	6224      	str	r4, [r4, #32]
 8005f62:	429c      	cmp	r4, r3
 8005f64:	d006      	beq.n	8005f74 <std+0x48>
 8005f66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f6a:	4294      	cmp	r4, r2
 8005f6c:	d002      	beq.n	8005f74 <std+0x48>
 8005f6e:	33d0      	adds	r3, #208	@ 0xd0
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d105      	bne.n	8005f80 <std+0x54>
 8005f74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f7c:	f000 b9b0 	b.w	80062e0 <__retarget_lock_init_recursive>
 8005f80:	bd10      	pop	{r4, pc}
 8005f82:	bf00      	nop
 8005f84:	08006161 	.word	0x08006161
 8005f88:	08006183 	.word	0x08006183
 8005f8c:	080061bb 	.word	0x080061bb
 8005f90:	080061df 	.word	0x080061df
 8005f94:	2000031c 	.word	0x2000031c

08005f98 <stdio_exit_handler>:
 8005f98:	4a02      	ldr	r2, [pc, #8]	@ (8005fa4 <stdio_exit_handler+0xc>)
 8005f9a:	4903      	ldr	r1, [pc, #12]	@ (8005fa8 <stdio_exit_handler+0x10>)
 8005f9c:	4803      	ldr	r0, [pc, #12]	@ (8005fac <stdio_exit_handler+0x14>)
 8005f9e:	f000 b869 	b.w	8006074 <_fwalk_sglue>
 8005fa2:	bf00      	nop
 8005fa4:	2000000c 	.word	0x2000000c
 8005fa8:	08007c45 	.word	0x08007c45
 8005fac:	2000001c 	.word	0x2000001c

08005fb0 <cleanup_stdio>:
 8005fb0:	6841      	ldr	r1, [r0, #4]
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe4 <cleanup_stdio+0x34>)
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	4604      	mov	r4, r0
 8005fba:	d001      	beq.n	8005fc0 <cleanup_stdio+0x10>
 8005fbc:	f001 fe42 	bl	8007c44 <_fflush_r>
 8005fc0:	68a1      	ldr	r1, [r4, #8]
 8005fc2:	4b09      	ldr	r3, [pc, #36]	@ (8005fe8 <cleanup_stdio+0x38>)
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	d002      	beq.n	8005fce <cleanup_stdio+0x1e>
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f001 fe3b 	bl	8007c44 <_fflush_r>
 8005fce:	68e1      	ldr	r1, [r4, #12]
 8005fd0:	4b06      	ldr	r3, [pc, #24]	@ (8005fec <cleanup_stdio+0x3c>)
 8005fd2:	4299      	cmp	r1, r3
 8005fd4:	d004      	beq.n	8005fe0 <cleanup_stdio+0x30>
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fdc:	f001 be32 	b.w	8007c44 <_fflush_r>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	bf00      	nop
 8005fe4:	2000031c 	.word	0x2000031c
 8005fe8:	20000384 	.word	0x20000384
 8005fec:	200003ec 	.word	0x200003ec

08005ff0 <global_stdio_init.part.0>:
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <global_stdio_init.part.0+0x30>)
 8005ff4:	4c0b      	ldr	r4, [pc, #44]	@ (8006024 <global_stdio_init.part.0+0x34>)
 8005ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8006028 <global_stdio_init.part.0+0x38>)
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2104      	movs	r1, #4
 8006000:	f7ff ff94 	bl	8005f2c <std>
 8006004:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006008:	2201      	movs	r2, #1
 800600a:	2109      	movs	r1, #9
 800600c:	f7ff ff8e 	bl	8005f2c <std>
 8006010:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006014:	2202      	movs	r2, #2
 8006016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601a:	2112      	movs	r1, #18
 800601c:	f7ff bf86 	b.w	8005f2c <std>
 8006020:	20000454 	.word	0x20000454
 8006024:	2000031c 	.word	0x2000031c
 8006028:	08005f99 	.word	0x08005f99

0800602c <__sfp_lock_acquire>:
 800602c:	4801      	ldr	r0, [pc, #4]	@ (8006034 <__sfp_lock_acquire+0x8>)
 800602e:	f000 b958 	b.w	80062e2 <__retarget_lock_acquire_recursive>
 8006032:	bf00      	nop
 8006034:	2000045d 	.word	0x2000045d

08006038 <__sfp_lock_release>:
 8006038:	4801      	ldr	r0, [pc, #4]	@ (8006040 <__sfp_lock_release+0x8>)
 800603a:	f000 b953 	b.w	80062e4 <__retarget_lock_release_recursive>
 800603e:	bf00      	nop
 8006040:	2000045d 	.word	0x2000045d

08006044 <__sinit>:
 8006044:	b510      	push	{r4, lr}
 8006046:	4604      	mov	r4, r0
 8006048:	f7ff fff0 	bl	800602c <__sfp_lock_acquire>
 800604c:	6a23      	ldr	r3, [r4, #32]
 800604e:	b11b      	cbz	r3, 8006058 <__sinit+0x14>
 8006050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006054:	f7ff bff0 	b.w	8006038 <__sfp_lock_release>
 8006058:	4b04      	ldr	r3, [pc, #16]	@ (800606c <__sinit+0x28>)
 800605a:	6223      	str	r3, [r4, #32]
 800605c:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <__sinit+0x2c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f5      	bne.n	8006050 <__sinit+0xc>
 8006064:	f7ff ffc4 	bl	8005ff0 <global_stdio_init.part.0>
 8006068:	e7f2      	b.n	8006050 <__sinit+0xc>
 800606a:	bf00      	nop
 800606c:	08005fb1 	.word	0x08005fb1
 8006070:	20000454 	.word	0x20000454

08006074 <_fwalk_sglue>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	4607      	mov	r7, r0
 800607a:	4688      	mov	r8, r1
 800607c:	4614      	mov	r4, r2
 800607e:	2600      	movs	r6, #0
 8006080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006084:	f1b9 0901 	subs.w	r9, r9, #1
 8006088:	d505      	bpl.n	8006096 <_fwalk_sglue+0x22>
 800608a:	6824      	ldr	r4, [r4, #0]
 800608c:	2c00      	cmp	r4, #0
 800608e:	d1f7      	bne.n	8006080 <_fwalk_sglue+0xc>
 8006090:	4630      	mov	r0, r6
 8006092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006096:	89ab      	ldrh	r3, [r5, #12]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d907      	bls.n	80060ac <_fwalk_sglue+0x38>
 800609c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060a0:	3301      	adds	r3, #1
 80060a2:	d003      	beq.n	80060ac <_fwalk_sglue+0x38>
 80060a4:	4629      	mov	r1, r5
 80060a6:	4638      	mov	r0, r7
 80060a8:	47c0      	blx	r8
 80060aa:	4306      	orrs	r6, r0
 80060ac:	3568      	adds	r5, #104	@ 0x68
 80060ae:	e7e9      	b.n	8006084 <_fwalk_sglue+0x10>

080060b0 <sniprintf>:
 80060b0:	b40c      	push	{r2, r3}
 80060b2:	b530      	push	{r4, r5, lr}
 80060b4:	4b18      	ldr	r3, [pc, #96]	@ (8006118 <sniprintf+0x68>)
 80060b6:	1e0c      	subs	r4, r1, #0
 80060b8:	681d      	ldr	r5, [r3, #0]
 80060ba:	b09d      	sub	sp, #116	@ 0x74
 80060bc:	da08      	bge.n	80060d0 <sniprintf+0x20>
 80060be:	238b      	movs	r3, #139	@ 0x8b
 80060c0:	602b      	str	r3, [r5, #0]
 80060c2:	f04f 30ff 	mov.w	r0, #4294967295
 80060c6:	b01d      	add	sp, #116	@ 0x74
 80060c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060cc:	b002      	add	sp, #8
 80060ce:	4770      	bx	lr
 80060d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80060d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80060de:	bf14      	ite	ne
 80060e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060e4:	4623      	moveq	r3, r4
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060ee:	9002      	str	r0, [sp, #8]
 80060f0:	9006      	str	r0, [sp, #24]
 80060f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060f8:	ab21      	add	r3, sp, #132	@ 0x84
 80060fa:	a902      	add	r1, sp, #8
 80060fc:	4628      	mov	r0, r5
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	f001 fc20 	bl	8007944 <_svfiprintf_r>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	bfbc      	itt	lt
 8006108:	238b      	movlt	r3, #139	@ 0x8b
 800610a:	602b      	strlt	r3, [r5, #0]
 800610c:	2c00      	cmp	r4, #0
 800610e:	d0da      	beq.n	80060c6 <sniprintf+0x16>
 8006110:	9b02      	ldr	r3, [sp, #8]
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e7d6      	b.n	80060c6 <sniprintf+0x16>
 8006118:	20000018 	.word	0x20000018

0800611c <siprintf>:
 800611c:	b40e      	push	{r1, r2, r3}
 800611e:	b510      	push	{r4, lr}
 8006120:	b09d      	sub	sp, #116	@ 0x74
 8006122:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006124:	9002      	str	r0, [sp, #8]
 8006126:	9006      	str	r0, [sp, #24]
 8006128:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800612c:	480a      	ldr	r0, [pc, #40]	@ (8006158 <siprintf+0x3c>)
 800612e:	9107      	str	r1, [sp, #28]
 8006130:	9104      	str	r1, [sp, #16]
 8006132:	490a      	ldr	r1, [pc, #40]	@ (800615c <siprintf+0x40>)
 8006134:	f853 2b04 	ldr.w	r2, [r3], #4
 8006138:	9105      	str	r1, [sp, #20]
 800613a:	2400      	movs	r4, #0
 800613c:	a902      	add	r1, sp, #8
 800613e:	6800      	ldr	r0, [r0, #0]
 8006140:	9301      	str	r3, [sp, #4]
 8006142:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006144:	f001 fbfe 	bl	8007944 <_svfiprintf_r>
 8006148:	9b02      	ldr	r3, [sp, #8]
 800614a:	701c      	strb	r4, [r3, #0]
 800614c:	b01d      	add	sp, #116	@ 0x74
 800614e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006152:	b003      	add	sp, #12
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000018 	.word	0x20000018
 800615c:	ffff0208 	.word	0xffff0208

08006160 <__sread>:
 8006160:	b510      	push	{r4, lr}
 8006162:	460c      	mov	r4, r1
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	f000 f86c 	bl	8006244 <_read_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	bfab      	itete	ge
 8006170:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006172:	89a3      	ldrhlt	r3, [r4, #12]
 8006174:	181b      	addge	r3, r3, r0
 8006176:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800617a:	bfac      	ite	ge
 800617c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800617e:	81a3      	strhlt	r3, [r4, #12]
 8006180:	bd10      	pop	{r4, pc}

08006182 <__swrite>:
 8006182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	461f      	mov	r7, r3
 8006188:	898b      	ldrh	r3, [r1, #12]
 800618a:	05db      	lsls	r3, r3, #23
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
 8006190:	4616      	mov	r6, r2
 8006192:	d505      	bpl.n	80061a0 <__swrite+0x1e>
 8006194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006198:	2302      	movs	r3, #2
 800619a:	2200      	movs	r2, #0
 800619c:	f000 f840 	bl	8006220 <_lseek_r>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	4632      	mov	r2, r6
 80061ae:	463b      	mov	r3, r7
 80061b0:	4628      	mov	r0, r5
 80061b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	f000 b857 	b.w	8006268 <_write_r>

080061ba <__sseek>:
 80061ba:	b510      	push	{r4, lr}
 80061bc:	460c      	mov	r4, r1
 80061be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c2:	f000 f82d 	bl	8006220 <_lseek_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	bf15      	itete	ne
 80061cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061d6:	81a3      	strheq	r3, [r4, #12]
 80061d8:	bf18      	it	ne
 80061da:	81a3      	strhne	r3, [r4, #12]
 80061dc:	bd10      	pop	{r4, pc}

080061de <__sclose>:
 80061de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e2:	f000 b80d 	b.w	8006200 <_close_r>

080061e6 <memset>:
 80061e6:	4402      	add	r2, r0
 80061e8:	4603      	mov	r3, r0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d100      	bne.n	80061f0 <memset+0xa>
 80061ee:	4770      	bx	lr
 80061f0:	f803 1b01 	strb.w	r1, [r3], #1
 80061f4:	e7f9      	b.n	80061ea <memset+0x4>
	...

080061f8 <_localeconv_r>:
 80061f8:	4800      	ldr	r0, [pc, #0]	@ (80061fc <_localeconv_r+0x4>)
 80061fa:	4770      	bx	lr
 80061fc:	20000158 	.word	0x20000158

08006200 <_close_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d06      	ldr	r5, [pc, #24]	@ (800621c <_close_r+0x1c>)
 8006204:	2300      	movs	r3, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	602b      	str	r3, [r5, #0]
 800620c:	f7fc fbb0 	bl	8002970 <_close>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_close_r+0x1a>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_close_r+0x1a>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	20000458 	.word	0x20000458

08006220 <_lseek_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d07      	ldr	r5, [pc, #28]	@ (8006240 <_lseek_r+0x20>)
 8006224:	4604      	mov	r4, r0
 8006226:	4608      	mov	r0, r1
 8006228:	4611      	mov	r1, r2
 800622a:	2200      	movs	r2, #0
 800622c:	602a      	str	r2, [r5, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	f7fc fbc5 	bl	80029be <_lseek>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_lseek_r+0x1e>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_lseek_r+0x1e>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	20000458 	.word	0x20000458

08006244 <_read_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d07      	ldr	r5, [pc, #28]	@ (8006264 <_read_r+0x20>)
 8006248:	4604      	mov	r4, r0
 800624a:	4608      	mov	r0, r1
 800624c:	4611      	mov	r1, r2
 800624e:	2200      	movs	r2, #0
 8006250:	602a      	str	r2, [r5, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f7fc fb53 	bl	80028fe <_read>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_read_r+0x1e>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_read_r+0x1e>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20000458 	.word	0x20000458

08006268 <_write_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d07      	ldr	r5, [pc, #28]	@ (8006288 <_write_r+0x20>)
 800626c:	4604      	mov	r4, r0
 800626e:	4608      	mov	r0, r1
 8006270:	4611      	mov	r1, r2
 8006272:	2200      	movs	r2, #0
 8006274:	602a      	str	r2, [r5, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f7fc fb5e 	bl	8002938 <_write>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_write_r+0x1e>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_write_r+0x1e>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20000458 	.word	0x20000458

0800628c <__errno>:
 800628c:	4b01      	ldr	r3, [pc, #4]	@ (8006294 <__errno+0x8>)
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000018 	.word	0x20000018

08006298 <__libc_init_array>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	4d0d      	ldr	r5, [pc, #52]	@ (80062d0 <__libc_init_array+0x38>)
 800629c:	4c0d      	ldr	r4, [pc, #52]	@ (80062d4 <__libc_init_array+0x3c>)
 800629e:	1b64      	subs	r4, r4, r5
 80062a0:	10a4      	asrs	r4, r4, #2
 80062a2:	2600      	movs	r6, #0
 80062a4:	42a6      	cmp	r6, r4
 80062a6:	d109      	bne.n	80062bc <__libc_init_array+0x24>
 80062a8:	4d0b      	ldr	r5, [pc, #44]	@ (80062d8 <__libc_init_array+0x40>)
 80062aa:	4c0c      	ldr	r4, [pc, #48]	@ (80062dc <__libc_init_array+0x44>)
 80062ac:	f002 f868 	bl	8008380 <_init>
 80062b0:	1b64      	subs	r4, r4, r5
 80062b2:	10a4      	asrs	r4, r4, #2
 80062b4:	2600      	movs	r6, #0
 80062b6:	42a6      	cmp	r6, r4
 80062b8:	d105      	bne.n	80062c6 <__libc_init_array+0x2e>
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c0:	4798      	blx	r3
 80062c2:	3601      	adds	r6, #1
 80062c4:	e7ee      	b.n	80062a4 <__libc_init_array+0xc>
 80062c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ca:	4798      	blx	r3
 80062cc:	3601      	adds	r6, #1
 80062ce:	e7f2      	b.n	80062b6 <__libc_init_array+0x1e>
 80062d0:	08008b2c 	.word	0x08008b2c
 80062d4:	08008b2c 	.word	0x08008b2c
 80062d8:	08008b2c 	.word	0x08008b2c
 80062dc:	08008b30 	.word	0x08008b30

080062e0 <__retarget_lock_init_recursive>:
 80062e0:	4770      	bx	lr

080062e2 <__retarget_lock_acquire_recursive>:
 80062e2:	4770      	bx	lr

080062e4 <__retarget_lock_release_recursive>:
 80062e4:	4770      	bx	lr

080062e6 <quorem>:
 80062e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	6903      	ldr	r3, [r0, #16]
 80062ec:	690c      	ldr	r4, [r1, #16]
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	4607      	mov	r7, r0
 80062f2:	db7e      	blt.n	80063f2 <quorem+0x10c>
 80062f4:	3c01      	subs	r4, #1
 80062f6:	f101 0814 	add.w	r8, r1, #20
 80062fa:	00a3      	lsls	r3, r4, #2
 80062fc:	f100 0514 	add.w	r5, r0, #20
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800630c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006310:	3301      	adds	r3, #1
 8006312:	429a      	cmp	r2, r3
 8006314:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006318:	fbb2 f6f3 	udiv	r6, r2, r3
 800631c:	d32e      	bcc.n	800637c <quorem+0x96>
 800631e:	f04f 0a00 	mov.w	sl, #0
 8006322:	46c4      	mov	ip, r8
 8006324:	46ae      	mov	lr, r5
 8006326:	46d3      	mov	fp, sl
 8006328:	f85c 3b04 	ldr.w	r3, [ip], #4
 800632c:	b298      	uxth	r0, r3
 800632e:	fb06 a000 	mla	r0, r6, r0, sl
 8006332:	0c02      	lsrs	r2, r0, #16
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	fb06 2303 	mla	r3, r6, r3, r2
 800633a:	f8de 2000 	ldr.w	r2, [lr]
 800633e:	b280      	uxth	r0, r0
 8006340:	b292      	uxth	r2, r2
 8006342:	1a12      	subs	r2, r2, r0
 8006344:	445a      	add	r2, fp
 8006346:	f8de 0000 	ldr.w	r0, [lr]
 800634a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800634e:	b29b      	uxth	r3, r3
 8006350:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006354:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006358:	b292      	uxth	r2, r2
 800635a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800635e:	45e1      	cmp	r9, ip
 8006360:	f84e 2b04 	str.w	r2, [lr], #4
 8006364:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006368:	d2de      	bcs.n	8006328 <quorem+0x42>
 800636a:	9b00      	ldr	r3, [sp, #0]
 800636c:	58eb      	ldr	r3, [r5, r3]
 800636e:	b92b      	cbnz	r3, 800637c <quorem+0x96>
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	3b04      	subs	r3, #4
 8006374:	429d      	cmp	r5, r3
 8006376:	461a      	mov	r2, r3
 8006378:	d32f      	bcc.n	80063da <quorem+0xf4>
 800637a:	613c      	str	r4, [r7, #16]
 800637c:	4638      	mov	r0, r7
 800637e:	f001 f97d 	bl	800767c <__mcmp>
 8006382:	2800      	cmp	r0, #0
 8006384:	db25      	blt.n	80063d2 <quorem+0xec>
 8006386:	4629      	mov	r1, r5
 8006388:	2000      	movs	r0, #0
 800638a:	f858 2b04 	ldr.w	r2, [r8], #4
 800638e:	f8d1 c000 	ldr.w	ip, [r1]
 8006392:	fa1f fe82 	uxth.w	lr, r2
 8006396:	fa1f f38c 	uxth.w	r3, ip
 800639a:	eba3 030e 	sub.w	r3, r3, lr
 800639e:	4403      	add	r3, r0
 80063a0:	0c12      	lsrs	r2, r2, #16
 80063a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80063a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063b0:	45c1      	cmp	r9, r8
 80063b2:	f841 3b04 	str.w	r3, [r1], #4
 80063b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063ba:	d2e6      	bcs.n	800638a <quorem+0xa4>
 80063bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063c4:	b922      	cbnz	r2, 80063d0 <quorem+0xea>
 80063c6:	3b04      	subs	r3, #4
 80063c8:	429d      	cmp	r5, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	d30b      	bcc.n	80063e6 <quorem+0x100>
 80063ce:	613c      	str	r4, [r7, #16]
 80063d0:	3601      	adds	r6, #1
 80063d2:	4630      	mov	r0, r6
 80063d4:	b003      	add	sp, #12
 80063d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	3b04      	subs	r3, #4
 80063de:	2a00      	cmp	r2, #0
 80063e0:	d1cb      	bne.n	800637a <quorem+0x94>
 80063e2:	3c01      	subs	r4, #1
 80063e4:	e7c6      	b.n	8006374 <quorem+0x8e>
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	3b04      	subs	r3, #4
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	d1ef      	bne.n	80063ce <quorem+0xe8>
 80063ee:	3c01      	subs	r4, #1
 80063f0:	e7ea      	b.n	80063c8 <quorem+0xe2>
 80063f2:	2000      	movs	r0, #0
 80063f4:	e7ee      	b.n	80063d4 <quorem+0xee>
	...

080063f8 <_dtoa_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	69c7      	ldr	r7, [r0, #28]
 80063fe:	b097      	sub	sp, #92	@ 0x5c
 8006400:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006404:	ec55 4b10 	vmov	r4, r5, d0
 8006408:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800640a:	9107      	str	r1, [sp, #28]
 800640c:	4681      	mov	r9, r0
 800640e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006410:	9311      	str	r3, [sp, #68]	@ 0x44
 8006412:	b97f      	cbnz	r7, 8006434 <_dtoa_r+0x3c>
 8006414:	2010      	movs	r0, #16
 8006416:	f000 fe09 	bl	800702c <malloc>
 800641a:	4602      	mov	r2, r0
 800641c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006420:	b920      	cbnz	r0, 800642c <_dtoa_r+0x34>
 8006422:	4ba9      	ldr	r3, [pc, #676]	@ (80066c8 <_dtoa_r+0x2d0>)
 8006424:	21ef      	movs	r1, #239	@ 0xef
 8006426:	48a9      	ldr	r0, [pc, #676]	@ (80066cc <_dtoa_r+0x2d4>)
 8006428:	f001 fc6c 	bl	8007d04 <__assert_func>
 800642c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006430:	6007      	str	r7, [r0, #0]
 8006432:	60c7      	str	r7, [r0, #12]
 8006434:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006438:	6819      	ldr	r1, [r3, #0]
 800643a:	b159      	cbz	r1, 8006454 <_dtoa_r+0x5c>
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	604a      	str	r2, [r1, #4]
 8006440:	2301      	movs	r3, #1
 8006442:	4093      	lsls	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
 8006446:	4648      	mov	r0, r9
 8006448:	f000 fee6 	bl	8007218 <_Bfree>
 800644c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	1e2b      	subs	r3, r5, #0
 8006456:	bfb9      	ittee	lt
 8006458:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800645c:	9305      	strlt	r3, [sp, #20]
 800645e:	2300      	movge	r3, #0
 8006460:	6033      	strge	r3, [r6, #0]
 8006462:	9f05      	ldr	r7, [sp, #20]
 8006464:	4b9a      	ldr	r3, [pc, #616]	@ (80066d0 <_dtoa_r+0x2d8>)
 8006466:	bfbc      	itt	lt
 8006468:	2201      	movlt	r2, #1
 800646a:	6032      	strlt	r2, [r6, #0]
 800646c:	43bb      	bics	r3, r7
 800646e:	d112      	bne.n	8006496 <_dtoa_r+0x9e>
 8006470:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006472:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800647c:	4323      	orrs	r3, r4
 800647e:	f000 855a 	beq.w	8006f36 <_dtoa_r+0xb3e>
 8006482:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006484:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80066e4 <_dtoa_r+0x2ec>
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 855c 	beq.w	8006f46 <_dtoa_r+0xb4e>
 800648e:	f10a 0303 	add.w	r3, sl, #3
 8006492:	f000 bd56 	b.w	8006f42 <_dtoa_r+0xb4a>
 8006496:	ed9d 7b04 	vldr	d7, [sp, #16]
 800649a:	2200      	movs	r2, #0
 800649c:	ec51 0b17 	vmov	r0, r1, d7
 80064a0:	2300      	movs	r3, #0
 80064a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80064a6:	f7fa fb1f 	bl	8000ae8 <__aeabi_dcmpeq>
 80064aa:	4680      	mov	r8, r0
 80064ac:	b158      	cbz	r0, 80064c6 <_dtoa_r+0xce>
 80064ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80064b0:	2301      	movs	r3, #1
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064b6:	b113      	cbz	r3, 80064be <_dtoa_r+0xc6>
 80064b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80064ba:	4b86      	ldr	r3, [pc, #536]	@ (80066d4 <_dtoa_r+0x2dc>)
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80066e8 <_dtoa_r+0x2f0>
 80064c2:	f000 bd40 	b.w	8006f46 <_dtoa_r+0xb4e>
 80064c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80064ca:	aa14      	add	r2, sp, #80	@ 0x50
 80064cc:	a915      	add	r1, sp, #84	@ 0x54
 80064ce:	4648      	mov	r0, r9
 80064d0:	f001 f984 	bl	80077dc <__d2b>
 80064d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80064d8:	9002      	str	r0, [sp, #8]
 80064da:	2e00      	cmp	r6, #0
 80064dc:	d078      	beq.n	80065d0 <_dtoa_r+0x1d8>
 80064de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80064e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064f8:	4619      	mov	r1, r3
 80064fa:	2200      	movs	r2, #0
 80064fc:	4b76      	ldr	r3, [pc, #472]	@ (80066d8 <_dtoa_r+0x2e0>)
 80064fe:	f7f9 fed3 	bl	80002a8 <__aeabi_dsub>
 8006502:	a36b      	add	r3, pc, #428	@ (adr r3, 80066b0 <_dtoa_r+0x2b8>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7fa f886 	bl	8000618 <__aeabi_dmul>
 800650c:	a36a      	add	r3, pc, #424	@ (adr r3, 80066b8 <_dtoa_r+0x2c0>)
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f7f9 fecb 	bl	80002ac <__adddf3>
 8006516:	4604      	mov	r4, r0
 8006518:	4630      	mov	r0, r6
 800651a:	460d      	mov	r5, r1
 800651c:	f7fa f812 	bl	8000544 <__aeabi_i2d>
 8006520:	a367      	add	r3, pc, #412	@ (adr r3, 80066c0 <_dtoa_r+0x2c8>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f7fa f877 	bl	8000618 <__aeabi_dmul>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4620      	mov	r0, r4
 8006530:	4629      	mov	r1, r5
 8006532:	f7f9 febb 	bl	80002ac <__adddf3>
 8006536:	4604      	mov	r4, r0
 8006538:	460d      	mov	r5, r1
 800653a:	f7fa fb1d 	bl	8000b78 <__aeabi_d2iz>
 800653e:	2200      	movs	r2, #0
 8006540:	4607      	mov	r7, r0
 8006542:	2300      	movs	r3, #0
 8006544:	4620      	mov	r0, r4
 8006546:	4629      	mov	r1, r5
 8006548:	f7fa fad8 	bl	8000afc <__aeabi_dcmplt>
 800654c:	b140      	cbz	r0, 8006560 <_dtoa_r+0x168>
 800654e:	4638      	mov	r0, r7
 8006550:	f7f9 fff8 	bl	8000544 <__aeabi_i2d>
 8006554:	4622      	mov	r2, r4
 8006556:	462b      	mov	r3, r5
 8006558:	f7fa fac6 	bl	8000ae8 <__aeabi_dcmpeq>
 800655c:	b900      	cbnz	r0, 8006560 <_dtoa_r+0x168>
 800655e:	3f01      	subs	r7, #1
 8006560:	2f16      	cmp	r7, #22
 8006562:	d852      	bhi.n	800660a <_dtoa_r+0x212>
 8006564:	4b5d      	ldr	r3, [pc, #372]	@ (80066dc <_dtoa_r+0x2e4>)
 8006566:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006572:	f7fa fac3 	bl	8000afc <__aeabi_dcmplt>
 8006576:	2800      	cmp	r0, #0
 8006578:	d049      	beq.n	800660e <_dtoa_r+0x216>
 800657a:	3f01      	subs	r7, #1
 800657c:	2300      	movs	r3, #0
 800657e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006580:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006582:	1b9b      	subs	r3, r3, r6
 8006584:	1e5a      	subs	r2, r3, #1
 8006586:	bf45      	ittet	mi
 8006588:	f1c3 0301 	rsbmi	r3, r3, #1
 800658c:	9300      	strmi	r3, [sp, #0]
 800658e:	2300      	movpl	r3, #0
 8006590:	2300      	movmi	r3, #0
 8006592:	9206      	str	r2, [sp, #24]
 8006594:	bf54      	ite	pl
 8006596:	9300      	strpl	r3, [sp, #0]
 8006598:	9306      	strmi	r3, [sp, #24]
 800659a:	2f00      	cmp	r7, #0
 800659c:	db39      	blt.n	8006612 <_dtoa_r+0x21a>
 800659e:	9b06      	ldr	r3, [sp, #24]
 80065a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80065a2:	443b      	add	r3, r7
 80065a4:	9306      	str	r3, [sp, #24]
 80065a6:	2300      	movs	r3, #0
 80065a8:	9308      	str	r3, [sp, #32]
 80065aa:	9b07      	ldr	r3, [sp, #28]
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d863      	bhi.n	8006678 <_dtoa_r+0x280>
 80065b0:	2b05      	cmp	r3, #5
 80065b2:	bfc4      	itt	gt
 80065b4:	3b04      	subgt	r3, #4
 80065b6:	9307      	strgt	r3, [sp, #28]
 80065b8:	9b07      	ldr	r3, [sp, #28]
 80065ba:	f1a3 0302 	sub.w	r3, r3, #2
 80065be:	bfcc      	ite	gt
 80065c0:	2400      	movgt	r4, #0
 80065c2:	2401      	movle	r4, #1
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d863      	bhi.n	8006690 <_dtoa_r+0x298>
 80065c8:	e8df f003 	tbb	[pc, r3]
 80065cc:	2b375452 	.word	0x2b375452
 80065d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80065d4:	441e      	add	r6, r3
 80065d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80065da:	2b20      	cmp	r3, #32
 80065dc:	bfc1      	itttt	gt
 80065de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80065e2:	409f      	lslgt	r7, r3
 80065e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80065e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065ec:	bfd6      	itet	le
 80065ee:	f1c3 0320 	rsble	r3, r3, #32
 80065f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80065f6:	fa04 f003 	lslle.w	r0, r4, r3
 80065fa:	f7f9 ff93 	bl	8000524 <__aeabi_ui2d>
 80065fe:	2201      	movs	r2, #1
 8006600:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006604:	3e01      	subs	r6, #1
 8006606:	9212      	str	r2, [sp, #72]	@ 0x48
 8006608:	e776      	b.n	80064f8 <_dtoa_r+0x100>
 800660a:	2301      	movs	r3, #1
 800660c:	e7b7      	b.n	800657e <_dtoa_r+0x186>
 800660e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006610:	e7b6      	b.n	8006580 <_dtoa_r+0x188>
 8006612:	9b00      	ldr	r3, [sp, #0]
 8006614:	1bdb      	subs	r3, r3, r7
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	427b      	negs	r3, r7
 800661a:	9308      	str	r3, [sp, #32]
 800661c:	2300      	movs	r3, #0
 800661e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006620:	e7c3      	b.n	80065aa <_dtoa_r+0x1b2>
 8006622:	2301      	movs	r3, #1
 8006624:	9309      	str	r3, [sp, #36]	@ 0x24
 8006626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006628:	eb07 0b03 	add.w	fp, r7, r3
 800662c:	f10b 0301 	add.w	r3, fp, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	9303      	str	r3, [sp, #12]
 8006634:	bfb8      	it	lt
 8006636:	2301      	movlt	r3, #1
 8006638:	e006      	b.n	8006648 <_dtoa_r+0x250>
 800663a:	2301      	movs	r3, #1
 800663c:	9309      	str	r3, [sp, #36]	@ 0x24
 800663e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006640:	2b00      	cmp	r3, #0
 8006642:	dd28      	ble.n	8006696 <_dtoa_r+0x29e>
 8006644:	469b      	mov	fp, r3
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800664c:	2100      	movs	r1, #0
 800664e:	2204      	movs	r2, #4
 8006650:	f102 0514 	add.w	r5, r2, #20
 8006654:	429d      	cmp	r5, r3
 8006656:	d926      	bls.n	80066a6 <_dtoa_r+0x2ae>
 8006658:	6041      	str	r1, [r0, #4]
 800665a:	4648      	mov	r0, r9
 800665c:	f000 fd9c 	bl	8007198 <_Balloc>
 8006660:	4682      	mov	sl, r0
 8006662:	2800      	cmp	r0, #0
 8006664:	d142      	bne.n	80066ec <_dtoa_r+0x2f4>
 8006666:	4b1e      	ldr	r3, [pc, #120]	@ (80066e0 <_dtoa_r+0x2e8>)
 8006668:	4602      	mov	r2, r0
 800666a:	f240 11af 	movw	r1, #431	@ 0x1af
 800666e:	e6da      	b.n	8006426 <_dtoa_r+0x2e>
 8006670:	2300      	movs	r3, #0
 8006672:	e7e3      	b.n	800663c <_dtoa_r+0x244>
 8006674:	2300      	movs	r3, #0
 8006676:	e7d5      	b.n	8006624 <_dtoa_r+0x22c>
 8006678:	2401      	movs	r4, #1
 800667a:	2300      	movs	r3, #0
 800667c:	9307      	str	r3, [sp, #28]
 800667e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006680:	f04f 3bff 	mov.w	fp, #4294967295
 8006684:	2200      	movs	r2, #0
 8006686:	f8cd b00c 	str.w	fp, [sp, #12]
 800668a:	2312      	movs	r3, #18
 800668c:	920c      	str	r2, [sp, #48]	@ 0x30
 800668e:	e7db      	b.n	8006648 <_dtoa_r+0x250>
 8006690:	2301      	movs	r3, #1
 8006692:	9309      	str	r3, [sp, #36]	@ 0x24
 8006694:	e7f4      	b.n	8006680 <_dtoa_r+0x288>
 8006696:	f04f 0b01 	mov.w	fp, #1
 800669a:	f8cd b00c 	str.w	fp, [sp, #12]
 800669e:	465b      	mov	r3, fp
 80066a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80066a4:	e7d0      	b.n	8006648 <_dtoa_r+0x250>
 80066a6:	3101      	adds	r1, #1
 80066a8:	0052      	lsls	r2, r2, #1
 80066aa:	e7d1      	b.n	8006650 <_dtoa_r+0x258>
 80066ac:	f3af 8000 	nop.w
 80066b0:	636f4361 	.word	0x636f4361
 80066b4:	3fd287a7 	.word	0x3fd287a7
 80066b8:	8b60c8b3 	.word	0x8b60c8b3
 80066bc:	3fc68a28 	.word	0x3fc68a28
 80066c0:	509f79fb 	.word	0x509f79fb
 80066c4:	3fd34413 	.word	0x3fd34413
 80066c8:	080087f1 	.word	0x080087f1
 80066cc:	08008808 	.word	0x08008808
 80066d0:	7ff00000 	.word	0x7ff00000
 80066d4:	080087c1 	.word	0x080087c1
 80066d8:	3ff80000 	.word	0x3ff80000
 80066dc:	08008958 	.word	0x08008958
 80066e0:	08008860 	.word	0x08008860
 80066e4:	080087ed 	.word	0x080087ed
 80066e8:	080087c0 	.word	0x080087c0
 80066ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80066f0:	6018      	str	r0, [r3, #0]
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	2b0e      	cmp	r3, #14
 80066f6:	f200 80a1 	bhi.w	800683c <_dtoa_r+0x444>
 80066fa:	2c00      	cmp	r4, #0
 80066fc:	f000 809e 	beq.w	800683c <_dtoa_r+0x444>
 8006700:	2f00      	cmp	r7, #0
 8006702:	dd33      	ble.n	800676c <_dtoa_r+0x374>
 8006704:	4b9c      	ldr	r3, [pc, #624]	@ (8006978 <_dtoa_r+0x580>)
 8006706:	f007 020f 	and.w	r2, r7, #15
 800670a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800670e:	ed93 7b00 	vldr	d7, [r3]
 8006712:	05f8      	lsls	r0, r7, #23
 8006714:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006718:	ea4f 1427 	mov.w	r4, r7, asr #4
 800671c:	d516      	bpl.n	800674c <_dtoa_r+0x354>
 800671e:	4b97      	ldr	r3, [pc, #604]	@ (800697c <_dtoa_r+0x584>)
 8006720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006728:	f7fa f8a0 	bl	800086c <__aeabi_ddiv>
 800672c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006730:	f004 040f 	and.w	r4, r4, #15
 8006734:	2603      	movs	r6, #3
 8006736:	4d91      	ldr	r5, [pc, #580]	@ (800697c <_dtoa_r+0x584>)
 8006738:	b954      	cbnz	r4, 8006750 <_dtoa_r+0x358>
 800673a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800673e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006742:	f7fa f893 	bl	800086c <__aeabi_ddiv>
 8006746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800674a:	e028      	b.n	800679e <_dtoa_r+0x3a6>
 800674c:	2602      	movs	r6, #2
 800674e:	e7f2      	b.n	8006736 <_dtoa_r+0x33e>
 8006750:	07e1      	lsls	r1, r4, #31
 8006752:	d508      	bpl.n	8006766 <_dtoa_r+0x36e>
 8006754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800675c:	f7f9 ff5c 	bl	8000618 <__aeabi_dmul>
 8006760:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006764:	3601      	adds	r6, #1
 8006766:	1064      	asrs	r4, r4, #1
 8006768:	3508      	adds	r5, #8
 800676a:	e7e5      	b.n	8006738 <_dtoa_r+0x340>
 800676c:	f000 80af 	beq.w	80068ce <_dtoa_r+0x4d6>
 8006770:	427c      	negs	r4, r7
 8006772:	4b81      	ldr	r3, [pc, #516]	@ (8006978 <_dtoa_r+0x580>)
 8006774:	4d81      	ldr	r5, [pc, #516]	@ (800697c <_dtoa_r+0x584>)
 8006776:	f004 020f 	and.w	r2, r4, #15
 800677a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006786:	f7f9 ff47 	bl	8000618 <__aeabi_dmul>
 800678a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800678e:	1124      	asrs	r4, r4, #4
 8006790:	2300      	movs	r3, #0
 8006792:	2602      	movs	r6, #2
 8006794:	2c00      	cmp	r4, #0
 8006796:	f040 808f 	bne.w	80068b8 <_dtoa_r+0x4c0>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1d3      	bne.n	8006746 <_dtoa_r+0x34e>
 800679e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8094 	beq.w	80068d2 <_dtoa_r+0x4da>
 80067aa:	4b75      	ldr	r3, [pc, #468]	@ (8006980 <_dtoa_r+0x588>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7fa f9a3 	bl	8000afc <__aeabi_dcmplt>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f000 808b 	beq.w	80068d2 <_dtoa_r+0x4da>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8087 	beq.w	80068d2 <_dtoa_r+0x4da>
 80067c4:	f1bb 0f00 	cmp.w	fp, #0
 80067c8:	dd34      	ble.n	8006834 <_dtoa_r+0x43c>
 80067ca:	4620      	mov	r0, r4
 80067cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006984 <_dtoa_r+0x58c>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 ff21 	bl	8000618 <__aeabi_dmul>
 80067d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067da:	f107 38ff 	add.w	r8, r7, #4294967295
 80067de:	3601      	adds	r6, #1
 80067e0:	465c      	mov	r4, fp
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7f9 feae 	bl	8000544 <__aeabi_i2d>
 80067e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ec:	f7f9 ff14 	bl	8000618 <__aeabi_dmul>
 80067f0:	4b65      	ldr	r3, [pc, #404]	@ (8006988 <_dtoa_r+0x590>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	f7f9 fd5a 	bl	80002ac <__adddf3>
 80067f8:	4605      	mov	r5, r0
 80067fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067fe:	2c00      	cmp	r4, #0
 8006800:	d16a      	bne.n	80068d8 <_dtoa_r+0x4e0>
 8006802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006806:	4b61      	ldr	r3, [pc, #388]	@ (800698c <_dtoa_r+0x594>)
 8006808:	2200      	movs	r2, #0
 800680a:	f7f9 fd4d 	bl	80002a8 <__aeabi_dsub>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006816:	462a      	mov	r2, r5
 8006818:	4633      	mov	r3, r6
 800681a:	f7fa f98d 	bl	8000b38 <__aeabi_dcmpgt>
 800681e:	2800      	cmp	r0, #0
 8006820:	f040 8298 	bne.w	8006d54 <_dtoa_r+0x95c>
 8006824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006828:	462a      	mov	r2, r5
 800682a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800682e:	f7fa f965 	bl	8000afc <__aeabi_dcmplt>
 8006832:	bb38      	cbnz	r0, 8006884 <_dtoa_r+0x48c>
 8006834:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006838:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800683c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800683e:	2b00      	cmp	r3, #0
 8006840:	f2c0 8157 	blt.w	8006af2 <_dtoa_r+0x6fa>
 8006844:	2f0e      	cmp	r7, #14
 8006846:	f300 8154 	bgt.w	8006af2 <_dtoa_r+0x6fa>
 800684a:	4b4b      	ldr	r3, [pc, #300]	@ (8006978 <_dtoa_r+0x580>)
 800684c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006850:	ed93 7b00 	vldr	d7, [r3]
 8006854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006856:	2b00      	cmp	r3, #0
 8006858:	ed8d 7b00 	vstr	d7, [sp]
 800685c:	f280 80e5 	bge.w	8006a2a <_dtoa_r+0x632>
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f300 80e1 	bgt.w	8006a2a <_dtoa_r+0x632>
 8006868:	d10c      	bne.n	8006884 <_dtoa_r+0x48c>
 800686a:	4b48      	ldr	r3, [pc, #288]	@ (800698c <_dtoa_r+0x594>)
 800686c:	2200      	movs	r2, #0
 800686e:	ec51 0b17 	vmov	r0, r1, d7
 8006872:	f7f9 fed1 	bl	8000618 <__aeabi_dmul>
 8006876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800687a:	f7fa f953 	bl	8000b24 <__aeabi_dcmpge>
 800687e:	2800      	cmp	r0, #0
 8006880:	f000 8266 	beq.w	8006d50 <_dtoa_r+0x958>
 8006884:	2400      	movs	r4, #0
 8006886:	4625      	mov	r5, r4
 8006888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800688a:	4656      	mov	r6, sl
 800688c:	ea6f 0803 	mvn.w	r8, r3
 8006890:	2700      	movs	r7, #0
 8006892:	4621      	mov	r1, r4
 8006894:	4648      	mov	r0, r9
 8006896:	f000 fcbf 	bl	8007218 <_Bfree>
 800689a:	2d00      	cmp	r5, #0
 800689c:	f000 80bd 	beq.w	8006a1a <_dtoa_r+0x622>
 80068a0:	b12f      	cbz	r7, 80068ae <_dtoa_r+0x4b6>
 80068a2:	42af      	cmp	r7, r5
 80068a4:	d003      	beq.n	80068ae <_dtoa_r+0x4b6>
 80068a6:	4639      	mov	r1, r7
 80068a8:	4648      	mov	r0, r9
 80068aa:	f000 fcb5 	bl	8007218 <_Bfree>
 80068ae:	4629      	mov	r1, r5
 80068b0:	4648      	mov	r0, r9
 80068b2:	f000 fcb1 	bl	8007218 <_Bfree>
 80068b6:	e0b0      	b.n	8006a1a <_dtoa_r+0x622>
 80068b8:	07e2      	lsls	r2, r4, #31
 80068ba:	d505      	bpl.n	80068c8 <_dtoa_r+0x4d0>
 80068bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068c0:	f7f9 feaa 	bl	8000618 <__aeabi_dmul>
 80068c4:	3601      	adds	r6, #1
 80068c6:	2301      	movs	r3, #1
 80068c8:	1064      	asrs	r4, r4, #1
 80068ca:	3508      	adds	r5, #8
 80068cc:	e762      	b.n	8006794 <_dtoa_r+0x39c>
 80068ce:	2602      	movs	r6, #2
 80068d0:	e765      	b.n	800679e <_dtoa_r+0x3a6>
 80068d2:	9c03      	ldr	r4, [sp, #12]
 80068d4:	46b8      	mov	r8, r7
 80068d6:	e784      	b.n	80067e2 <_dtoa_r+0x3ea>
 80068d8:	4b27      	ldr	r3, [pc, #156]	@ (8006978 <_dtoa_r+0x580>)
 80068da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068e4:	4454      	add	r4, sl
 80068e6:	2900      	cmp	r1, #0
 80068e8:	d054      	beq.n	8006994 <_dtoa_r+0x59c>
 80068ea:	4929      	ldr	r1, [pc, #164]	@ (8006990 <_dtoa_r+0x598>)
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7f9 ffbd 	bl	800086c <__aeabi_ddiv>
 80068f2:	4633      	mov	r3, r6
 80068f4:	462a      	mov	r2, r5
 80068f6:	f7f9 fcd7 	bl	80002a8 <__aeabi_dsub>
 80068fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068fe:	4656      	mov	r6, sl
 8006900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006904:	f7fa f938 	bl	8000b78 <__aeabi_d2iz>
 8006908:	4605      	mov	r5, r0
 800690a:	f7f9 fe1b 	bl	8000544 <__aeabi_i2d>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006916:	f7f9 fcc7 	bl	80002a8 <__aeabi_dsub>
 800691a:	3530      	adds	r5, #48	@ 0x30
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006924:	f806 5b01 	strb.w	r5, [r6], #1
 8006928:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800692c:	f7fa f8e6 	bl	8000afc <__aeabi_dcmplt>
 8006930:	2800      	cmp	r0, #0
 8006932:	d172      	bne.n	8006a1a <_dtoa_r+0x622>
 8006934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006938:	4911      	ldr	r1, [pc, #68]	@ (8006980 <_dtoa_r+0x588>)
 800693a:	2000      	movs	r0, #0
 800693c:	f7f9 fcb4 	bl	80002a8 <__aeabi_dsub>
 8006940:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006944:	f7fa f8da 	bl	8000afc <__aeabi_dcmplt>
 8006948:	2800      	cmp	r0, #0
 800694a:	f040 80b4 	bne.w	8006ab6 <_dtoa_r+0x6be>
 800694e:	42a6      	cmp	r6, r4
 8006950:	f43f af70 	beq.w	8006834 <_dtoa_r+0x43c>
 8006954:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006958:	4b0a      	ldr	r3, [pc, #40]	@ (8006984 <_dtoa_r+0x58c>)
 800695a:	2200      	movs	r2, #0
 800695c:	f7f9 fe5c 	bl	8000618 <__aeabi_dmul>
 8006960:	4b08      	ldr	r3, [pc, #32]	@ (8006984 <_dtoa_r+0x58c>)
 8006962:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006966:	2200      	movs	r2, #0
 8006968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800696c:	f7f9 fe54 	bl	8000618 <__aeabi_dmul>
 8006970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006974:	e7c4      	b.n	8006900 <_dtoa_r+0x508>
 8006976:	bf00      	nop
 8006978:	08008958 	.word	0x08008958
 800697c:	08008930 	.word	0x08008930
 8006980:	3ff00000 	.word	0x3ff00000
 8006984:	40240000 	.word	0x40240000
 8006988:	401c0000 	.word	0x401c0000
 800698c:	40140000 	.word	0x40140000
 8006990:	3fe00000 	.word	0x3fe00000
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	f7f9 fe3e 	bl	8000618 <__aeabi_dmul>
 800699c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80069a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80069a2:	4656      	mov	r6, sl
 80069a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a8:	f7fa f8e6 	bl	8000b78 <__aeabi_d2iz>
 80069ac:	4605      	mov	r5, r0
 80069ae:	f7f9 fdc9 	bl	8000544 <__aeabi_i2d>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ba:	f7f9 fc75 	bl	80002a8 <__aeabi_dsub>
 80069be:	3530      	adds	r5, #48	@ 0x30
 80069c0:	f806 5b01 	strb.w	r5, [r6], #1
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	42a6      	cmp	r6, r4
 80069ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	d124      	bne.n	8006a1e <_dtoa_r+0x626>
 80069d4:	4baf      	ldr	r3, [pc, #700]	@ (8006c94 <_dtoa_r+0x89c>)
 80069d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80069da:	f7f9 fc67 	bl	80002ac <__adddf3>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069e6:	f7fa f8a7 	bl	8000b38 <__aeabi_dcmpgt>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d163      	bne.n	8006ab6 <_dtoa_r+0x6be>
 80069ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069f2:	49a8      	ldr	r1, [pc, #672]	@ (8006c94 <_dtoa_r+0x89c>)
 80069f4:	2000      	movs	r0, #0
 80069f6:	f7f9 fc57 	bl	80002a8 <__aeabi_dsub>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a02:	f7fa f87b 	bl	8000afc <__aeabi_dcmplt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f43f af14 	beq.w	8006834 <_dtoa_r+0x43c>
 8006a0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006a0e:	1e73      	subs	r3, r6, #1
 8006a10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a16:	2b30      	cmp	r3, #48	@ 0x30
 8006a18:	d0f8      	beq.n	8006a0c <_dtoa_r+0x614>
 8006a1a:	4647      	mov	r7, r8
 8006a1c:	e03b      	b.n	8006a96 <_dtoa_r+0x69e>
 8006a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8006c98 <_dtoa_r+0x8a0>)
 8006a20:	f7f9 fdfa 	bl	8000618 <__aeabi_dmul>
 8006a24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a28:	e7bc      	b.n	80069a4 <_dtoa_r+0x5ac>
 8006a2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006a2e:	4656      	mov	r6, sl
 8006a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 ff18 	bl	800086c <__aeabi_ddiv>
 8006a3c:	f7fa f89c 	bl	8000b78 <__aeabi_d2iz>
 8006a40:	4680      	mov	r8, r0
 8006a42:	f7f9 fd7f 	bl	8000544 <__aeabi_i2d>
 8006a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a4a:	f7f9 fde5 	bl	8000618 <__aeabi_dmul>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006a5a:	f7f9 fc25 	bl	80002a8 <__aeabi_dsub>
 8006a5e:	f806 4b01 	strb.w	r4, [r6], #1
 8006a62:	9d03      	ldr	r5, [sp, #12]
 8006a64:	eba6 040a 	sub.w	r4, r6, sl
 8006a68:	42a5      	cmp	r5, r4
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	d133      	bne.n	8006ad8 <_dtoa_r+0x6e0>
 8006a70:	f7f9 fc1c 	bl	80002ac <__adddf3>
 8006a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a78:	4604      	mov	r4, r0
 8006a7a:	460d      	mov	r5, r1
 8006a7c:	f7fa f85c 	bl	8000b38 <__aeabi_dcmpgt>
 8006a80:	b9c0      	cbnz	r0, 8006ab4 <_dtoa_r+0x6bc>
 8006a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a86:	4620      	mov	r0, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f7fa f82d 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a8e:	b110      	cbz	r0, 8006a96 <_dtoa_r+0x69e>
 8006a90:	f018 0f01 	tst.w	r8, #1
 8006a94:	d10e      	bne.n	8006ab4 <_dtoa_r+0x6bc>
 8006a96:	9902      	ldr	r1, [sp, #8]
 8006a98:	4648      	mov	r0, r9
 8006a9a:	f000 fbbd 	bl	8007218 <_Bfree>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	7033      	strb	r3, [r6, #0]
 8006aa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006aa4:	3701      	adds	r7, #1
 8006aa6:	601f      	str	r7, [r3, #0]
 8006aa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 824b 	beq.w	8006f46 <_dtoa_r+0xb4e>
 8006ab0:	601e      	str	r6, [r3, #0]
 8006ab2:	e248      	b.n	8006f46 <_dtoa_r+0xb4e>
 8006ab4:	46b8      	mov	r8, r7
 8006ab6:	4633      	mov	r3, r6
 8006ab8:	461e      	mov	r6, r3
 8006aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006abe:	2a39      	cmp	r2, #57	@ 0x39
 8006ac0:	d106      	bne.n	8006ad0 <_dtoa_r+0x6d8>
 8006ac2:	459a      	cmp	sl, r3
 8006ac4:	d1f8      	bne.n	8006ab8 <_dtoa_r+0x6c0>
 8006ac6:	2230      	movs	r2, #48	@ 0x30
 8006ac8:	f108 0801 	add.w	r8, r8, #1
 8006acc:	f88a 2000 	strb.w	r2, [sl]
 8006ad0:	781a      	ldrb	r2, [r3, #0]
 8006ad2:	3201      	adds	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e7a0      	b.n	8006a1a <_dtoa_r+0x622>
 8006ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8006c98 <_dtoa_r+0x8a0>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	f7f9 fd9c 	bl	8000618 <__aeabi_dmul>
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	460d      	mov	r5, r1
 8006ae8:	f7f9 fffe 	bl	8000ae8 <__aeabi_dcmpeq>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d09f      	beq.n	8006a30 <_dtoa_r+0x638>
 8006af0:	e7d1      	b.n	8006a96 <_dtoa_r+0x69e>
 8006af2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	f000 80ea 	beq.w	8006cce <_dtoa_r+0x8d6>
 8006afa:	9a07      	ldr	r2, [sp, #28]
 8006afc:	2a01      	cmp	r2, #1
 8006afe:	f300 80cd 	bgt.w	8006c9c <_dtoa_r+0x8a4>
 8006b02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b04:	2a00      	cmp	r2, #0
 8006b06:	f000 80c1 	beq.w	8006c8c <_dtoa_r+0x894>
 8006b0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b0e:	9c08      	ldr	r4, [sp, #32]
 8006b10:	9e00      	ldr	r6, [sp, #0]
 8006b12:	9a00      	ldr	r2, [sp, #0]
 8006b14:	441a      	add	r2, r3
 8006b16:	9200      	str	r2, [sp, #0]
 8006b18:	9a06      	ldr	r2, [sp, #24]
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	441a      	add	r2, r3
 8006b1e:	4648      	mov	r0, r9
 8006b20:	9206      	str	r2, [sp, #24]
 8006b22:	f000 fc2d 	bl	8007380 <__i2b>
 8006b26:	4605      	mov	r5, r0
 8006b28:	b166      	cbz	r6, 8006b44 <_dtoa_r+0x74c>
 8006b2a:	9b06      	ldr	r3, [sp, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd09      	ble.n	8006b44 <_dtoa_r+0x74c>
 8006b30:	42b3      	cmp	r3, r6
 8006b32:	9a00      	ldr	r2, [sp, #0]
 8006b34:	bfa8      	it	ge
 8006b36:	4633      	movge	r3, r6
 8006b38:	1ad2      	subs	r2, r2, r3
 8006b3a:	9200      	str	r2, [sp, #0]
 8006b3c:	9a06      	ldr	r2, [sp, #24]
 8006b3e:	1af6      	subs	r6, r6, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	9306      	str	r3, [sp, #24]
 8006b44:	9b08      	ldr	r3, [sp, #32]
 8006b46:	b30b      	cbz	r3, 8006b8c <_dtoa_r+0x794>
 8006b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 80c6 	beq.w	8006cdc <_dtoa_r+0x8e4>
 8006b50:	2c00      	cmp	r4, #0
 8006b52:	f000 80c0 	beq.w	8006cd6 <_dtoa_r+0x8de>
 8006b56:	4629      	mov	r1, r5
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4648      	mov	r0, r9
 8006b5c:	f000 fcc8 	bl	80074f0 <__pow5mult>
 8006b60:	9a02      	ldr	r2, [sp, #8]
 8006b62:	4601      	mov	r1, r0
 8006b64:	4605      	mov	r5, r0
 8006b66:	4648      	mov	r0, r9
 8006b68:	f000 fc20 	bl	80073ac <__multiply>
 8006b6c:	9902      	ldr	r1, [sp, #8]
 8006b6e:	4680      	mov	r8, r0
 8006b70:	4648      	mov	r0, r9
 8006b72:	f000 fb51 	bl	8007218 <_Bfree>
 8006b76:	9b08      	ldr	r3, [sp, #32]
 8006b78:	1b1b      	subs	r3, r3, r4
 8006b7a:	9308      	str	r3, [sp, #32]
 8006b7c:	f000 80b1 	beq.w	8006ce2 <_dtoa_r+0x8ea>
 8006b80:	9a08      	ldr	r2, [sp, #32]
 8006b82:	4641      	mov	r1, r8
 8006b84:	4648      	mov	r0, r9
 8006b86:	f000 fcb3 	bl	80074f0 <__pow5mult>
 8006b8a:	9002      	str	r0, [sp, #8]
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4648      	mov	r0, r9
 8006b90:	f000 fbf6 	bl	8007380 <__i2b>
 8006b94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b96:	4604      	mov	r4, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 81d8 	beq.w	8006f4e <_dtoa_r+0xb56>
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4601      	mov	r1, r0
 8006ba2:	4648      	mov	r0, r9
 8006ba4:	f000 fca4 	bl	80074f0 <__pow5mult>
 8006ba8:	9b07      	ldr	r3, [sp, #28]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	4604      	mov	r4, r0
 8006bae:	f300 809f 	bgt.w	8006cf0 <_dtoa_r+0x8f8>
 8006bb2:	9b04      	ldr	r3, [sp, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 8097 	bne.w	8006ce8 <_dtoa_r+0x8f0>
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f040 8093 	bne.w	8006cec <_dtoa_r+0x8f4>
 8006bc6:	9b05      	ldr	r3, [sp, #20]
 8006bc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bcc:	0d1b      	lsrs	r3, r3, #20
 8006bce:	051b      	lsls	r3, r3, #20
 8006bd0:	b133      	cbz	r3, 8006be0 <_dtoa_r+0x7e8>
 8006bd2:	9b00      	ldr	r3, [sp, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	9b06      	ldr	r3, [sp, #24]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	9306      	str	r3, [sp, #24]
 8006bde:	2301      	movs	r3, #1
 8006be0:	9308      	str	r3, [sp, #32]
 8006be2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 81b8 	beq.w	8006f5a <_dtoa_r+0xb62>
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bf0:	6918      	ldr	r0, [r3, #16]
 8006bf2:	f000 fb79 	bl	80072e8 <__hi0bits>
 8006bf6:	f1c0 0020 	rsb	r0, r0, #32
 8006bfa:	9b06      	ldr	r3, [sp, #24]
 8006bfc:	4418      	add	r0, r3
 8006bfe:	f010 001f 	ands.w	r0, r0, #31
 8006c02:	f000 8082 	beq.w	8006d0a <_dtoa_r+0x912>
 8006c06:	f1c0 0320 	rsb	r3, r0, #32
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	dd73      	ble.n	8006cf6 <_dtoa_r+0x8fe>
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	f1c0 001c 	rsb	r0, r0, #28
 8006c14:	4403      	add	r3, r0
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	9b06      	ldr	r3, [sp, #24]
 8006c1a:	4403      	add	r3, r0
 8006c1c:	4406      	add	r6, r0
 8006c1e:	9306      	str	r3, [sp, #24]
 8006c20:	9b00      	ldr	r3, [sp, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dd05      	ble.n	8006c32 <_dtoa_r+0x83a>
 8006c26:	9902      	ldr	r1, [sp, #8]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4648      	mov	r0, r9
 8006c2c:	f000 fcba 	bl	80075a4 <__lshift>
 8006c30:	9002      	str	r0, [sp, #8]
 8006c32:	9b06      	ldr	r3, [sp, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dd05      	ble.n	8006c44 <_dtoa_r+0x84c>
 8006c38:	4621      	mov	r1, r4
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f000 fcb1 	bl	80075a4 <__lshift>
 8006c42:	4604      	mov	r4, r0
 8006c44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d061      	beq.n	8006d0e <_dtoa_r+0x916>
 8006c4a:	9802      	ldr	r0, [sp, #8]
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f000 fd15 	bl	800767c <__mcmp>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	da5b      	bge.n	8006d0e <_dtoa_r+0x916>
 8006c56:	2300      	movs	r3, #0
 8006c58:	9902      	ldr	r1, [sp, #8]
 8006c5a:	220a      	movs	r2, #10
 8006c5c:	4648      	mov	r0, r9
 8006c5e:	f000 fafd 	bl	800725c <__multadd>
 8006c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c64:	9002      	str	r0, [sp, #8]
 8006c66:	f107 38ff 	add.w	r8, r7, #4294967295
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8177 	beq.w	8006f5e <_dtoa_r+0xb66>
 8006c70:	4629      	mov	r1, r5
 8006c72:	2300      	movs	r3, #0
 8006c74:	220a      	movs	r2, #10
 8006c76:	4648      	mov	r0, r9
 8006c78:	f000 faf0 	bl	800725c <__multadd>
 8006c7c:	f1bb 0f00 	cmp.w	fp, #0
 8006c80:	4605      	mov	r5, r0
 8006c82:	dc6f      	bgt.n	8006d64 <_dtoa_r+0x96c>
 8006c84:	9b07      	ldr	r3, [sp, #28]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	dc49      	bgt.n	8006d1e <_dtoa_r+0x926>
 8006c8a:	e06b      	b.n	8006d64 <_dtoa_r+0x96c>
 8006c8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c92:	e73c      	b.n	8006b0e <_dtoa_r+0x716>
 8006c94:	3fe00000 	.word	0x3fe00000
 8006c98:	40240000 	.word	0x40240000
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	1e5c      	subs	r4, r3, #1
 8006ca0:	9b08      	ldr	r3, [sp, #32]
 8006ca2:	42a3      	cmp	r3, r4
 8006ca4:	db09      	blt.n	8006cba <_dtoa_r+0x8c2>
 8006ca6:	1b1c      	subs	r4, r3, r4
 8006ca8:	9b03      	ldr	r3, [sp, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f6bf af30 	bge.w	8006b10 <_dtoa_r+0x718>
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	9a03      	ldr	r2, [sp, #12]
 8006cb4:	1a9e      	subs	r6, r3, r2
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e72b      	b.n	8006b12 <_dtoa_r+0x71a>
 8006cba:	9b08      	ldr	r3, [sp, #32]
 8006cbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006cbe:	9408      	str	r4, [sp, #32]
 8006cc0:	1ae3      	subs	r3, r4, r3
 8006cc2:	441a      	add	r2, r3
 8006cc4:	9e00      	ldr	r6, [sp, #0]
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006cca:	2400      	movs	r4, #0
 8006ccc:	e721      	b.n	8006b12 <_dtoa_r+0x71a>
 8006cce:	9c08      	ldr	r4, [sp, #32]
 8006cd0:	9e00      	ldr	r6, [sp, #0]
 8006cd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006cd4:	e728      	b.n	8006b28 <_dtoa_r+0x730>
 8006cd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006cda:	e751      	b.n	8006b80 <_dtoa_r+0x788>
 8006cdc:	9a08      	ldr	r2, [sp, #32]
 8006cde:	9902      	ldr	r1, [sp, #8]
 8006ce0:	e750      	b.n	8006b84 <_dtoa_r+0x78c>
 8006ce2:	f8cd 8008 	str.w	r8, [sp, #8]
 8006ce6:	e751      	b.n	8006b8c <_dtoa_r+0x794>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e779      	b.n	8006be0 <_dtoa_r+0x7e8>
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	e777      	b.n	8006be0 <_dtoa_r+0x7e8>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9308      	str	r3, [sp, #32]
 8006cf4:	e779      	b.n	8006bea <_dtoa_r+0x7f2>
 8006cf6:	d093      	beq.n	8006c20 <_dtoa_r+0x828>
 8006cf8:	9a00      	ldr	r2, [sp, #0]
 8006cfa:	331c      	adds	r3, #28
 8006cfc:	441a      	add	r2, r3
 8006cfe:	9200      	str	r2, [sp, #0]
 8006d00:	9a06      	ldr	r2, [sp, #24]
 8006d02:	441a      	add	r2, r3
 8006d04:	441e      	add	r6, r3
 8006d06:	9206      	str	r2, [sp, #24]
 8006d08:	e78a      	b.n	8006c20 <_dtoa_r+0x828>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	e7f4      	b.n	8006cf8 <_dtoa_r+0x900>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	46b8      	mov	r8, r7
 8006d14:	dc20      	bgt.n	8006d58 <_dtoa_r+0x960>
 8006d16:	469b      	mov	fp, r3
 8006d18:	9b07      	ldr	r3, [sp, #28]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	dd1e      	ble.n	8006d5c <_dtoa_r+0x964>
 8006d1e:	f1bb 0f00 	cmp.w	fp, #0
 8006d22:	f47f adb1 	bne.w	8006888 <_dtoa_r+0x490>
 8006d26:	4621      	mov	r1, r4
 8006d28:	465b      	mov	r3, fp
 8006d2a:	2205      	movs	r2, #5
 8006d2c:	4648      	mov	r0, r9
 8006d2e:	f000 fa95 	bl	800725c <__multadd>
 8006d32:	4601      	mov	r1, r0
 8006d34:	4604      	mov	r4, r0
 8006d36:	9802      	ldr	r0, [sp, #8]
 8006d38:	f000 fca0 	bl	800767c <__mcmp>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f77f ada3 	ble.w	8006888 <_dtoa_r+0x490>
 8006d42:	4656      	mov	r6, sl
 8006d44:	2331      	movs	r3, #49	@ 0x31
 8006d46:	f806 3b01 	strb.w	r3, [r6], #1
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	e59f      	b.n	8006890 <_dtoa_r+0x498>
 8006d50:	9c03      	ldr	r4, [sp, #12]
 8006d52:	46b8      	mov	r8, r7
 8006d54:	4625      	mov	r5, r4
 8006d56:	e7f4      	b.n	8006d42 <_dtoa_r+0x94a>
 8006d58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8101 	beq.w	8006f66 <_dtoa_r+0xb6e>
 8006d64:	2e00      	cmp	r6, #0
 8006d66:	dd05      	ble.n	8006d74 <_dtoa_r+0x97c>
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4632      	mov	r2, r6
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f000 fc19 	bl	80075a4 <__lshift>
 8006d72:	4605      	mov	r5, r0
 8006d74:	9b08      	ldr	r3, [sp, #32]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d05c      	beq.n	8006e34 <_dtoa_r+0xa3c>
 8006d7a:	6869      	ldr	r1, [r5, #4]
 8006d7c:	4648      	mov	r0, r9
 8006d7e:	f000 fa0b 	bl	8007198 <_Balloc>
 8006d82:	4606      	mov	r6, r0
 8006d84:	b928      	cbnz	r0, 8006d92 <_dtoa_r+0x99a>
 8006d86:	4b82      	ldr	r3, [pc, #520]	@ (8006f90 <_dtoa_r+0xb98>)
 8006d88:	4602      	mov	r2, r0
 8006d8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d8e:	f7ff bb4a 	b.w	8006426 <_dtoa_r+0x2e>
 8006d92:	692a      	ldr	r2, [r5, #16]
 8006d94:	3202      	adds	r2, #2
 8006d96:	0092      	lsls	r2, r2, #2
 8006d98:	f105 010c 	add.w	r1, r5, #12
 8006d9c:	300c      	adds	r0, #12
 8006d9e:	f000 ffa3 	bl	8007ce8 <memcpy>
 8006da2:	2201      	movs	r2, #1
 8006da4:	4631      	mov	r1, r6
 8006da6:	4648      	mov	r0, r9
 8006da8:	f000 fbfc 	bl	80075a4 <__lshift>
 8006dac:	f10a 0301 	add.w	r3, sl, #1
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	eb0a 030b 	add.w	r3, sl, fp
 8006db6:	9308      	str	r3, [sp, #32]
 8006db8:	9b04      	ldr	r3, [sp, #16]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	462f      	mov	r7, r5
 8006dc0:	9306      	str	r3, [sp, #24]
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	9b00      	ldr	r3, [sp, #0]
 8006dc6:	9802      	ldr	r0, [sp, #8]
 8006dc8:	4621      	mov	r1, r4
 8006dca:	f103 3bff 	add.w	fp, r3, #4294967295
 8006dce:	f7ff fa8a 	bl	80062e6 <quorem>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	3330      	adds	r3, #48	@ 0x30
 8006dd6:	9003      	str	r0, [sp, #12]
 8006dd8:	4639      	mov	r1, r7
 8006dda:	9802      	ldr	r0, [sp, #8]
 8006ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dde:	f000 fc4d 	bl	800767c <__mcmp>
 8006de2:	462a      	mov	r2, r5
 8006de4:	9004      	str	r0, [sp, #16]
 8006de6:	4621      	mov	r1, r4
 8006de8:	4648      	mov	r0, r9
 8006dea:	f000 fc63 	bl	80076b4 <__mdiff>
 8006dee:	68c2      	ldr	r2, [r0, #12]
 8006df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df2:	4606      	mov	r6, r0
 8006df4:	bb02      	cbnz	r2, 8006e38 <_dtoa_r+0xa40>
 8006df6:	4601      	mov	r1, r0
 8006df8:	9802      	ldr	r0, [sp, #8]
 8006dfa:	f000 fc3f 	bl	800767c <__mcmp>
 8006dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e00:	4602      	mov	r2, r0
 8006e02:	4631      	mov	r1, r6
 8006e04:	4648      	mov	r0, r9
 8006e06:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0a:	f000 fa05 	bl	8007218 <_Bfree>
 8006e0e:	9b07      	ldr	r3, [sp, #28]
 8006e10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e12:	9e00      	ldr	r6, [sp, #0]
 8006e14:	ea42 0103 	orr.w	r1, r2, r3
 8006e18:	9b06      	ldr	r3, [sp, #24]
 8006e1a:	4319      	orrs	r1, r3
 8006e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1e:	d10d      	bne.n	8006e3c <_dtoa_r+0xa44>
 8006e20:	2b39      	cmp	r3, #57	@ 0x39
 8006e22:	d027      	beq.n	8006e74 <_dtoa_r+0xa7c>
 8006e24:	9a04      	ldr	r2, [sp, #16]
 8006e26:	2a00      	cmp	r2, #0
 8006e28:	dd01      	ble.n	8006e2e <_dtoa_r+0xa36>
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	3331      	adds	r3, #49	@ 0x31
 8006e2e:	f88b 3000 	strb.w	r3, [fp]
 8006e32:	e52e      	b.n	8006892 <_dtoa_r+0x49a>
 8006e34:	4628      	mov	r0, r5
 8006e36:	e7b9      	b.n	8006dac <_dtoa_r+0x9b4>
 8006e38:	2201      	movs	r2, #1
 8006e3a:	e7e2      	b.n	8006e02 <_dtoa_r+0xa0a>
 8006e3c:	9904      	ldr	r1, [sp, #16]
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	db04      	blt.n	8006e4c <_dtoa_r+0xa54>
 8006e42:	9807      	ldr	r0, [sp, #28]
 8006e44:	4301      	orrs	r1, r0
 8006e46:	9806      	ldr	r0, [sp, #24]
 8006e48:	4301      	orrs	r1, r0
 8006e4a:	d120      	bne.n	8006e8e <_dtoa_r+0xa96>
 8006e4c:	2a00      	cmp	r2, #0
 8006e4e:	ddee      	ble.n	8006e2e <_dtoa_r+0xa36>
 8006e50:	9902      	ldr	r1, [sp, #8]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	2201      	movs	r2, #1
 8006e56:	4648      	mov	r0, r9
 8006e58:	f000 fba4 	bl	80075a4 <__lshift>
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	9002      	str	r0, [sp, #8]
 8006e60:	f000 fc0c 	bl	800767c <__mcmp>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	9b00      	ldr	r3, [sp, #0]
 8006e68:	dc02      	bgt.n	8006e70 <_dtoa_r+0xa78>
 8006e6a:	d1e0      	bne.n	8006e2e <_dtoa_r+0xa36>
 8006e6c:	07da      	lsls	r2, r3, #31
 8006e6e:	d5de      	bpl.n	8006e2e <_dtoa_r+0xa36>
 8006e70:	2b39      	cmp	r3, #57	@ 0x39
 8006e72:	d1da      	bne.n	8006e2a <_dtoa_r+0xa32>
 8006e74:	2339      	movs	r3, #57	@ 0x39
 8006e76:	f88b 3000 	strb.w	r3, [fp]
 8006e7a:	4633      	mov	r3, r6
 8006e7c:	461e      	mov	r6, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e84:	2a39      	cmp	r2, #57	@ 0x39
 8006e86:	d04e      	beq.n	8006f26 <_dtoa_r+0xb2e>
 8006e88:	3201      	adds	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e501      	b.n	8006892 <_dtoa_r+0x49a>
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	dd03      	ble.n	8006e9a <_dtoa_r+0xaa2>
 8006e92:	2b39      	cmp	r3, #57	@ 0x39
 8006e94:	d0ee      	beq.n	8006e74 <_dtoa_r+0xa7c>
 8006e96:	3301      	adds	r3, #1
 8006e98:	e7c9      	b.n	8006e2e <_dtoa_r+0xa36>
 8006e9a:	9a00      	ldr	r2, [sp, #0]
 8006e9c:	9908      	ldr	r1, [sp, #32]
 8006e9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ea2:	428a      	cmp	r2, r1
 8006ea4:	d028      	beq.n	8006ef8 <_dtoa_r+0xb00>
 8006ea6:	9902      	ldr	r1, [sp, #8]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	220a      	movs	r2, #10
 8006eac:	4648      	mov	r0, r9
 8006eae:	f000 f9d5 	bl	800725c <__multadd>
 8006eb2:	42af      	cmp	r7, r5
 8006eb4:	9002      	str	r0, [sp, #8]
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	f04f 020a 	mov.w	r2, #10
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	4648      	mov	r0, r9
 8006ec2:	d107      	bne.n	8006ed4 <_dtoa_r+0xadc>
 8006ec4:	f000 f9ca 	bl	800725c <__multadd>
 8006ec8:	4607      	mov	r7, r0
 8006eca:	4605      	mov	r5, r0
 8006ecc:	9b00      	ldr	r3, [sp, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	e777      	b.n	8006dc4 <_dtoa_r+0x9cc>
 8006ed4:	f000 f9c2 	bl	800725c <__multadd>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4607      	mov	r7, r0
 8006edc:	2300      	movs	r3, #0
 8006ede:	220a      	movs	r2, #10
 8006ee0:	4648      	mov	r0, r9
 8006ee2:	f000 f9bb 	bl	800725c <__multadd>
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	e7f0      	b.n	8006ecc <_dtoa_r+0xad4>
 8006eea:	f1bb 0f00 	cmp.w	fp, #0
 8006eee:	bfcc      	ite	gt
 8006ef0:	465e      	movgt	r6, fp
 8006ef2:	2601      	movle	r6, #1
 8006ef4:	4456      	add	r6, sl
 8006ef6:	2700      	movs	r7, #0
 8006ef8:	9902      	ldr	r1, [sp, #8]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	2201      	movs	r2, #1
 8006efe:	4648      	mov	r0, r9
 8006f00:	f000 fb50 	bl	80075a4 <__lshift>
 8006f04:	4621      	mov	r1, r4
 8006f06:	9002      	str	r0, [sp, #8]
 8006f08:	f000 fbb8 	bl	800767c <__mcmp>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	dcb4      	bgt.n	8006e7a <_dtoa_r+0xa82>
 8006f10:	d102      	bne.n	8006f18 <_dtoa_r+0xb20>
 8006f12:	9b00      	ldr	r3, [sp, #0]
 8006f14:	07db      	lsls	r3, r3, #31
 8006f16:	d4b0      	bmi.n	8006e7a <_dtoa_r+0xa82>
 8006f18:	4633      	mov	r3, r6
 8006f1a:	461e      	mov	r6, r3
 8006f1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f20:	2a30      	cmp	r2, #48	@ 0x30
 8006f22:	d0fa      	beq.n	8006f1a <_dtoa_r+0xb22>
 8006f24:	e4b5      	b.n	8006892 <_dtoa_r+0x49a>
 8006f26:	459a      	cmp	sl, r3
 8006f28:	d1a8      	bne.n	8006e7c <_dtoa_r+0xa84>
 8006f2a:	2331      	movs	r3, #49	@ 0x31
 8006f2c:	f108 0801 	add.w	r8, r8, #1
 8006f30:	f88a 3000 	strb.w	r3, [sl]
 8006f34:	e4ad      	b.n	8006892 <_dtoa_r+0x49a>
 8006f36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006f94 <_dtoa_r+0xb9c>
 8006f3c:	b11b      	cbz	r3, 8006f46 <_dtoa_r+0xb4e>
 8006f3e:	f10a 0308 	add.w	r3, sl, #8
 8006f42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4650      	mov	r0, sl
 8006f48:	b017      	add	sp, #92	@ 0x5c
 8006f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	9b07      	ldr	r3, [sp, #28]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	f77f ae2e 	ble.w	8006bb2 <_dtoa_r+0x7ba>
 8006f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f58:	9308      	str	r3, [sp, #32]
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	e64d      	b.n	8006bfa <_dtoa_r+0x802>
 8006f5e:	f1bb 0f00 	cmp.w	fp, #0
 8006f62:	f77f aed9 	ble.w	8006d18 <_dtoa_r+0x920>
 8006f66:	4656      	mov	r6, sl
 8006f68:	9802      	ldr	r0, [sp, #8]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	f7ff f9bb 	bl	80062e6 <quorem>
 8006f70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006f74:	f806 3b01 	strb.w	r3, [r6], #1
 8006f78:	eba6 020a 	sub.w	r2, r6, sl
 8006f7c:	4593      	cmp	fp, r2
 8006f7e:	ddb4      	ble.n	8006eea <_dtoa_r+0xaf2>
 8006f80:	9902      	ldr	r1, [sp, #8]
 8006f82:	2300      	movs	r3, #0
 8006f84:	220a      	movs	r2, #10
 8006f86:	4648      	mov	r0, r9
 8006f88:	f000 f968 	bl	800725c <__multadd>
 8006f8c:	9002      	str	r0, [sp, #8]
 8006f8e:	e7eb      	b.n	8006f68 <_dtoa_r+0xb70>
 8006f90:	08008860 	.word	0x08008860
 8006f94:	080087e4 	.word	0x080087e4

08006f98 <_free_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	2900      	cmp	r1, #0
 8006f9e:	d041      	beq.n	8007024 <_free_r+0x8c>
 8006fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa4:	1f0c      	subs	r4, r1, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bfb8      	it	lt
 8006faa:	18e4      	addlt	r4, r4, r3
 8006fac:	f000 f8e8 	bl	8007180 <__malloc_lock>
 8006fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007028 <_free_r+0x90>)
 8006fb2:	6813      	ldr	r3, [r2, #0]
 8006fb4:	b933      	cbnz	r3, 8006fc4 <_free_r+0x2c>
 8006fb6:	6063      	str	r3, [r4, #4]
 8006fb8:	6014      	str	r4, [r2, #0]
 8006fba:	4628      	mov	r0, r5
 8006fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fc0:	f000 b8e4 	b.w	800718c <__malloc_unlock>
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	d908      	bls.n	8006fda <_free_r+0x42>
 8006fc8:	6820      	ldr	r0, [r4, #0]
 8006fca:	1821      	adds	r1, r4, r0
 8006fcc:	428b      	cmp	r3, r1
 8006fce:	bf01      	itttt	eq
 8006fd0:	6819      	ldreq	r1, [r3, #0]
 8006fd2:	685b      	ldreq	r3, [r3, #4]
 8006fd4:	1809      	addeq	r1, r1, r0
 8006fd6:	6021      	streq	r1, [r4, #0]
 8006fd8:	e7ed      	b.n	8006fb6 <_free_r+0x1e>
 8006fda:	461a      	mov	r2, r3
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	b10b      	cbz	r3, 8006fe4 <_free_r+0x4c>
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d9fa      	bls.n	8006fda <_free_r+0x42>
 8006fe4:	6811      	ldr	r1, [r2, #0]
 8006fe6:	1850      	adds	r0, r2, r1
 8006fe8:	42a0      	cmp	r0, r4
 8006fea:	d10b      	bne.n	8007004 <_free_r+0x6c>
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	4401      	add	r1, r0
 8006ff0:	1850      	adds	r0, r2, r1
 8006ff2:	4283      	cmp	r3, r0
 8006ff4:	6011      	str	r1, [r2, #0]
 8006ff6:	d1e0      	bne.n	8006fba <_free_r+0x22>
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	6053      	str	r3, [r2, #4]
 8006ffe:	4408      	add	r0, r1
 8007000:	6010      	str	r0, [r2, #0]
 8007002:	e7da      	b.n	8006fba <_free_r+0x22>
 8007004:	d902      	bls.n	800700c <_free_r+0x74>
 8007006:	230c      	movs	r3, #12
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	e7d6      	b.n	8006fba <_free_r+0x22>
 800700c:	6820      	ldr	r0, [r4, #0]
 800700e:	1821      	adds	r1, r4, r0
 8007010:	428b      	cmp	r3, r1
 8007012:	bf04      	itt	eq
 8007014:	6819      	ldreq	r1, [r3, #0]
 8007016:	685b      	ldreq	r3, [r3, #4]
 8007018:	6063      	str	r3, [r4, #4]
 800701a:	bf04      	itt	eq
 800701c:	1809      	addeq	r1, r1, r0
 800701e:	6021      	streq	r1, [r4, #0]
 8007020:	6054      	str	r4, [r2, #4]
 8007022:	e7ca      	b.n	8006fba <_free_r+0x22>
 8007024:	bd38      	pop	{r3, r4, r5, pc}
 8007026:	bf00      	nop
 8007028:	20000464 	.word	0x20000464

0800702c <malloc>:
 800702c:	4b02      	ldr	r3, [pc, #8]	@ (8007038 <malloc+0xc>)
 800702e:	4601      	mov	r1, r0
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f000 b825 	b.w	8007080 <_malloc_r>
 8007036:	bf00      	nop
 8007038:	20000018 	.word	0x20000018

0800703c <sbrk_aligned>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	4e0f      	ldr	r6, [pc, #60]	@ (800707c <sbrk_aligned+0x40>)
 8007040:	460c      	mov	r4, r1
 8007042:	6831      	ldr	r1, [r6, #0]
 8007044:	4605      	mov	r5, r0
 8007046:	b911      	cbnz	r1, 800704e <sbrk_aligned+0x12>
 8007048:	f000 fe3e 	bl	8007cc8 <_sbrk_r>
 800704c:	6030      	str	r0, [r6, #0]
 800704e:	4621      	mov	r1, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f000 fe39 	bl	8007cc8 <_sbrk_r>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	d103      	bne.n	8007062 <sbrk_aligned+0x26>
 800705a:	f04f 34ff 	mov.w	r4, #4294967295
 800705e:	4620      	mov	r0, r4
 8007060:	bd70      	pop	{r4, r5, r6, pc}
 8007062:	1cc4      	adds	r4, r0, #3
 8007064:	f024 0403 	bic.w	r4, r4, #3
 8007068:	42a0      	cmp	r0, r4
 800706a:	d0f8      	beq.n	800705e <sbrk_aligned+0x22>
 800706c:	1a21      	subs	r1, r4, r0
 800706e:	4628      	mov	r0, r5
 8007070:	f000 fe2a 	bl	8007cc8 <_sbrk_r>
 8007074:	3001      	adds	r0, #1
 8007076:	d1f2      	bne.n	800705e <sbrk_aligned+0x22>
 8007078:	e7ef      	b.n	800705a <sbrk_aligned+0x1e>
 800707a:	bf00      	nop
 800707c:	20000460 	.word	0x20000460

08007080 <_malloc_r>:
 8007080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007084:	1ccd      	adds	r5, r1, #3
 8007086:	f025 0503 	bic.w	r5, r5, #3
 800708a:	3508      	adds	r5, #8
 800708c:	2d0c      	cmp	r5, #12
 800708e:	bf38      	it	cc
 8007090:	250c      	movcc	r5, #12
 8007092:	2d00      	cmp	r5, #0
 8007094:	4606      	mov	r6, r0
 8007096:	db01      	blt.n	800709c <_malloc_r+0x1c>
 8007098:	42a9      	cmp	r1, r5
 800709a:	d904      	bls.n	80070a6 <_malloc_r+0x26>
 800709c:	230c      	movs	r3, #12
 800709e:	6033      	str	r3, [r6, #0]
 80070a0:	2000      	movs	r0, #0
 80070a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800717c <_malloc_r+0xfc>
 80070aa:	f000 f869 	bl	8007180 <__malloc_lock>
 80070ae:	f8d8 3000 	ldr.w	r3, [r8]
 80070b2:	461c      	mov	r4, r3
 80070b4:	bb44      	cbnz	r4, 8007108 <_malloc_r+0x88>
 80070b6:	4629      	mov	r1, r5
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff ffbf 	bl	800703c <sbrk_aligned>
 80070be:	1c43      	adds	r3, r0, #1
 80070c0:	4604      	mov	r4, r0
 80070c2:	d158      	bne.n	8007176 <_malloc_r+0xf6>
 80070c4:	f8d8 4000 	ldr.w	r4, [r8]
 80070c8:	4627      	mov	r7, r4
 80070ca:	2f00      	cmp	r7, #0
 80070cc:	d143      	bne.n	8007156 <_malloc_r+0xd6>
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	d04b      	beq.n	800716a <_malloc_r+0xea>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	4639      	mov	r1, r7
 80070d6:	4630      	mov	r0, r6
 80070d8:	eb04 0903 	add.w	r9, r4, r3
 80070dc:	f000 fdf4 	bl	8007cc8 <_sbrk_r>
 80070e0:	4581      	cmp	r9, r0
 80070e2:	d142      	bne.n	800716a <_malloc_r+0xea>
 80070e4:	6821      	ldr	r1, [r4, #0]
 80070e6:	1a6d      	subs	r5, r5, r1
 80070e8:	4629      	mov	r1, r5
 80070ea:	4630      	mov	r0, r6
 80070ec:	f7ff ffa6 	bl	800703c <sbrk_aligned>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d03a      	beq.n	800716a <_malloc_r+0xea>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	442b      	add	r3, r5
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	f8d8 3000 	ldr.w	r3, [r8]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	bb62      	cbnz	r2, 800715c <_malloc_r+0xdc>
 8007102:	f8c8 7000 	str.w	r7, [r8]
 8007106:	e00f      	b.n	8007128 <_malloc_r+0xa8>
 8007108:	6822      	ldr	r2, [r4, #0]
 800710a:	1b52      	subs	r2, r2, r5
 800710c:	d420      	bmi.n	8007150 <_malloc_r+0xd0>
 800710e:	2a0b      	cmp	r2, #11
 8007110:	d917      	bls.n	8007142 <_malloc_r+0xc2>
 8007112:	1961      	adds	r1, r4, r5
 8007114:	42a3      	cmp	r3, r4
 8007116:	6025      	str	r5, [r4, #0]
 8007118:	bf18      	it	ne
 800711a:	6059      	strne	r1, [r3, #4]
 800711c:	6863      	ldr	r3, [r4, #4]
 800711e:	bf08      	it	eq
 8007120:	f8c8 1000 	streq.w	r1, [r8]
 8007124:	5162      	str	r2, [r4, r5]
 8007126:	604b      	str	r3, [r1, #4]
 8007128:	4630      	mov	r0, r6
 800712a:	f000 f82f 	bl	800718c <__malloc_unlock>
 800712e:	f104 000b 	add.w	r0, r4, #11
 8007132:	1d23      	adds	r3, r4, #4
 8007134:	f020 0007 	bic.w	r0, r0, #7
 8007138:	1ac2      	subs	r2, r0, r3
 800713a:	bf1c      	itt	ne
 800713c:	1a1b      	subne	r3, r3, r0
 800713e:	50a3      	strne	r3, [r4, r2]
 8007140:	e7af      	b.n	80070a2 <_malloc_r+0x22>
 8007142:	6862      	ldr	r2, [r4, #4]
 8007144:	42a3      	cmp	r3, r4
 8007146:	bf0c      	ite	eq
 8007148:	f8c8 2000 	streq.w	r2, [r8]
 800714c:	605a      	strne	r2, [r3, #4]
 800714e:	e7eb      	b.n	8007128 <_malloc_r+0xa8>
 8007150:	4623      	mov	r3, r4
 8007152:	6864      	ldr	r4, [r4, #4]
 8007154:	e7ae      	b.n	80070b4 <_malloc_r+0x34>
 8007156:	463c      	mov	r4, r7
 8007158:	687f      	ldr	r7, [r7, #4]
 800715a:	e7b6      	b.n	80070ca <_malloc_r+0x4a>
 800715c:	461a      	mov	r2, r3
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	42a3      	cmp	r3, r4
 8007162:	d1fb      	bne.n	800715c <_malloc_r+0xdc>
 8007164:	2300      	movs	r3, #0
 8007166:	6053      	str	r3, [r2, #4]
 8007168:	e7de      	b.n	8007128 <_malloc_r+0xa8>
 800716a:	230c      	movs	r3, #12
 800716c:	6033      	str	r3, [r6, #0]
 800716e:	4630      	mov	r0, r6
 8007170:	f000 f80c 	bl	800718c <__malloc_unlock>
 8007174:	e794      	b.n	80070a0 <_malloc_r+0x20>
 8007176:	6005      	str	r5, [r0, #0]
 8007178:	e7d6      	b.n	8007128 <_malloc_r+0xa8>
 800717a:	bf00      	nop
 800717c:	20000464 	.word	0x20000464

08007180 <__malloc_lock>:
 8007180:	4801      	ldr	r0, [pc, #4]	@ (8007188 <__malloc_lock+0x8>)
 8007182:	f7ff b8ae 	b.w	80062e2 <__retarget_lock_acquire_recursive>
 8007186:	bf00      	nop
 8007188:	2000045c 	.word	0x2000045c

0800718c <__malloc_unlock>:
 800718c:	4801      	ldr	r0, [pc, #4]	@ (8007194 <__malloc_unlock+0x8>)
 800718e:	f7ff b8a9 	b.w	80062e4 <__retarget_lock_release_recursive>
 8007192:	bf00      	nop
 8007194:	2000045c 	.word	0x2000045c

08007198 <_Balloc>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	69c6      	ldr	r6, [r0, #28]
 800719c:	4604      	mov	r4, r0
 800719e:	460d      	mov	r5, r1
 80071a0:	b976      	cbnz	r6, 80071c0 <_Balloc+0x28>
 80071a2:	2010      	movs	r0, #16
 80071a4:	f7ff ff42 	bl	800702c <malloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	61e0      	str	r0, [r4, #28]
 80071ac:	b920      	cbnz	r0, 80071b8 <_Balloc+0x20>
 80071ae:	4b18      	ldr	r3, [pc, #96]	@ (8007210 <_Balloc+0x78>)
 80071b0:	4818      	ldr	r0, [pc, #96]	@ (8007214 <_Balloc+0x7c>)
 80071b2:	216b      	movs	r1, #107	@ 0x6b
 80071b4:	f000 fda6 	bl	8007d04 <__assert_func>
 80071b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071bc:	6006      	str	r6, [r0, #0]
 80071be:	60c6      	str	r6, [r0, #12]
 80071c0:	69e6      	ldr	r6, [r4, #28]
 80071c2:	68f3      	ldr	r3, [r6, #12]
 80071c4:	b183      	cbz	r3, 80071e8 <_Balloc+0x50>
 80071c6:	69e3      	ldr	r3, [r4, #28]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071ce:	b9b8      	cbnz	r0, 8007200 <_Balloc+0x68>
 80071d0:	2101      	movs	r1, #1
 80071d2:	fa01 f605 	lsl.w	r6, r1, r5
 80071d6:	1d72      	adds	r2, r6, #5
 80071d8:	0092      	lsls	r2, r2, #2
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 fdb0 	bl	8007d40 <_calloc_r>
 80071e0:	b160      	cbz	r0, 80071fc <_Balloc+0x64>
 80071e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071e6:	e00e      	b.n	8007206 <_Balloc+0x6e>
 80071e8:	2221      	movs	r2, #33	@ 0x21
 80071ea:	2104      	movs	r1, #4
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fda7 	bl	8007d40 <_calloc_r>
 80071f2:	69e3      	ldr	r3, [r4, #28]
 80071f4:	60f0      	str	r0, [r6, #12]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e4      	bne.n	80071c6 <_Balloc+0x2e>
 80071fc:	2000      	movs	r0, #0
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	6802      	ldr	r2, [r0, #0]
 8007202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007206:	2300      	movs	r3, #0
 8007208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800720c:	e7f7      	b.n	80071fe <_Balloc+0x66>
 800720e:	bf00      	nop
 8007210:	080087f1 	.word	0x080087f1
 8007214:	08008871 	.word	0x08008871

08007218 <_Bfree>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	69c6      	ldr	r6, [r0, #28]
 800721c:	4605      	mov	r5, r0
 800721e:	460c      	mov	r4, r1
 8007220:	b976      	cbnz	r6, 8007240 <_Bfree+0x28>
 8007222:	2010      	movs	r0, #16
 8007224:	f7ff ff02 	bl	800702c <malloc>
 8007228:	4602      	mov	r2, r0
 800722a:	61e8      	str	r0, [r5, #28]
 800722c:	b920      	cbnz	r0, 8007238 <_Bfree+0x20>
 800722e:	4b09      	ldr	r3, [pc, #36]	@ (8007254 <_Bfree+0x3c>)
 8007230:	4809      	ldr	r0, [pc, #36]	@ (8007258 <_Bfree+0x40>)
 8007232:	218f      	movs	r1, #143	@ 0x8f
 8007234:	f000 fd66 	bl	8007d04 <__assert_func>
 8007238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800723c:	6006      	str	r6, [r0, #0]
 800723e:	60c6      	str	r6, [r0, #12]
 8007240:	b13c      	cbz	r4, 8007252 <_Bfree+0x3a>
 8007242:	69eb      	ldr	r3, [r5, #28]
 8007244:	6862      	ldr	r2, [r4, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800724c:	6021      	str	r1, [r4, #0]
 800724e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	080087f1 	.word	0x080087f1
 8007258:	08008871 	.word	0x08008871

0800725c <__multadd>:
 800725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007260:	690d      	ldr	r5, [r1, #16]
 8007262:	4607      	mov	r7, r0
 8007264:	460c      	mov	r4, r1
 8007266:	461e      	mov	r6, r3
 8007268:	f101 0c14 	add.w	ip, r1, #20
 800726c:	2000      	movs	r0, #0
 800726e:	f8dc 3000 	ldr.w	r3, [ip]
 8007272:	b299      	uxth	r1, r3
 8007274:	fb02 6101 	mla	r1, r2, r1, r6
 8007278:	0c1e      	lsrs	r6, r3, #16
 800727a:	0c0b      	lsrs	r3, r1, #16
 800727c:	fb02 3306 	mla	r3, r2, r6, r3
 8007280:	b289      	uxth	r1, r1
 8007282:	3001      	adds	r0, #1
 8007284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007288:	4285      	cmp	r5, r0
 800728a:	f84c 1b04 	str.w	r1, [ip], #4
 800728e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007292:	dcec      	bgt.n	800726e <__multadd+0x12>
 8007294:	b30e      	cbz	r6, 80072da <__multadd+0x7e>
 8007296:	68a3      	ldr	r3, [r4, #8]
 8007298:	42ab      	cmp	r3, r5
 800729a:	dc19      	bgt.n	80072d0 <__multadd+0x74>
 800729c:	6861      	ldr	r1, [r4, #4]
 800729e:	4638      	mov	r0, r7
 80072a0:	3101      	adds	r1, #1
 80072a2:	f7ff ff79 	bl	8007198 <_Balloc>
 80072a6:	4680      	mov	r8, r0
 80072a8:	b928      	cbnz	r0, 80072b6 <__multadd+0x5a>
 80072aa:	4602      	mov	r2, r0
 80072ac:	4b0c      	ldr	r3, [pc, #48]	@ (80072e0 <__multadd+0x84>)
 80072ae:	480d      	ldr	r0, [pc, #52]	@ (80072e4 <__multadd+0x88>)
 80072b0:	21ba      	movs	r1, #186	@ 0xba
 80072b2:	f000 fd27 	bl	8007d04 <__assert_func>
 80072b6:	6922      	ldr	r2, [r4, #16]
 80072b8:	3202      	adds	r2, #2
 80072ba:	f104 010c 	add.w	r1, r4, #12
 80072be:	0092      	lsls	r2, r2, #2
 80072c0:	300c      	adds	r0, #12
 80072c2:	f000 fd11 	bl	8007ce8 <memcpy>
 80072c6:	4621      	mov	r1, r4
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ffa5 	bl	8007218 <_Bfree>
 80072ce:	4644      	mov	r4, r8
 80072d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072d4:	3501      	adds	r5, #1
 80072d6:	615e      	str	r6, [r3, #20]
 80072d8:	6125      	str	r5, [r4, #16]
 80072da:	4620      	mov	r0, r4
 80072dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e0:	08008860 	.word	0x08008860
 80072e4:	08008871 	.word	0x08008871

080072e8 <__hi0bits>:
 80072e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072ec:	4603      	mov	r3, r0
 80072ee:	bf36      	itet	cc
 80072f0:	0403      	lslcc	r3, r0, #16
 80072f2:	2000      	movcs	r0, #0
 80072f4:	2010      	movcc	r0, #16
 80072f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072fa:	bf3c      	itt	cc
 80072fc:	021b      	lslcc	r3, r3, #8
 80072fe:	3008      	addcc	r0, #8
 8007300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007304:	bf3c      	itt	cc
 8007306:	011b      	lslcc	r3, r3, #4
 8007308:	3004      	addcc	r0, #4
 800730a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730e:	bf3c      	itt	cc
 8007310:	009b      	lslcc	r3, r3, #2
 8007312:	3002      	addcc	r0, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	db05      	blt.n	8007324 <__hi0bits+0x3c>
 8007318:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800731c:	f100 0001 	add.w	r0, r0, #1
 8007320:	bf08      	it	eq
 8007322:	2020      	moveq	r0, #32
 8007324:	4770      	bx	lr

08007326 <__lo0bits>:
 8007326:	6803      	ldr	r3, [r0, #0]
 8007328:	4602      	mov	r2, r0
 800732a:	f013 0007 	ands.w	r0, r3, #7
 800732e:	d00b      	beq.n	8007348 <__lo0bits+0x22>
 8007330:	07d9      	lsls	r1, r3, #31
 8007332:	d421      	bmi.n	8007378 <__lo0bits+0x52>
 8007334:	0798      	lsls	r0, r3, #30
 8007336:	bf49      	itett	mi
 8007338:	085b      	lsrmi	r3, r3, #1
 800733a:	089b      	lsrpl	r3, r3, #2
 800733c:	2001      	movmi	r0, #1
 800733e:	6013      	strmi	r3, [r2, #0]
 8007340:	bf5c      	itt	pl
 8007342:	6013      	strpl	r3, [r2, #0]
 8007344:	2002      	movpl	r0, #2
 8007346:	4770      	bx	lr
 8007348:	b299      	uxth	r1, r3
 800734a:	b909      	cbnz	r1, 8007350 <__lo0bits+0x2a>
 800734c:	0c1b      	lsrs	r3, r3, #16
 800734e:	2010      	movs	r0, #16
 8007350:	b2d9      	uxtb	r1, r3
 8007352:	b909      	cbnz	r1, 8007358 <__lo0bits+0x32>
 8007354:	3008      	adds	r0, #8
 8007356:	0a1b      	lsrs	r3, r3, #8
 8007358:	0719      	lsls	r1, r3, #28
 800735a:	bf04      	itt	eq
 800735c:	091b      	lsreq	r3, r3, #4
 800735e:	3004      	addeq	r0, #4
 8007360:	0799      	lsls	r1, r3, #30
 8007362:	bf04      	itt	eq
 8007364:	089b      	lsreq	r3, r3, #2
 8007366:	3002      	addeq	r0, #2
 8007368:	07d9      	lsls	r1, r3, #31
 800736a:	d403      	bmi.n	8007374 <__lo0bits+0x4e>
 800736c:	085b      	lsrs	r3, r3, #1
 800736e:	f100 0001 	add.w	r0, r0, #1
 8007372:	d003      	beq.n	800737c <__lo0bits+0x56>
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4770      	bx	lr
 8007378:	2000      	movs	r0, #0
 800737a:	4770      	bx	lr
 800737c:	2020      	movs	r0, #32
 800737e:	4770      	bx	lr

08007380 <__i2b>:
 8007380:	b510      	push	{r4, lr}
 8007382:	460c      	mov	r4, r1
 8007384:	2101      	movs	r1, #1
 8007386:	f7ff ff07 	bl	8007198 <_Balloc>
 800738a:	4602      	mov	r2, r0
 800738c:	b928      	cbnz	r0, 800739a <__i2b+0x1a>
 800738e:	4b05      	ldr	r3, [pc, #20]	@ (80073a4 <__i2b+0x24>)
 8007390:	4805      	ldr	r0, [pc, #20]	@ (80073a8 <__i2b+0x28>)
 8007392:	f240 1145 	movw	r1, #325	@ 0x145
 8007396:	f000 fcb5 	bl	8007d04 <__assert_func>
 800739a:	2301      	movs	r3, #1
 800739c:	6144      	str	r4, [r0, #20]
 800739e:	6103      	str	r3, [r0, #16]
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	bf00      	nop
 80073a4:	08008860 	.word	0x08008860
 80073a8:	08008871 	.word	0x08008871

080073ac <__multiply>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4617      	mov	r7, r2
 80073b2:	690a      	ldr	r2, [r1, #16]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	bfa8      	it	ge
 80073ba:	463b      	movge	r3, r7
 80073bc:	4689      	mov	r9, r1
 80073be:	bfa4      	itt	ge
 80073c0:	460f      	movge	r7, r1
 80073c2:	4699      	movge	r9, r3
 80073c4:	693d      	ldr	r5, [r7, #16]
 80073c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	eb05 060a 	add.w	r6, r5, sl
 80073d2:	42b3      	cmp	r3, r6
 80073d4:	b085      	sub	sp, #20
 80073d6:	bfb8      	it	lt
 80073d8:	3101      	addlt	r1, #1
 80073da:	f7ff fedd 	bl	8007198 <_Balloc>
 80073de:	b930      	cbnz	r0, 80073ee <__multiply+0x42>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4b41      	ldr	r3, [pc, #260]	@ (80074e8 <__multiply+0x13c>)
 80073e4:	4841      	ldr	r0, [pc, #260]	@ (80074ec <__multiply+0x140>)
 80073e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073ea:	f000 fc8b 	bl	8007d04 <__assert_func>
 80073ee:	f100 0414 	add.w	r4, r0, #20
 80073f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80073f6:	4623      	mov	r3, r4
 80073f8:	2200      	movs	r2, #0
 80073fa:	4573      	cmp	r3, lr
 80073fc:	d320      	bcc.n	8007440 <__multiply+0x94>
 80073fe:	f107 0814 	add.w	r8, r7, #20
 8007402:	f109 0114 	add.w	r1, r9, #20
 8007406:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800740a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800740e:	9302      	str	r3, [sp, #8]
 8007410:	1beb      	subs	r3, r5, r7
 8007412:	3b15      	subs	r3, #21
 8007414:	f023 0303 	bic.w	r3, r3, #3
 8007418:	3304      	adds	r3, #4
 800741a:	3715      	adds	r7, #21
 800741c:	42bd      	cmp	r5, r7
 800741e:	bf38      	it	cc
 8007420:	2304      	movcc	r3, #4
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	9b02      	ldr	r3, [sp, #8]
 8007426:	9103      	str	r1, [sp, #12]
 8007428:	428b      	cmp	r3, r1
 800742a:	d80c      	bhi.n	8007446 <__multiply+0x9a>
 800742c:	2e00      	cmp	r6, #0
 800742e:	dd03      	ble.n	8007438 <__multiply+0x8c>
 8007430:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007434:	2b00      	cmp	r3, #0
 8007436:	d055      	beq.n	80074e4 <__multiply+0x138>
 8007438:	6106      	str	r6, [r0, #16]
 800743a:	b005      	add	sp, #20
 800743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007440:	f843 2b04 	str.w	r2, [r3], #4
 8007444:	e7d9      	b.n	80073fa <__multiply+0x4e>
 8007446:	f8b1 a000 	ldrh.w	sl, [r1]
 800744a:	f1ba 0f00 	cmp.w	sl, #0
 800744e:	d01f      	beq.n	8007490 <__multiply+0xe4>
 8007450:	46c4      	mov	ip, r8
 8007452:	46a1      	mov	r9, r4
 8007454:	2700      	movs	r7, #0
 8007456:	f85c 2b04 	ldr.w	r2, [ip], #4
 800745a:	f8d9 3000 	ldr.w	r3, [r9]
 800745e:	fa1f fb82 	uxth.w	fp, r2
 8007462:	b29b      	uxth	r3, r3
 8007464:	fb0a 330b 	mla	r3, sl, fp, r3
 8007468:	443b      	add	r3, r7
 800746a:	f8d9 7000 	ldr.w	r7, [r9]
 800746e:	0c12      	lsrs	r2, r2, #16
 8007470:	0c3f      	lsrs	r7, r7, #16
 8007472:	fb0a 7202 	mla	r2, sl, r2, r7
 8007476:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800747a:	b29b      	uxth	r3, r3
 800747c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007480:	4565      	cmp	r5, ip
 8007482:	f849 3b04 	str.w	r3, [r9], #4
 8007486:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800748a:	d8e4      	bhi.n	8007456 <__multiply+0xaa>
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	50e7      	str	r7, [r4, r3]
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007496:	3104      	adds	r1, #4
 8007498:	f1b9 0f00 	cmp.w	r9, #0
 800749c:	d020      	beq.n	80074e0 <__multiply+0x134>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	4647      	mov	r7, r8
 80074a2:	46a4      	mov	ip, r4
 80074a4:	f04f 0a00 	mov.w	sl, #0
 80074a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80074ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80074b0:	fb09 220b 	mla	r2, r9, fp, r2
 80074b4:	4452      	add	r2, sl
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074bc:	f84c 3b04 	str.w	r3, [ip], #4
 80074c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80074c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80074cc:	fb09 330a 	mla	r3, r9, sl, r3
 80074d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80074d4:	42bd      	cmp	r5, r7
 80074d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074da:	d8e5      	bhi.n	80074a8 <__multiply+0xfc>
 80074dc:	9a01      	ldr	r2, [sp, #4]
 80074de:	50a3      	str	r3, [r4, r2]
 80074e0:	3404      	adds	r4, #4
 80074e2:	e79f      	b.n	8007424 <__multiply+0x78>
 80074e4:	3e01      	subs	r6, #1
 80074e6:	e7a1      	b.n	800742c <__multiply+0x80>
 80074e8:	08008860 	.word	0x08008860
 80074ec:	08008871 	.word	0x08008871

080074f0 <__pow5mult>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	4615      	mov	r5, r2
 80074f6:	f012 0203 	ands.w	r2, r2, #3
 80074fa:	4607      	mov	r7, r0
 80074fc:	460e      	mov	r6, r1
 80074fe:	d007      	beq.n	8007510 <__pow5mult+0x20>
 8007500:	4c25      	ldr	r4, [pc, #148]	@ (8007598 <__pow5mult+0xa8>)
 8007502:	3a01      	subs	r2, #1
 8007504:	2300      	movs	r3, #0
 8007506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800750a:	f7ff fea7 	bl	800725c <__multadd>
 800750e:	4606      	mov	r6, r0
 8007510:	10ad      	asrs	r5, r5, #2
 8007512:	d03d      	beq.n	8007590 <__pow5mult+0xa0>
 8007514:	69fc      	ldr	r4, [r7, #28]
 8007516:	b97c      	cbnz	r4, 8007538 <__pow5mult+0x48>
 8007518:	2010      	movs	r0, #16
 800751a:	f7ff fd87 	bl	800702c <malloc>
 800751e:	4602      	mov	r2, r0
 8007520:	61f8      	str	r0, [r7, #28]
 8007522:	b928      	cbnz	r0, 8007530 <__pow5mult+0x40>
 8007524:	4b1d      	ldr	r3, [pc, #116]	@ (800759c <__pow5mult+0xac>)
 8007526:	481e      	ldr	r0, [pc, #120]	@ (80075a0 <__pow5mult+0xb0>)
 8007528:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800752c:	f000 fbea 	bl	8007d04 <__assert_func>
 8007530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007534:	6004      	str	r4, [r0, #0]
 8007536:	60c4      	str	r4, [r0, #12]
 8007538:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800753c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007540:	b94c      	cbnz	r4, 8007556 <__pow5mult+0x66>
 8007542:	f240 2171 	movw	r1, #625	@ 0x271
 8007546:	4638      	mov	r0, r7
 8007548:	f7ff ff1a 	bl	8007380 <__i2b>
 800754c:	2300      	movs	r3, #0
 800754e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007552:	4604      	mov	r4, r0
 8007554:	6003      	str	r3, [r0, #0]
 8007556:	f04f 0900 	mov.w	r9, #0
 800755a:	07eb      	lsls	r3, r5, #31
 800755c:	d50a      	bpl.n	8007574 <__pow5mult+0x84>
 800755e:	4631      	mov	r1, r6
 8007560:	4622      	mov	r2, r4
 8007562:	4638      	mov	r0, r7
 8007564:	f7ff ff22 	bl	80073ac <__multiply>
 8007568:	4631      	mov	r1, r6
 800756a:	4680      	mov	r8, r0
 800756c:	4638      	mov	r0, r7
 800756e:	f7ff fe53 	bl	8007218 <_Bfree>
 8007572:	4646      	mov	r6, r8
 8007574:	106d      	asrs	r5, r5, #1
 8007576:	d00b      	beq.n	8007590 <__pow5mult+0xa0>
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	b938      	cbnz	r0, 800758c <__pow5mult+0x9c>
 800757c:	4622      	mov	r2, r4
 800757e:	4621      	mov	r1, r4
 8007580:	4638      	mov	r0, r7
 8007582:	f7ff ff13 	bl	80073ac <__multiply>
 8007586:	6020      	str	r0, [r4, #0]
 8007588:	f8c0 9000 	str.w	r9, [r0]
 800758c:	4604      	mov	r4, r0
 800758e:	e7e4      	b.n	800755a <__pow5mult+0x6a>
 8007590:	4630      	mov	r0, r6
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	bf00      	nop
 8007598:	08008924 	.word	0x08008924
 800759c:	080087f1 	.word	0x080087f1
 80075a0:	08008871 	.word	0x08008871

080075a4 <__lshift>:
 80075a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	460c      	mov	r4, r1
 80075aa:	6849      	ldr	r1, [r1, #4]
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075b2:	68a3      	ldr	r3, [r4, #8]
 80075b4:	4607      	mov	r7, r0
 80075b6:	4691      	mov	r9, r2
 80075b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075bc:	f108 0601 	add.w	r6, r8, #1
 80075c0:	42b3      	cmp	r3, r6
 80075c2:	db0b      	blt.n	80075dc <__lshift+0x38>
 80075c4:	4638      	mov	r0, r7
 80075c6:	f7ff fde7 	bl	8007198 <_Balloc>
 80075ca:	4605      	mov	r5, r0
 80075cc:	b948      	cbnz	r0, 80075e2 <__lshift+0x3e>
 80075ce:	4602      	mov	r2, r0
 80075d0:	4b28      	ldr	r3, [pc, #160]	@ (8007674 <__lshift+0xd0>)
 80075d2:	4829      	ldr	r0, [pc, #164]	@ (8007678 <__lshift+0xd4>)
 80075d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075d8:	f000 fb94 	bl	8007d04 <__assert_func>
 80075dc:	3101      	adds	r1, #1
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	e7ee      	b.n	80075c0 <__lshift+0x1c>
 80075e2:	2300      	movs	r3, #0
 80075e4:	f100 0114 	add.w	r1, r0, #20
 80075e8:	f100 0210 	add.w	r2, r0, #16
 80075ec:	4618      	mov	r0, r3
 80075ee:	4553      	cmp	r3, sl
 80075f0:	db33      	blt.n	800765a <__lshift+0xb6>
 80075f2:	6920      	ldr	r0, [r4, #16]
 80075f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075f8:	f104 0314 	add.w	r3, r4, #20
 80075fc:	f019 091f 	ands.w	r9, r9, #31
 8007600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007608:	d02b      	beq.n	8007662 <__lshift+0xbe>
 800760a:	f1c9 0e20 	rsb	lr, r9, #32
 800760e:	468a      	mov	sl, r1
 8007610:	2200      	movs	r2, #0
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	fa00 f009 	lsl.w	r0, r0, r9
 8007618:	4310      	orrs	r0, r2
 800761a:	f84a 0b04 	str.w	r0, [sl], #4
 800761e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007622:	459c      	cmp	ip, r3
 8007624:	fa22 f20e 	lsr.w	r2, r2, lr
 8007628:	d8f3      	bhi.n	8007612 <__lshift+0x6e>
 800762a:	ebac 0304 	sub.w	r3, ip, r4
 800762e:	3b15      	subs	r3, #21
 8007630:	f023 0303 	bic.w	r3, r3, #3
 8007634:	3304      	adds	r3, #4
 8007636:	f104 0015 	add.w	r0, r4, #21
 800763a:	4560      	cmp	r0, ip
 800763c:	bf88      	it	hi
 800763e:	2304      	movhi	r3, #4
 8007640:	50ca      	str	r2, [r1, r3]
 8007642:	b10a      	cbz	r2, 8007648 <__lshift+0xa4>
 8007644:	f108 0602 	add.w	r6, r8, #2
 8007648:	3e01      	subs	r6, #1
 800764a:	4638      	mov	r0, r7
 800764c:	612e      	str	r6, [r5, #16]
 800764e:	4621      	mov	r1, r4
 8007650:	f7ff fde2 	bl	8007218 <_Bfree>
 8007654:	4628      	mov	r0, r5
 8007656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765a:	f842 0f04 	str.w	r0, [r2, #4]!
 800765e:	3301      	adds	r3, #1
 8007660:	e7c5      	b.n	80075ee <__lshift+0x4a>
 8007662:	3904      	subs	r1, #4
 8007664:	f853 2b04 	ldr.w	r2, [r3], #4
 8007668:	f841 2f04 	str.w	r2, [r1, #4]!
 800766c:	459c      	cmp	ip, r3
 800766e:	d8f9      	bhi.n	8007664 <__lshift+0xc0>
 8007670:	e7ea      	b.n	8007648 <__lshift+0xa4>
 8007672:	bf00      	nop
 8007674:	08008860 	.word	0x08008860
 8007678:	08008871 	.word	0x08008871

0800767c <__mcmp>:
 800767c:	690a      	ldr	r2, [r1, #16]
 800767e:	4603      	mov	r3, r0
 8007680:	6900      	ldr	r0, [r0, #16]
 8007682:	1a80      	subs	r0, r0, r2
 8007684:	b530      	push	{r4, r5, lr}
 8007686:	d10e      	bne.n	80076a6 <__mcmp+0x2a>
 8007688:	3314      	adds	r3, #20
 800768a:	3114      	adds	r1, #20
 800768c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007690:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800769c:	4295      	cmp	r5, r2
 800769e:	d003      	beq.n	80076a8 <__mcmp+0x2c>
 80076a0:	d205      	bcs.n	80076ae <__mcmp+0x32>
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	bd30      	pop	{r4, r5, pc}
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d3f3      	bcc.n	8007694 <__mcmp+0x18>
 80076ac:	e7fb      	b.n	80076a6 <__mcmp+0x2a>
 80076ae:	2001      	movs	r0, #1
 80076b0:	e7f9      	b.n	80076a6 <__mcmp+0x2a>
	...

080076b4 <__mdiff>:
 80076b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	4689      	mov	r9, r1
 80076ba:	4606      	mov	r6, r0
 80076bc:	4611      	mov	r1, r2
 80076be:	4648      	mov	r0, r9
 80076c0:	4614      	mov	r4, r2
 80076c2:	f7ff ffdb 	bl	800767c <__mcmp>
 80076c6:	1e05      	subs	r5, r0, #0
 80076c8:	d112      	bne.n	80076f0 <__mdiff+0x3c>
 80076ca:	4629      	mov	r1, r5
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7ff fd63 	bl	8007198 <_Balloc>
 80076d2:	4602      	mov	r2, r0
 80076d4:	b928      	cbnz	r0, 80076e2 <__mdiff+0x2e>
 80076d6:	4b3f      	ldr	r3, [pc, #252]	@ (80077d4 <__mdiff+0x120>)
 80076d8:	f240 2137 	movw	r1, #567	@ 0x237
 80076dc:	483e      	ldr	r0, [pc, #248]	@ (80077d8 <__mdiff+0x124>)
 80076de:	f000 fb11 	bl	8007d04 <__assert_func>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076e8:	4610      	mov	r0, r2
 80076ea:	b003      	add	sp, #12
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	bfbc      	itt	lt
 80076f2:	464b      	movlt	r3, r9
 80076f4:	46a1      	movlt	r9, r4
 80076f6:	4630      	mov	r0, r6
 80076f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076fc:	bfba      	itte	lt
 80076fe:	461c      	movlt	r4, r3
 8007700:	2501      	movlt	r5, #1
 8007702:	2500      	movge	r5, #0
 8007704:	f7ff fd48 	bl	8007198 <_Balloc>
 8007708:	4602      	mov	r2, r0
 800770a:	b918      	cbnz	r0, 8007714 <__mdiff+0x60>
 800770c:	4b31      	ldr	r3, [pc, #196]	@ (80077d4 <__mdiff+0x120>)
 800770e:	f240 2145 	movw	r1, #581	@ 0x245
 8007712:	e7e3      	b.n	80076dc <__mdiff+0x28>
 8007714:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007718:	6926      	ldr	r6, [r4, #16]
 800771a:	60c5      	str	r5, [r0, #12]
 800771c:	f109 0310 	add.w	r3, r9, #16
 8007720:	f109 0514 	add.w	r5, r9, #20
 8007724:	f104 0e14 	add.w	lr, r4, #20
 8007728:	f100 0b14 	add.w	fp, r0, #20
 800772c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007730:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	46d9      	mov	r9, fp
 8007738:	f04f 0c00 	mov.w	ip, #0
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007742:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	fa1f f38a 	uxth.w	r3, sl
 800774c:	4619      	mov	r1, r3
 800774e:	b283      	uxth	r3, r0
 8007750:	1acb      	subs	r3, r1, r3
 8007752:	0c00      	lsrs	r0, r0, #16
 8007754:	4463      	add	r3, ip
 8007756:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800775a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800775e:	b29b      	uxth	r3, r3
 8007760:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007764:	4576      	cmp	r6, lr
 8007766:	f849 3b04 	str.w	r3, [r9], #4
 800776a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800776e:	d8e5      	bhi.n	800773c <__mdiff+0x88>
 8007770:	1b33      	subs	r3, r6, r4
 8007772:	3b15      	subs	r3, #21
 8007774:	f023 0303 	bic.w	r3, r3, #3
 8007778:	3415      	adds	r4, #21
 800777a:	3304      	adds	r3, #4
 800777c:	42a6      	cmp	r6, r4
 800777e:	bf38      	it	cc
 8007780:	2304      	movcc	r3, #4
 8007782:	441d      	add	r5, r3
 8007784:	445b      	add	r3, fp
 8007786:	461e      	mov	r6, r3
 8007788:	462c      	mov	r4, r5
 800778a:	4544      	cmp	r4, r8
 800778c:	d30e      	bcc.n	80077ac <__mdiff+0xf8>
 800778e:	f108 0103 	add.w	r1, r8, #3
 8007792:	1b49      	subs	r1, r1, r5
 8007794:	f021 0103 	bic.w	r1, r1, #3
 8007798:	3d03      	subs	r5, #3
 800779a:	45a8      	cmp	r8, r5
 800779c:	bf38      	it	cc
 800779e:	2100      	movcc	r1, #0
 80077a0:	440b      	add	r3, r1
 80077a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077a6:	b191      	cbz	r1, 80077ce <__mdiff+0x11a>
 80077a8:	6117      	str	r7, [r2, #16]
 80077aa:	e79d      	b.n	80076e8 <__mdiff+0x34>
 80077ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80077b0:	46e6      	mov	lr, ip
 80077b2:	0c08      	lsrs	r0, r1, #16
 80077b4:	fa1c fc81 	uxtah	ip, ip, r1
 80077b8:	4471      	add	r1, lr
 80077ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077be:	b289      	uxth	r1, r1
 80077c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077c4:	f846 1b04 	str.w	r1, [r6], #4
 80077c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077cc:	e7dd      	b.n	800778a <__mdiff+0xd6>
 80077ce:	3f01      	subs	r7, #1
 80077d0:	e7e7      	b.n	80077a2 <__mdiff+0xee>
 80077d2:	bf00      	nop
 80077d4:	08008860 	.word	0x08008860
 80077d8:	08008871 	.word	0x08008871

080077dc <__d2b>:
 80077dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077e0:	460f      	mov	r7, r1
 80077e2:	2101      	movs	r1, #1
 80077e4:	ec59 8b10 	vmov	r8, r9, d0
 80077e8:	4616      	mov	r6, r2
 80077ea:	f7ff fcd5 	bl	8007198 <_Balloc>
 80077ee:	4604      	mov	r4, r0
 80077f0:	b930      	cbnz	r0, 8007800 <__d2b+0x24>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4b23      	ldr	r3, [pc, #140]	@ (8007884 <__d2b+0xa8>)
 80077f6:	4824      	ldr	r0, [pc, #144]	@ (8007888 <__d2b+0xac>)
 80077f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80077fc:	f000 fa82 	bl	8007d04 <__assert_func>
 8007800:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007804:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007808:	b10d      	cbz	r5, 800780e <__d2b+0x32>
 800780a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	f1b8 0300 	subs.w	r3, r8, #0
 8007814:	d023      	beq.n	800785e <__d2b+0x82>
 8007816:	4668      	mov	r0, sp
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	f7ff fd84 	bl	8007326 <__lo0bits>
 800781e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007822:	b1d0      	cbz	r0, 800785a <__d2b+0x7e>
 8007824:	f1c0 0320 	rsb	r3, r0, #32
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	430b      	orrs	r3, r1
 800782e:	40c2      	lsrs	r2, r0
 8007830:	6163      	str	r3, [r4, #20]
 8007832:	9201      	str	r2, [sp, #4]
 8007834:	9b01      	ldr	r3, [sp, #4]
 8007836:	61a3      	str	r3, [r4, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	bf0c      	ite	eq
 800783c:	2201      	moveq	r2, #1
 800783e:	2202      	movne	r2, #2
 8007840:	6122      	str	r2, [r4, #16]
 8007842:	b1a5      	cbz	r5, 800786e <__d2b+0x92>
 8007844:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007848:	4405      	add	r5, r0
 800784a:	603d      	str	r5, [r7, #0]
 800784c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007850:	6030      	str	r0, [r6, #0]
 8007852:	4620      	mov	r0, r4
 8007854:	b003      	add	sp, #12
 8007856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800785a:	6161      	str	r1, [r4, #20]
 800785c:	e7ea      	b.n	8007834 <__d2b+0x58>
 800785e:	a801      	add	r0, sp, #4
 8007860:	f7ff fd61 	bl	8007326 <__lo0bits>
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	6163      	str	r3, [r4, #20]
 8007868:	3020      	adds	r0, #32
 800786a:	2201      	movs	r2, #1
 800786c:	e7e8      	b.n	8007840 <__d2b+0x64>
 800786e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007872:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007876:	6038      	str	r0, [r7, #0]
 8007878:	6918      	ldr	r0, [r3, #16]
 800787a:	f7ff fd35 	bl	80072e8 <__hi0bits>
 800787e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007882:	e7e5      	b.n	8007850 <__d2b+0x74>
 8007884:	08008860 	.word	0x08008860
 8007888:	08008871 	.word	0x08008871

0800788c <__ssputs_r>:
 800788c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007890:	688e      	ldr	r6, [r1, #8]
 8007892:	461f      	mov	r7, r3
 8007894:	42be      	cmp	r6, r7
 8007896:	680b      	ldr	r3, [r1, #0]
 8007898:	4682      	mov	sl, r0
 800789a:	460c      	mov	r4, r1
 800789c:	4690      	mov	r8, r2
 800789e:	d82d      	bhi.n	80078fc <__ssputs_r+0x70>
 80078a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078a8:	d026      	beq.n	80078f8 <__ssputs_r+0x6c>
 80078aa:	6965      	ldr	r5, [r4, #20]
 80078ac:	6909      	ldr	r1, [r1, #16]
 80078ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078b2:	eba3 0901 	sub.w	r9, r3, r1
 80078b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078ba:	1c7b      	adds	r3, r7, #1
 80078bc:	444b      	add	r3, r9
 80078be:	106d      	asrs	r5, r5, #1
 80078c0:	429d      	cmp	r5, r3
 80078c2:	bf38      	it	cc
 80078c4:	461d      	movcc	r5, r3
 80078c6:	0553      	lsls	r3, r2, #21
 80078c8:	d527      	bpl.n	800791a <__ssputs_r+0x8e>
 80078ca:	4629      	mov	r1, r5
 80078cc:	f7ff fbd8 	bl	8007080 <_malloc_r>
 80078d0:	4606      	mov	r6, r0
 80078d2:	b360      	cbz	r0, 800792e <__ssputs_r+0xa2>
 80078d4:	6921      	ldr	r1, [r4, #16]
 80078d6:	464a      	mov	r2, r9
 80078d8:	f000 fa06 	bl	8007ce8 <memcpy>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	6126      	str	r6, [r4, #16]
 80078ea:	6165      	str	r5, [r4, #20]
 80078ec:	444e      	add	r6, r9
 80078ee:	eba5 0509 	sub.w	r5, r5, r9
 80078f2:	6026      	str	r6, [r4, #0]
 80078f4:	60a5      	str	r5, [r4, #8]
 80078f6:	463e      	mov	r6, r7
 80078f8:	42be      	cmp	r6, r7
 80078fa:	d900      	bls.n	80078fe <__ssputs_r+0x72>
 80078fc:	463e      	mov	r6, r7
 80078fe:	6820      	ldr	r0, [r4, #0]
 8007900:	4632      	mov	r2, r6
 8007902:	4641      	mov	r1, r8
 8007904:	f000 f9c6 	bl	8007c94 <memmove>
 8007908:	68a3      	ldr	r3, [r4, #8]
 800790a:	1b9b      	subs	r3, r3, r6
 800790c:	60a3      	str	r3, [r4, #8]
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	4433      	add	r3, r6
 8007912:	6023      	str	r3, [r4, #0]
 8007914:	2000      	movs	r0, #0
 8007916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791a:	462a      	mov	r2, r5
 800791c:	f000 fa36 	bl	8007d8c <_realloc_r>
 8007920:	4606      	mov	r6, r0
 8007922:	2800      	cmp	r0, #0
 8007924:	d1e0      	bne.n	80078e8 <__ssputs_r+0x5c>
 8007926:	6921      	ldr	r1, [r4, #16]
 8007928:	4650      	mov	r0, sl
 800792a:	f7ff fb35 	bl	8006f98 <_free_r>
 800792e:	230c      	movs	r3, #12
 8007930:	f8ca 3000 	str.w	r3, [sl]
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e7e9      	b.n	8007916 <__ssputs_r+0x8a>
	...

08007944 <_svfiprintf_r>:
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	4698      	mov	r8, r3
 800794a:	898b      	ldrh	r3, [r1, #12]
 800794c:	061b      	lsls	r3, r3, #24
 800794e:	b09d      	sub	sp, #116	@ 0x74
 8007950:	4607      	mov	r7, r0
 8007952:	460d      	mov	r5, r1
 8007954:	4614      	mov	r4, r2
 8007956:	d510      	bpl.n	800797a <_svfiprintf_r+0x36>
 8007958:	690b      	ldr	r3, [r1, #16]
 800795a:	b973      	cbnz	r3, 800797a <_svfiprintf_r+0x36>
 800795c:	2140      	movs	r1, #64	@ 0x40
 800795e:	f7ff fb8f 	bl	8007080 <_malloc_r>
 8007962:	6028      	str	r0, [r5, #0]
 8007964:	6128      	str	r0, [r5, #16]
 8007966:	b930      	cbnz	r0, 8007976 <_svfiprintf_r+0x32>
 8007968:	230c      	movs	r3, #12
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	b01d      	add	sp, #116	@ 0x74
 8007972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007976:	2340      	movs	r3, #64	@ 0x40
 8007978:	616b      	str	r3, [r5, #20]
 800797a:	2300      	movs	r3, #0
 800797c:	9309      	str	r3, [sp, #36]	@ 0x24
 800797e:	2320      	movs	r3, #32
 8007980:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007984:	f8cd 800c 	str.w	r8, [sp, #12]
 8007988:	2330      	movs	r3, #48	@ 0x30
 800798a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b28 <_svfiprintf_r+0x1e4>
 800798e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007992:	f04f 0901 	mov.w	r9, #1
 8007996:	4623      	mov	r3, r4
 8007998:	469a      	mov	sl, r3
 800799a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800799e:	b10a      	cbz	r2, 80079a4 <_svfiprintf_r+0x60>
 80079a0:	2a25      	cmp	r2, #37	@ 0x25
 80079a2:	d1f9      	bne.n	8007998 <_svfiprintf_r+0x54>
 80079a4:	ebba 0b04 	subs.w	fp, sl, r4
 80079a8:	d00b      	beq.n	80079c2 <_svfiprintf_r+0x7e>
 80079aa:	465b      	mov	r3, fp
 80079ac:	4622      	mov	r2, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	4638      	mov	r0, r7
 80079b2:	f7ff ff6b 	bl	800788c <__ssputs_r>
 80079b6:	3001      	adds	r0, #1
 80079b8:	f000 80a7 	beq.w	8007b0a <_svfiprintf_r+0x1c6>
 80079bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079be:	445a      	add	r2, fp
 80079c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80079c2:	f89a 3000 	ldrb.w	r3, [sl]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 809f 	beq.w	8007b0a <_svfiprintf_r+0x1c6>
 80079cc:	2300      	movs	r3, #0
 80079ce:	f04f 32ff 	mov.w	r2, #4294967295
 80079d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079d6:	f10a 0a01 	add.w	sl, sl, #1
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	9307      	str	r3, [sp, #28]
 80079de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80079e4:	4654      	mov	r4, sl
 80079e6:	2205      	movs	r2, #5
 80079e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ec:	484e      	ldr	r0, [pc, #312]	@ (8007b28 <_svfiprintf_r+0x1e4>)
 80079ee:	f7f8 fbff 	bl	80001f0 <memchr>
 80079f2:	9a04      	ldr	r2, [sp, #16]
 80079f4:	b9d8      	cbnz	r0, 8007a2e <_svfiprintf_r+0xea>
 80079f6:	06d0      	lsls	r0, r2, #27
 80079f8:	bf44      	itt	mi
 80079fa:	2320      	movmi	r3, #32
 80079fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a00:	0711      	lsls	r1, r2, #28
 8007a02:	bf44      	itt	mi
 8007a04:	232b      	movmi	r3, #43	@ 0x2b
 8007a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a10:	d015      	beq.n	8007a3e <_svfiprintf_r+0xfa>
 8007a12:	9a07      	ldr	r2, [sp, #28]
 8007a14:	4654      	mov	r4, sl
 8007a16:	2000      	movs	r0, #0
 8007a18:	f04f 0c0a 	mov.w	ip, #10
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a22:	3b30      	subs	r3, #48	@ 0x30
 8007a24:	2b09      	cmp	r3, #9
 8007a26:	d94b      	bls.n	8007ac0 <_svfiprintf_r+0x17c>
 8007a28:	b1b0      	cbz	r0, 8007a58 <_svfiprintf_r+0x114>
 8007a2a:	9207      	str	r2, [sp, #28]
 8007a2c:	e014      	b.n	8007a58 <_svfiprintf_r+0x114>
 8007a2e:	eba0 0308 	sub.w	r3, r0, r8
 8007a32:	fa09 f303 	lsl.w	r3, r9, r3
 8007a36:	4313      	orrs	r3, r2
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	46a2      	mov	sl, r4
 8007a3c:	e7d2      	b.n	80079e4 <_svfiprintf_r+0xa0>
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	1d19      	adds	r1, r3, #4
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	9103      	str	r1, [sp, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bfbb      	ittet	lt
 8007a4a:	425b      	neglt	r3, r3
 8007a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a50:	9307      	strge	r3, [sp, #28]
 8007a52:	9307      	strlt	r3, [sp, #28]
 8007a54:	bfb8      	it	lt
 8007a56:	9204      	strlt	r2, [sp, #16]
 8007a58:	7823      	ldrb	r3, [r4, #0]
 8007a5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a5c:	d10a      	bne.n	8007a74 <_svfiprintf_r+0x130>
 8007a5e:	7863      	ldrb	r3, [r4, #1]
 8007a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a62:	d132      	bne.n	8007aca <_svfiprintf_r+0x186>
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	1d1a      	adds	r2, r3, #4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	9203      	str	r2, [sp, #12]
 8007a6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a70:	3402      	adds	r4, #2
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b38 <_svfiprintf_r+0x1f4>
 8007a78:	7821      	ldrb	r1, [r4, #0]
 8007a7a:	2203      	movs	r2, #3
 8007a7c:	4650      	mov	r0, sl
 8007a7e:	f7f8 fbb7 	bl	80001f0 <memchr>
 8007a82:	b138      	cbz	r0, 8007a94 <_svfiprintf_r+0x150>
 8007a84:	9b04      	ldr	r3, [sp, #16]
 8007a86:	eba0 000a 	sub.w	r0, r0, sl
 8007a8a:	2240      	movs	r2, #64	@ 0x40
 8007a8c:	4082      	lsls	r2, r0
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	3401      	adds	r4, #1
 8007a92:	9304      	str	r3, [sp, #16]
 8007a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a98:	4824      	ldr	r0, [pc, #144]	@ (8007b2c <_svfiprintf_r+0x1e8>)
 8007a9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a9e:	2206      	movs	r2, #6
 8007aa0:	f7f8 fba6 	bl	80001f0 <memchr>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d036      	beq.n	8007b16 <_svfiprintf_r+0x1d2>
 8007aa8:	4b21      	ldr	r3, [pc, #132]	@ (8007b30 <_svfiprintf_r+0x1ec>)
 8007aaa:	bb1b      	cbnz	r3, 8007af4 <_svfiprintf_r+0x1b0>
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	3307      	adds	r3, #7
 8007ab0:	f023 0307 	bic.w	r3, r3, #7
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aba:	4433      	add	r3, r6
 8007abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007abe:	e76a      	b.n	8007996 <_svfiprintf_r+0x52>
 8007ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	e7a8      	b.n	8007a1c <_svfiprintf_r+0xd8>
 8007aca:	2300      	movs	r3, #0
 8007acc:	3401      	adds	r4, #1
 8007ace:	9305      	str	r3, [sp, #20]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f04f 0c0a 	mov.w	ip, #10
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007adc:	3a30      	subs	r2, #48	@ 0x30
 8007ade:	2a09      	cmp	r2, #9
 8007ae0:	d903      	bls.n	8007aea <_svfiprintf_r+0x1a6>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0c6      	beq.n	8007a74 <_svfiprintf_r+0x130>
 8007ae6:	9105      	str	r1, [sp, #20]
 8007ae8:	e7c4      	b.n	8007a74 <_svfiprintf_r+0x130>
 8007aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aee:	4604      	mov	r4, r0
 8007af0:	2301      	movs	r3, #1
 8007af2:	e7f0      	b.n	8007ad6 <_svfiprintf_r+0x192>
 8007af4:	ab03      	add	r3, sp, #12
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	462a      	mov	r2, r5
 8007afa:	4b0e      	ldr	r3, [pc, #56]	@ (8007b34 <_svfiprintf_r+0x1f0>)
 8007afc:	a904      	add	r1, sp, #16
 8007afe:	4638      	mov	r0, r7
 8007b00:	f7fd fe5e 	bl	80057c0 <_printf_float>
 8007b04:	1c42      	adds	r2, r0, #1
 8007b06:	4606      	mov	r6, r0
 8007b08:	d1d6      	bne.n	8007ab8 <_svfiprintf_r+0x174>
 8007b0a:	89ab      	ldrh	r3, [r5, #12]
 8007b0c:	065b      	lsls	r3, r3, #25
 8007b0e:	f53f af2d 	bmi.w	800796c <_svfiprintf_r+0x28>
 8007b12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b14:	e72c      	b.n	8007970 <_svfiprintf_r+0x2c>
 8007b16:	ab03      	add	r3, sp, #12
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	462a      	mov	r2, r5
 8007b1c:	4b05      	ldr	r3, [pc, #20]	@ (8007b34 <_svfiprintf_r+0x1f0>)
 8007b1e:	a904      	add	r1, sp, #16
 8007b20:	4638      	mov	r0, r7
 8007b22:	f7fe f8e5 	bl	8005cf0 <_printf_i>
 8007b26:	e7ed      	b.n	8007b04 <_svfiprintf_r+0x1c0>
 8007b28:	080088ca 	.word	0x080088ca
 8007b2c:	080088d4 	.word	0x080088d4
 8007b30:	080057c1 	.word	0x080057c1
 8007b34:	0800788d 	.word	0x0800788d
 8007b38:	080088d0 	.word	0x080088d0

08007b3c <__sflush_r>:
 8007b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b44:	0716      	lsls	r6, r2, #28
 8007b46:	4605      	mov	r5, r0
 8007b48:	460c      	mov	r4, r1
 8007b4a:	d454      	bmi.n	8007bf6 <__sflush_r+0xba>
 8007b4c:	684b      	ldr	r3, [r1, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	dc02      	bgt.n	8007b58 <__sflush_r+0x1c>
 8007b52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dd48      	ble.n	8007bea <__sflush_r+0xae>
 8007b58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b5a:	2e00      	cmp	r6, #0
 8007b5c:	d045      	beq.n	8007bea <__sflush_r+0xae>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b64:	682f      	ldr	r7, [r5, #0]
 8007b66:	6a21      	ldr	r1, [r4, #32]
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	d030      	beq.n	8007bce <__sflush_r+0x92>
 8007b6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	0759      	lsls	r1, r3, #29
 8007b72:	d505      	bpl.n	8007b80 <__sflush_r+0x44>
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b7a:	b10b      	cbz	r3, 8007b80 <__sflush_r+0x44>
 8007b7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	2300      	movs	r3, #0
 8007b82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b84:	6a21      	ldr	r1, [r4, #32]
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b0      	blx	r6
 8007b8a:	1c43      	adds	r3, r0, #1
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	d106      	bne.n	8007b9e <__sflush_r+0x62>
 8007b90:	6829      	ldr	r1, [r5, #0]
 8007b92:	291d      	cmp	r1, #29
 8007b94:	d82b      	bhi.n	8007bee <__sflush_r+0xb2>
 8007b96:	4a2a      	ldr	r2, [pc, #168]	@ (8007c40 <__sflush_r+0x104>)
 8007b98:	40ca      	lsrs	r2, r1
 8007b9a:	07d6      	lsls	r6, r2, #31
 8007b9c:	d527      	bpl.n	8007bee <__sflush_r+0xb2>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	6062      	str	r2, [r4, #4]
 8007ba2:	04d9      	lsls	r1, r3, #19
 8007ba4:	6922      	ldr	r2, [r4, #16]
 8007ba6:	6022      	str	r2, [r4, #0]
 8007ba8:	d504      	bpl.n	8007bb4 <__sflush_r+0x78>
 8007baa:	1c42      	adds	r2, r0, #1
 8007bac:	d101      	bne.n	8007bb2 <__sflush_r+0x76>
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	b903      	cbnz	r3, 8007bb4 <__sflush_r+0x78>
 8007bb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bb6:	602f      	str	r7, [r5, #0]
 8007bb8:	b1b9      	cbz	r1, 8007bea <__sflush_r+0xae>
 8007bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bbe:	4299      	cmp	r1, r3
 8007bc0:	d002      	beq.n	8007bc8 <__sflush_r+0x8c>
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f7ff f9e8 	bl	8006f98 <_free_r>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bcc:	e00d      	b.n	8007bea <__sflush_r+0xae>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b0      	blx	r6
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	1c50      	adds	r0, r2, #1
 8007bd8:	d1c9      	bne.n	8007b6e <__sflush_r+0x32>
 8007bda:	682b      	ldr	r3, [r5, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0c6      	beq.n	8007b6e <__sflush_r+0x32>
 8007be0:	2b1d      	cmp	r3, #29
 8007be2:	d001      	beq.n	8007be8 <__sflush_r+0xac>
 8007be4:	2b16      	cmp	r3, #22
 8007be6:	d11e      	bne.n	8007c26 <__sflush_r+0xea>
 8007be8:	602f      	str	r7, [r5, #0]
 8007bea:	2000      	movs	r0, #0
 8007bec:	e022      	b.n	8007c34 <__sflush_r+0xf8>
 8007bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf2:	b21b      	sxth	r3, r3
 8007bf4:	e01b      	b.n	8007c2e <__sflush_r+0xf2>
 8007bf6:	690f      	ldr	r7, [r1, #16]
 8007bf8:	2f00      	cmp	r7, #0
 8007bfa:	d0f6      	beq.n	8007bea <__sflush_r+0xae>
 8007bfc:	0793      	lsls	r3, r2, #30
 8007bfe:	680e      	ldr	r6, [r1, #0]
 8007c00:	bf08      	it	eq
 8007c02:	694b      	ldreq	r3, [r1, #20]
 8007c04:	600f      	str	r7, [r1, #0]
 8007c06:	bf18      	it	ne
 8007c08:	2300      	movne	r3, #0
 8007c0a:	eba6 0807 	sub.w	r8, r6, r7
 8007c0e:	608b      	str	r3, [r1, #8]
 8007c10:	f1b8 0f00 	cmp.w	r8, #0
 8007c14:	dde9      	ble.n	8007bea <__sflush_r+0xae>
 8007c16:	6a21      	ldr	r1, [r4, #32]
 8007c18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c1a:	4643      	mov	r3, r8
 8007c1c:	463a      	mov	r2, r7
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b0      	blx	r6
 8007c22:	2800      	cmp	r0, #0
 8007c24:	dc08      	bgt.n	8007c38 <__sflush_r+0xfc>
 8007c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c2e:	81a3      	strh	r3, [r4, #12]
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c38:	4407      	add	r7, r0
 8007c3a:	eba8 0800 	sub.w	r8, r8, r0
 8007c3e:	e7e7      	b.n	8007c10 <__sflush_r+0xd4>
 8007c40:	20400001 	.word	0x20400001

08007c44 <_fflush_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	690b      	ldr	r3, [r1, #16]
 8007c48:	4605      	mov	r5, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	b913      	cbnz	r3, 8007c54 <_fflush_r+0x10>
 8007c4e:	2500      	movs	r5, #0
 8007c50:	4628      	mov	r0, r5
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	b118      	cbz	r0, 8007c5e <_fflush_r+0x1a>
 8007c56:	6a03      	ldr	r3, [r0, #32]
 8007c58:	b90b      	cbnz	r3, 8007c5e <_fflush_r+0x1a>
 8007c5a:	f7fe f9f3 	bl	8006044 <__sinit>
 8007c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0f3      	beq.n	8007c4e <_fflush_r+0xa>
 8007c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c68:	07d0      	lsls	r0, r2, #31
 8007c6a:	d404      	bmi.n	8007c76 <_fflush_r+0x32>
 8007c6c:	0599      	lsls	r1, r3, #22
 8007c6e:	d402      	bmi.n	8007c76 <_fflush_r+0x32>
 8007c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c72:	f7fe fb36 	bl	80062e2 <__retarget_lock_acquire_recursive>
 8007c76:	4628      	mov	r0, r5
 8007c78:	4621      	mov	r1, r4
 8007c7a:	f7ff ff5f 	bl	8007b3c <__sflush_r>
 8007c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c80:	07da      	lsls	r2, r3, #31
 8007c82:	4605      	mov	r5, r0
 8007c84:	d4e4      	bmi.n	8007c50 <_fflush_r+0xc>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	059b      	lsls	r3, r3, #22
 8007c8a:	d4e1      	bmi.n	8007c50 <_fflush_r+0xc>
 8007c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c8e:	f7fe fb29 	bl	80062e4 <__retarget_lock_release_recursive>
 8007c92:	e7dd      	b.n	8007c50 <_fflush_r+0xc>

08007c94 <memmove>:
 8007c94:	4288      	cmp	r0, r1
 8007c96:	b510      	push	{r4, lr}
 8007c98:	eb01 0402 	add.w	r4, r1, r2
 8007c9c:	d902      	bls.n	8007ca4 <memmove+0x10>
 8007c9e:	4284      	cmp	r4, r0
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	d807      	bhi.n	8007cb4 <memmove+0x20>
 8007ca4:	1e43      	subs	r3, r0, #1
 8007ca6:	42a1      	cmp	r1, r4
 8007ca8:	d008      	beq.n	8007cbc <memmove+0x28>
 8007caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cb2:	e7f8      	b.n	8007ca6 <memmove+0x12>
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	428a      	cmp	r2, r1
 8007cba:	d100      	bne.n	8007cbe <memmove+0x2a>
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cc6:	e7f7      	b.n	8007cb8 <memmove+0x24>

08007cc8 <_sbrk_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d06      	ldr	r5, [pc, #24]	@ (8007ce4 <_sbrk_r+0x1c>)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	f7fa fe80 	bl	80029d8 <_sbrk>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_sbrk_r+0x1a>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_sbrk_r+0x1a>
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	20000458 	.word	0x20000458

08007ce8 <memcpy>:
 8007ce8:	440a      	add	r2, r1
 8007cea:	4291      	cmp	r1, r2
 8007cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf0:	d100      	bne.n	8007cf4 <memcpy+0xc>
 8007cf2:	4770      	bx	lr
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cfe:	4291      	cmp	r1, r2
 8007d00:	d1f9      	bne.n	8007cf6 <memcpy+0xe>
 8007d02:	bd10      	pop	{r4, pc}

08007d04 <__assert_func>:
 8007d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d06:	4614      	mov	r4, r2
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4b09      	ldr	r3, [pc, #36]	@ (8007d30 <__assert_func+0x2c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4605      	mov	r5, r0
 8007d10:	68d8      	ldr	r0, [r3, #12]
 8007d12:	b14c      	cbz	r4, 8007d28 <__assert_func+0x24>
 8007d14:	4b07      	ldr	r3, [pc, #28]	@ (8007d34 <__assert_func+0x30>)
 8007d16:	9100      	str	r1, [sp, #0]
 8007d18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d1c:	4906      	ldr	r1, [pc, #24]	@ (8007d38 <__assert_func+0x34>)
 8007d1e:	462b      	mov	r3, r5
 8007d20:	f000 f870 	bl	8007e04 <fiprintf>
 8007d24:	f000 f880 	bl	8007e28 <abort>
 8007d28:	4b04      	ldr	r3, [pc, #16]	@ (8007d3c <__assert_func+0x38>)
 8007d2a:	461c      	mov	r4, r3
 8007d2c:	e7f3      	b.n	8007d16 <__assert_func+0x12>
 8007d2e:	bf00      	nop
 8007d30:	20000018 	.word	0x20000018
 8007d34:	080088e5 	.word	0x080088e5
 8007d38:	080088f2 	.word	0x080088f2
 8007d3c:	08008920 	.word	0x08008920

08007d40 <_calloc_r>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	fba1 5402 	umull	r5, r4, r1, r2
 8007d46:	b934      	cbnz	r4, 8007d56 <_calloc_r+0x16>
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7ff f999 	bl	8007080 <_malloc_r>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	b928      	cbnz	r0, 8007d5e <_calloc_r+0x1e>
 8007d52:	4630      	mov	r0, r6
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
 8007d56:	220c      	movs	r2, #12
 8007d58:	6002      	str	r2, [r0, #0]
 8007d5a:	2600      	movs	r6, #0
 8007d5c:	e7f9      	b.n	8007d52 <_calloc_r+0x12>
 8007d5e:	462a      	mov	r2, r5
 8007d60:	4621      	mov	r1, r4
 8007d62:	f7fe fa40 	bl	80061e6 <memset>
 8007d66:	e7f4      	b.n	8007d52 <_calloc_r+0x12>

08007d68 <__ascii_mbtowc>:
 8007d68:	b082      	sub	sp, #8
 8007d6a:	b901      	cbnz	r1, 8007d6e <__ascii_mbtowc+0x6>
 8007d6c:	a901      	add	r1, sp, #4
 8007d6e:	b142      	cbz	r2, 8007d82 <__ascii_mbtowc+0x1a>
 8007d70:	b14b      	cbz	r3, 8007d86 <__ascii_mbtowc+0x1e>
 8007d72:	7813      	ldrb	r3, [r2, #0]
 8007d74:	600b      	str	r3, [r1, #0]
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	1e10      	subs	r0, r2, #0
 8007d7a:	bf18      	it	ne
 8007d7c:	2001      	movne	r0, #1
 8007d7e:	b002      	add	sp, #8
 8007d80:	4770      	bx	lr
 8007d82:	4610      	mov	r0, r2
 8007d84:	e7fb      	b.n	8007d7e <__ascii_mbtowc+0x16>
 8007d86:	f06f 0001 	mvn.w	r0, #1
 8007d8a:	e7f8      	b.n	8007d7e <__ascii_mbtowc+0x16>

08007d8c <_realloc_r>:
 8007d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d90:	4607      	mov	r7, r0
 8007d92:	4614      	mov	r4, r2
 8007d94:	460d      	mov	r5, r1
 8007d96:	b921      	cbnz	r1, 8007da2 <_realloc_r+0x16>
 8007d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	f7ff b96f 	b.w	8007080 <_malloc_r>
 8007da2:	b92a      	cbnz	r2, 8007db0 <_realloc_r+0x24>
 8007da4:	f7ff f8f8 	bl	8006f98 <_free_r>
 8007da8:	4625      	mov	r5, r4
 8007daa:	4628      	mov	r0, r5
 8007dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db0:	f000 f841 	bl	8007e36 <_malloc_usable_size_r>
 8007db4:	4284      	cmp	r4, r0
 8007db6:	4606      	mov	r6, r0
 8007db8:	d802      	bhi.n	8007dc0 <_realloc_r+0x34>
 8007dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dbe:	d8f4      	bhi.n	8007daa <_realloc_r+0x1e>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f7ff f95c 	bl	8007080 <_malloc_r>
 8007dc8:	4680      	mov	r8, r0
 8007dca:	b908      	cbnz	r0, 8007dd0 <_realloc_r+0x44>
 8007dcc:	4645      	mov	r5, r8
 8007dce:	e7ec      	b.n	8007daa <_realloc_r+0x1e>
 8007dd0:	42b4      	cmp	r4, r6
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	bf28      	it	cs
 8007dd8:	4632      	movcs	r2, r6
 8007dda:	f7ff ff85 	bl	8007ce8 <memcpy>
 8007dde:	4629      	mov	r1, r5
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7ff f8d9 	bl	8006f98 <_free_r>
 8007de6:	e7f1      	b.n	8007dcc <_realloc_r+0x40>

08007de8 <__ascii_wctomb>:
 8007de8:	4603      	mov	r3, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	b141      	cbz	r1, 8007e00 <__ascii_wctomb+0x18>
 8007dee:	2aff      	cmp	r2, #255	@ 0xff
 8007df0:	d904      	bls.n	8007dfc <__ascii_wctomb+0x14>
 8007df2:	228a      	movs	r2, #138	@ 0x8a
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	4770      	bx	lr
 8007dfc:	700a      	strb	r2, [r1, #0]
 8007dfe:	2001      	movs	r0, #1
 8007e00:	4770      	bx	lr
	...

08007e04 <fiprintf>:
 8007e04:	b40e      	push	{r1, r2, r3}
 8007e06:	b503      	push	{r0, r1, lr}
 8007e08:	4601      	mov	r1, r0
 8007e0a:	ab03      	add	r3, sp, #12
 8007e0c:	4805      	ldr	r0, [pc, #20]	@ (8007e24 <fiprintf+0x20>)
 8007e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e12:	6800      	ldr	r0, [r0, #0]
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	f000 f83f 	bl	8007e98 <_vfiprintf_r>
 8007e1a:	b002      	add	sp, #8
 8007e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e20:	b003      	add	sp, #12
 8007e22:	4770      	bx	lr
 8007e24:	20000018 	.word	0x20000018

08007e28 <abort>:
 8007e28:	b508      	push	{r3, lr}
 8007e2a:	2006      	movs	r0, #6
 8007e2c:	f000 fa08 	bl	8008240 <raise>
 8007e30:	2001      	movs	r0, #1
 8007e32:	f7fa fd59 	bl	80028e8 <_exit>

08007e36 <_malloc_usable_size_r>:
 8007e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e3a:	1f18      	subs	r0, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	bfbc      	itt	lt
 8007e40:	580b      	ldrlt	r3, [r1, r0]
 8007e42:	18c0      	addlt	r0, r0, r3
 8007e44:	4770      	bx	lr

08007e46 <__sfputc_r>:
 8007e46:	6893      	ldr	r3, [r2, #8]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	b410      	push	{r4}
 8007e4e:	6093      	str	r3, [r2, #8]
 8007e50:	da08      	bge.n	8007e64 <__sfputc_r+0x1e>
 8007e52:	6994      	ldr	r4, [r2, #24]
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	db01      	blt.n	8007e5c <__sfputc_r+0x16>
 8007e58:	290a      	cmp	r1, #10
 8007e5a:	d103      	bne.n	8007e64 <__sfputc_r+0x1e>
 8007e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e60:	f000 b932 	b.w	80080c8 <__swbuf_r>
 8007e64:	6813      	ldr	r3, [r2, #0]
 8007e66:	1c58      	adds	r0, r3, #1
 8007e68:	6010      	str	r0, [r2, #0]
 8007e6a:	7019      	strb	r1, [r3, #0]
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <__sfputs_r>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	4606      	mov	r6, r0
 8007e78:	460f      	mov	r7, r1
 8007e7a:	4614      	mov	r4, r2
 8007e7c:	18d5      	adds	r5, r2, r3
 8007e7e:	42ac      	cmp	r4, r5
 8007e80:	d101      	bne.n	8007e86 <__sfputs_r+0x12>
 8007e82:	2000      	movs	r0, #0
 8007e84:	e007      	b.n	8007e96 <__sfputs_r+0x22>
 8007e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8a:	463a      	mov	r2, r7
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7ff ffda 	bl	8007e46 <__sfputc_r>
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	d1f3      	bne.n	8007e7e <__sfputs_r+0xa>
 8007e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e98 <_vfiprintf_r>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	460d      	mov	r5, r1
 8007e9e:	b09d      	sub	sp, #116	@ 0x74
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	4698      	mov	r8, r3
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	b118      	cbz	r0, 8007eb0 <_vfiprintf_r+0x18>
 8007ea8:	6a03      	ldr	r3, [r0, #32]
 8007eaa:	b90b      	cbnz	r3, 8007eb0 <_vfiprintf_r+0x18>
 8007eac:	f7fe f8ca 	bl	8006044 <__sinit>
 8007eb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eb2:	07d9      	lsls	r1, r3, #31
 8007eb4:	d405      	bmi.n	8007ec2 <_vfiprintf_r+0x2a>
 8007eb6:	89ab      	ldrh	r3, [r5, #12]
 8007eb8:	059a      	lsls	r2, r3, #22
 8007eba:	d402      	bmi.n	8007ec2 <_vfiprintf_r+0x2a>
 8007ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ebe:	f7fe fa10 	bl	80062e2 <__retarget_lock_acquire_recursive>
 8007ec2:	89ab      	ldrh	r3, [r5, #12]
 8007ec4:	071b      	lsls	r3, r3, #28
 8007ec6:	d501      	bpl.n	8007ecc <_vfiprintf_r+0x34>
 8007ec8:	692b      	ldr	r3, [r5, #16]
 8007eca:	b99b      	cbnz	r3, 8007ef4 <_vfiprintf_r+0x5c>
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f000 f938 	bl	8008144 <__swsetup_r>
 8007ed4:	b170      	cbz	r0, 8007ef4 <_vfiprintf_r+0x5c>
 8007ed6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ed8:	07dc      	lsls	r4, r3, #31
 8007eda:	d504      	bpl.n	8007ee6 <_vfiprintf_r+0x4e>
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	b01d      	add	sp, #116	@ 0x74
 8007ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	0598      	lsls	r0, r3, #22
 8007eea:	d4f7      	bmi.n	8007edc <_vfiprintf_r+0x44>
 8007eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eee:	f7fe f9f9 	bl	80062e4 <__retarget_lock_release_recursive>
 8007ef2:	e7f3      	b.n	8007edc <_vfiprintf_r+0x44>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ef8:	2320      	movs	r3, #32
 8007efa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f02:	2330      	movs	r3, #48	@ 0x30
 8007f04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080b4 <_vfiprintf_r+0x21c>
 8007f08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f0c:	f04f 0901 	mov.w	r9, #1
 8007f10:	4623      	mov	r3, r4
 8007f12:	469a      	mov	sl, r3
 8007f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f18:	b10a      	cbz	r2, 8007f1e <_vfiprintf_r+0x86>
 8007f1a:	2a25      	cmp	r2, #37	@ 0x25
 8007f1c:	d1f9      	bne.n	8007f12 <_vfiprintf_r+0x7a>
 8007f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f22:	d00b      	beq.n	8007f3c <_vfiprintf_r+0xa4>
 8007f24:	465b      	mov	r3, fp
 8007f26:	4622      	mov	r2, r4
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7ff ffa2 	bl	8007e74 <__sfputs_r>
 8007f30:	3001      	adds	r0, #1
 8007f32:	f000 80a7 	beq.w	8008084 <_vfiprintf_r+0x1ec>
 8007f36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f38:	445a      	add	r2, fp
 8007f3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 809f 	beq.w	8008084 <_vfiprintf_r+0x1ec>
 8007f46:	2300      	movs	r3, #0
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f50:	f10a 0a01 	add.w	sl, sl, #1
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f5e:	4654      	mov	r4, sl
 8007f60:	2205      	movs	r2, #5
 8007f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f66:	4853      	ldr	r0, [pc, #332]	@ (80080b4 <_vfiprintf_r+0x21c>)
 8007f68:	f7f8 f942 	bl	80001f0 <memchr>
 8007f6c:	9a04      	ldr	r2, [sp, #16]
 8007f6e:	b9d8      	cbnz	r0, 8007fa8 <_vfiprintf_r+0x110>
 8007f70:	06d1      	lsls	r1, r2, #27
 8007f72:	bf44      	itt	mi
 8007f74:	2320      	movmi	r3, #32
 8007f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f7a:	0713      	lsls	r3, r2, #28
 8007f7c:	bf44      	itt	mi
 8007f7e:	232b      	movmi	r3, #43	@ 0x2b
 8007f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f84:	f89a 3000 	ldrb.w	r3, [sl]
 8007f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f8a:	d015      	beq.n	8007fb8 <_vfiprintf_r+0x120>
 8007f8c:	9a07      	ldr	r2, [sp, #28]
 8007f8e:	4654      	mov	r4, sl
 8007f90:	2000      	movs	r0, #0
 8007f92:	f04f 0c0a 	mov.w	ip, #10
 8007f96:	4621      	mov	r1, r4
 8007f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f9c:	3b30      	subs	r3, #48	@ 0x30
 8007f9e:	2b09      	cmp	r3, #9
 8007fa0:	d94b      	bls.n	800803a <_vfiprintf_r+0x1a2>
 8007fa2:	b1b0      	cbz	r0, 8007fd2 <_vfiprintf_r+0x13a>
 8007fa4:	9207      	str	r2, [sp, #28]
 8007fa6:	e014      	b.n	8007fd2 <_vfiprintf_r+0x13a>
 8007fa8:	eba0 0308 	sub.w	r3, r0, r8
 8007fac:	fa09 f303 	lsl.w	r3, r9, r3
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	9304      	str	r3, [sp, #16]
 8007fb4:	46a2      	mov	sl, r4
 8007fb6:	e7d2      	b.n	8007f5e <_vfiprintf_r+0xc6>
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	1d19      	adds	r1, r3, #4
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	9103      	str	r1, [sp, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bfbb      	ittet	lt
 8007fc4:	425b      	neglt	r3, r3
 8007fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8007fca:	9307      	strge	r3, [sp, #28]
 8007fcc:	9307      	strlt	r3, [sp, #28]
 8007fce:	bfb8      	it	lt
 8007fd0:	9204      	strlt	r2, [sp, #16]
 8007fd2:	7823      	ldrb	r3, [r4, #0]
 8007fd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fd6:	d10a      	bne.n	8007fee <_vfiprintf_r+0x156>
 8007fd8:	7863      	ldrb	r3, [r4, #1]
 8007fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fdc:	d132      	bne.n	8008044 <_vfiprintf_r+0x1ac>
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	1d1a      	adds	r2, r3, #4
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	9203      	str	r2, [sp, #12]
 8007fe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fea:	3402      	adds	r4, #2
 8007fec:	9305      	str	r3, [sp, #20]
 8007fee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080c4 <_vfiprintf_r+0x22c>
 8007ff2:	7821      	ldrb	r1, [r4, #0]
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	4650      	mov	r0, sl
 8007ff8:	f7f8 f8fa 	bl	80001f0 <memchr>
 8007ffc:	b138      	cbz	r0, 800800e <_vfiprintf_r+0x176>
 8007ffe:	9b04      	ldr	r3, [sp, #16]
 8008000:	eba0 000a 	sub.w	r0, r0, sl
 8008004:	2240      	movs	r2, #64	@ 0x40
 8008006:	4082      	lsls	r2, r0
 8008008:	4313      	orrs	r3, r2
 800800a:	3401      	adds	r4, #1
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008012:	4829      	ldr	r0, [pc, #164]	@ (80080b8 <_vfiprintf_r+0x220>)
 8008014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008018:	2206      	movs	r2, #6
 800801a:	f7f8 f8e9 	bl	80001f0 <memchr>
 800801e:	2800      	cmp	r0, #0
 8008020:	d03f      	beq.n	80080a2 <_vfiprintf_r+0x20a>
 8008022:	4b26      	ldr	r3, [pc, #152]	@ (80080bc <_vfiprintf_r+0x224>)
 8008024:	bb1b      	cbnz	r3, 800806e <_vfiprintf_r+0x1d6>
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	3307      	adds	r3, #7
 800802a:	f023 0307 	bic.w	r3, r3, #7
 800802e:	3308      	adds	r3, #8
 8008030:	9303      	str	r3, [sp, #12]
 8008032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008034:	443b      	add	r3, r7
 8008036:	9309      	str	r3, [sp, #36]	@ 0x24
 8008038:	e76a      	b.n	8007f10 <_vfiprintf_r+0x78>
 800803a:	fb0c 3202 	mla	r2, ip, r2, r3
 800803e:	460c      	mov	r4, r1
 8008040:	2001      	movs	r0, #1
 8008042:	e7a8      	b.n	8007f96 <_vfiprintf_r+0xfe>
 8008044:	2300      	movs	r3, #0
 8008046:	3401      	adds	r4, #1
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	4619      	mov	r1, r3
 800804c:	f04f 0c0a 	mov.w	ip, #10
 8008050:	4620      	mov	r0, r4
 8008052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008056:	3a30      	subs	r2, #48	@ 0x30
 8008058:	2a09      	cmp	r2, #9
 800805a:	d903      	bls.n	8008064 <_vfiprintf_r+0x1cc>
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0c6      	beq.n	8007fee <_vfiprintf_r+0x156>
 8008060:	9105      	str	r1, [sp, #20]
 8008062:	e7c4      	b.n	8007fee <_vfiprintf_r+0x156>
 8008064:	fb0c 2101 	mla	r1, ip, r1, r2
 8008068:	4604      	mov	r4, r0
 800806a:	2301      	movs	r3, #1
 800806c:	e7f0      	b.n	8008050 <_vfiprintf_r+0x1b8>
 800806e:	ab03      	add	r3, sp, #12
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	462a      	mov	r2, r5
 8008074:	4b12      	ldr	r3, [pc, #72]	@ (80080c0 <_vfiprintf_r+0x228>)
 8008076:	a904      	add	r1, sp, #16
 8008078:	4630      	mov	r0, r6
 800807a:	f7fd fba1 	bl	80057c0 <_printf_float>
 800807e:	4607      	mov	r7, r0
 8008080:	1c78      	adds	r0, r7, #1
 8008082:	d1d6      	bne.n	8008032 <_vfiprintf_r+0x19a>
 8008084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008086:	07d9      	lsls	r1, r3, #31
 8008088:	d405      	bmi.n	8008096 <_vfiprintf_r+0x1fe>
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	059a      	lsls	r2, r3, #22
 800808e:	d402      	bmi.n	8008096 <_vfiprintf_r+0x1fe>
 8008090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008092:	f7fe f927 	bl	80062e4 <__retarget_lock_release_recursive>
 8008096:	89ab      	ldrh	r3, [r5, #12]
 8008098:	065b      	lsls	r3, r3, #25
 800809a:	f53f af1f 	bmi.w	8007edc <_vfiprintf_r+0x44>
 800809e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080a0:	e71e      	b.n	8007ee0 <_vfiprintf_r+0x48>
 80080a2:	ab03      	add	r3, sp, #12
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	462a      	mov	r2, r5
 80080a8:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <_vfiprintf_r+0x228>)
 80080aa:	a904      	add	r1, sp, #16
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7fd fe1f 	bl	8005cf0 <_printf_i>
 80080b2:	e7e4      	b.n	800807e <_vfiprintf_r+0x1e6>
 80080b4:	080088ca 	.word	0x080088ca
 80080b8:	080088d4 	.word	0x080088d4
 80080bc:	080057c1 	.word	0x080057c1
 80080c0:	08007e75 	.word	0x08007e75
 80080c4:	080088d0 	.word	0x080088d0

080080c8 <__swbuf_r>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	460e      	mov	r6, r1
 80080cc:	4614      	mov	r4, r2
 80080ce:	4605      	mov	r5, r0
 80080d0:	b118      	cbz	r0, 80080da <__swbuf_r+0x12>
 80080d2:	6a03      	ldr	r3, [r0, #32]
 80080d4:	b90b      	cbnz	r3, 80080da <__swbuf_r+0x12>
 80080d6:	f7fd ffb5 	bl	8006044 <__sinit>
 80080da:	69a3      	ldr	r3, [r4, #24]
 80080dc:	60a3      	str	r3, [r4, #8]
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	071a      	lsls	r2, r3, #28
 80080e2:	d501      	bpl.n	80080e8 <__swbuf_r+0x20>
 80080e4:	6923      	ldr	r3, [r4, #16]
 80080e6:	b943      	cbnz	r3, 80080fa <__swbuf_r+0x32>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f82a 	bl	8008144 <__swsetup_r>
 80080f0:	b118      	cbz	r0, 80080fa <__swbuf_r+0x32>
 80080f2:	f04f 37ff 	mov.w	r7, #4294967295
 80080f6:	4638      	mov	r0, r7
 80080f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	6922      	ldr	r2, [r4, #16]
 80080fe:	1a98      	subs	r0, r3, r2
 8008100:	6963      	ldr	r3, [r4, #20]
 8008102:	b2f6      	uxtb	r6, r6
 8008104:	4283      	cmp	r3, r0
 8008106:	4637      	mov	r7, r6
 8008108:	dc05      	bgt.n	8008116 <__swbuf_r+0x4e>
 800810a:	4621      	mov	r1, r4
 800810c:	4628      	mov	r0, r5
 800810e:	f7ff fd99 	bl	8007c44 <_fflush_r>
 8008112:	2800      	cmp	r0, #0
 8008114:	d1ed      	bne.n	80080f2 <__swbuf_r+0x2a>
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	3b01      	subs	r3, #1
 800811a:	60a3      	str	r3, [r4, #8]
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	6022      	str	r2, [r4, #0]
 8008122:	701e      	strb	r6, [r3, #0]
 8008124:	6962      	ldr	r2, [r4, #20]
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	429a      	cmp	r2, r3
 800812a:	d004      	beq.n	8008136 <__swbuf_r+0x6e>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	07db      	lsls	r3, r3, #31
 8008130:	d5e1      	bpl.n	80080f6 <__swbuf_r+0x2e>
 8008132:	2e0a      	cmp	r6, #10
 8008134:	d1df      	bne.n	80080f6 <__swbuf_r+0x2e>
 8008136:	4621      	mov	r1, r4
 8008138:	4628      	mov	r0, r5
 800813a:	f7ff fd83 	bl	8007c44 <_fflush_r>
 800813e:	2800      	cmp	r0, #0
 8008140:	d0d9      	beq.n	80080f6 <__swbuf_r+0x2e>
 8008142:	e7d6      	b.n	80080f2 <__swbuf_r+0x2a>

08008144 <__swsetup_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4b29      	ldr	r3, [pc, #164]	@ (80081ec <__swsetup_r+0xa8>)
 8008148:	4605      	mov	r5, r0
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	460c      	mov	r4, r1
 800814e:	b118      	cbz	r0, 8008158 <__swsetup_r+0x14>
 8008150:	6a03      	ldr	r3, [r0, #32]
 8008152:	b90b      	cbnz	r3, 8008158 <__swsetup_r+0x14>
 8008154:	f7fd ff76 	bl	8006044 <__sinit>
 8008158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815c:	0719      	lsls	r1, r3, #28
 800815e:	d422      	bmi.n	80081a6 <__swsetup_r+0x62>
 8008160:	06da      	lsls	r2, r3, #27
 8008162:	d407      	bmi.n	8008174 <__swsetup_r+0x30>
 8008164:	2209      	movs	r2, #9
 8008166:	602a      	str	r2, [r5, #0]
 8008168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	f04f 30ff 	mov.w	r0, #4294967295
 8008172:	e033      	b.n	80081dc <__swsetup_r+0x98>
 8008174:	0758      	lsls	r0, r3, #29
 8008176:	d512      	bpl.n	800819e <__swsetup_r+0x5a>
 8008178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800817a:	b141      	cbz	r1, 800818e <__swsetup_r+0x4a>
 800817c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008180:	4299      	cmp	r1, r3
 8008182:	d002      	beq.n	800818a <__swsetup_r+0x46>
 8008184:	4628      	mov	r0, r5
 8008186:	f7fe ff07 	bl	8006f98 <_free_r>
 800818a:	2300      	movs	r3, #0
 800818c:	6363      	str	r3, [r4, #52]	@ 0x34
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	2300      	movs	r3, #0
 8008198:	6063      	str	r3, [r4, #4]
 800819a:	6923      	ldr	r3, [r4, #16]
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	f043 0308 	orr.w	r3, r3, #8
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	b94b      	cbnz	r3, 80081be <__swsetup_r+0x7a>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081b4:	d003      	beq.n	80081be <__swsetup_r+0x7a>
 80081b6:	4621      	mov	r1, r4
 80081b8:	4628      	mov	r0, r5
 80081ba:	f000 f883 	bl	80082c4 <__smakebuf_r>
 80081be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c2:	f013 0201 	ands.w	r2, r3, #1
 80081c6:	d00a      	beq.n	80081de <__swsetup_r+0x9a>
 80081c8:	2200      	movs	r2, #0
 80081ca:	60a2      	str	r2, [r4, #8]
 80081cc:	6962      	ldr	r2, [r4, #20]
 80081ce:	4252      	negs	r2, r2
 80081d0:	61a2      	str	r2, [r4, #24]
 80081d2:	6922      	ldr	r2, [r4, #16]
 80081d4:	b942      	cbnz	r2, 80081e8 <__swsetup_r+0xa4>
 80081d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081da:	d1c5      	bne.n	8008168 <__swsetup_r+0x24>
 80081dc:	bd38      	pop	{r3, r4, r5, pc}
 80081de:	0799      	lsls	r1, r3, #30
 80081e0:	bf58      	it	pl
 80081e2:	6962      	ldrpl	r2, [r4, #20]
 80081e4:	60a2      	str	r2, [r4, #8]
 80081e6:	e7f4      	b.n	80081d2 <__swsetup_r+0x8e>
 80081e8:	2000      	movs	r0, #0
 80081ea:	e7f7      	b.n	80081dc <__swsetup_r+0x98>
 80081ec:	20000018 	.word	0x20000018

080081f0 <_raise_r>:
 80081f0:	291f      	cmp	r1, #31
 80081f2:	b538      	push	{r3, r4, r5, lr}
 80081f4:	4605      	mov	r5, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	d904      	bls.n	8008204 <_raise_r+0x14>
 80081fa:	2316      	movs	r3, #22
 80081fc:	6003      	str	r3, [r0, #0]
 80081fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008206:	b112      	cbz	r2, 800820e <_raise_r+0x1e>
 8008208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800820c:	b94b      	cbnz	r3, 8008222 <_raise_r+0x32>
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f830 	bl	8008274 <_getpid_r>
 8008214:	4622      	mov	r2, r4
 8008216:	4601      	mov	r1, r0
 8008218:	4628      	mov	r0, r5
 800821a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800821e:	f000 b817 	b.w	8008250 <_kill_r>
 8008222:	2b01      	cmp	r3, #1
 8008224:	d00a      	beq.n	800823c <_raise_r+0x4c>
 8008226:	1c59      	adds	r1, r3, #1
 8008228:	d103      	bne.n	8008232 <_raise_r+0x42>
 800822a:	2316      	movs	r3, #22
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	2001      	movs	r0, #1
 8008230:	e7e7      	b.n	8008202 <_raise_r+0x12>
 8008232:	2100      	movs	r1, #0
 8008234:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008238:	4620      	mov	r0, r4
 800823a:	4798      	blx	r3
 800823c:	2000      	movs	r0, #0
 800823e:	e7e0      	b.n	8008202 <_raise_r+0x12>

08008240 <raise>:
 8008240:	4b02      	ldr	r3, [pc, #8]	@ (800824c <raise+0xc>)
 8008242:	4601      	mov	r1, r0
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f7ff bfd3 	b.w	80081f0 <_raise_r>
 800824a:	bf00      	nop
 800824c:	20000018 	.word	0x20000018

08008250 <_kill_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	@ (8008270 <_kill_r+0x20>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	4611      	mov	r1, r2
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	f7fa fb33 	bl	80028c8 <_kill>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	d102      	bne.n	800826c <_kill_r+0x1c>
 8008266:	682b      	ldr	r3, [r5, #0]
 8008268:	b103      	cbz	r3, 800826c <_kill_r+0x1c>
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	bf00      	nop
 8008270:	20000458 	.word	0x20000458

08008274 <_getpid_r>:
 8008274:	f7fa bb20 	b.w	80028b8 <_getpid>

08008278 <__swhatbuf_r>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	460c      	mov	r4, r1
 800827c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008280:	2900      	cmp	r1, #0
 8008282:	b096      	sub	sp, #88	@ 0x58
 8008284:	4615      	mov	r5, r2
 8008286:	461e      	mov	r6, r3
 8008288:	da0d      	bge.n	80082a6 <__swhatbuf_r+0x2e>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008290:	f04f 0100 	mov.w	r1, #0
 8008294:	bf14      	ite	ne
 8008296:	2340      	movne	r3, #64	@ 0x40
 8008298:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800829c:	2000      	movs	r0, #0
 800829e:	6031      	str	r1, [r6, #0]
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	b016      	add	sp, #88	@ 0x58
 80082a4:	bd70      	pop	{r4, r5, r6, pc}
 80082a6:	466a      	mov	r2, sp
 80082a8:	f000 f848 	bl	800833c <_fstat_r>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	dbec      	blt.n	800828a <__swhatbuf_r+0x12>
 80082b0:	9901      	ldr	r1, [sp, #4]
 80082b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082ba:	4259      	negs	r1, r3
 80082bc:	4159      	adcs	r1, r3
 80082be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082c2:	e7eb      	b.n	800829c <__swhatbuf_r+0x24>

080082c4 <__smakebuf_r>:
 80082c4:	898b      	ldrh	r3, [r1, #12]
 80082c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c8:	079d      	lsls	r5, r3, #30
 80082ca:	4606      	mov	r6, r0
 80082cc:	460c      	mov	r4, r1
 80082ce:	d507      	bpl.n	80082e0 <__smakebuf_r+0x1c>
 80082d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	2301      	movs	r3, #1
 80082da:	6163      	str	r3, [r4, #20]
 80082dc:	b003      	add	sp, #12
 80082de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e0:	ab01      	add	r3, sp, #4
 80082e2:	466a      	mov	r2, sp
 80082e4:	f7ff ffc8 	bl	8008278 <__swhatbuf_r>
 80082e8:	9f00      	ldr	r7, [sp, #0]
 80082ea:	4605      	mov	r5, r0
 80082ec:	4639      	mov	r1, r7
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7fe fec6 	bl	8007080 <_malloc_r>
 80082f4:	b948      	cbnz	r0, 800830a <__smakebuf_r+0x46>
 80082f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fa:	059a      	lsls	r2, r3, #22
 80082fc:	d4ee      	bmi.n	80082dc <__smakebuf_r+0x18>
 80082fe:	f023 0303 	bic.w	r3, r3, #3
 8008302:	f043 0302 	orr.w	r3, r3, #2
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	e7e2      	b.n	80082d0 <__smakebuf_r+0xc>
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	6020      	str	r0, [r4, #0]
 800830e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	9b01      	ldr	r3, [sp, #4]
 8008316:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800831a:	b15b      	cbz	r3, 8008334 <__smakebuf_r+0x70>
 800831c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008320:	4630      	mov	r0, r6
 8008322:	f000 f81d 	bl	8008360 <_isatty_r>
 8008326:	b128      	cbz	r0, 8008334 <__smakebuf_r+0x70>
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	f023 0303 	bic.w	r3, r3, #3
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	81a3      	strh	r3, [r4, #12]
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	431d      	orrs	r5, r3
 8008338:	81a5      	strh	r5, [r4, #12]
 800833a:	e7cf      	b.n	80082dc <__smakebuf_r+0x18>

0800833c <_fstat_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	@ (800835c <_fstat_r+0x20>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	f7fa fb1d 	bl	8002988 <_fstat>
 800834e:	1c43      	adds	r3, r0, #1
 8008350:	d102      	bne.n	8008358 <_fstat_r+0x1c>
 8008352:	682b      	ldr	r3, [r5, #0]
 8008354:	b103      	cbz	r3, 8008358 <_fstat_r+0x1c>
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	bd38      	pop	{r3, r4, r5, pc}
 800835a:	bf00      	nop
 800835c:	20000458 	.word	0x20000458

08008360 <_isatty_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d06      	ldr	r5, [pc, #24]	@ (800837c <_isatty_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7fa fb1c 	bl	80029a8 <_isatty>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_isatty_r+0x1a>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_isatty_r+0x1a>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20000458 	.word	0x20000458

08008380 <_init>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr

0800838c <_fini>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	bf00      	nop
 8008390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008392:	bc08      	pop	{r3}
 8008394:	469e      	mov	lr, r3
 8008396:	4770      	bx	lr
